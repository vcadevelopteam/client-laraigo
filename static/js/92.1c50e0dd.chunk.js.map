{"version":3,"sources":["pages/ActivateUser.tsx","store/activationuser/actions.ts"],"names":["useStyles","makeStyles","theme","titlecards","fontWeight","fontSize","color","width","textAlign","containerHead","display","justifyContent","alignItems","marginBottom","boxstyles","margin","border","padding","buttonContainer","spinnerContainer","link","cursor","ActivateUser","classes","t","useTranslation","token","useParams","dispatch","useDispatch","activationRes","useSelector","state","activationuser","activation","useState","loading","setLoading","valid","setValid","useEffect","sendActivation","error","data","success","setTimeout","style","marginTop","className","src","height","alt","langKeys","message_please_wait","clsx","message_try_later","message_account_activated","message_click_to_login","variant","type","backgroundColor","onClick","window","open","paths","SIGNIN","continue","message_account_already_activated","callAPI","ActivationUserService","postActivationUser","types","actionTypes","ACTIVATIONUSER_SEND","ACTIVATIONUSER_SUCCESS","failure","ACTIVATIONUSER_FAILURE","saveUser","requestBody","postSaveUser","EXECUTE_MAIN","EXECUTE_MAIN_SUCCESS","EXECUTE_MAIN_FAILURE","delUser","DELUSER_SEND","DELUSER_SUCCESS","DELUSER_FAILURE"],"mappings":"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","file":"static/js/92.1c50e0dd.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { FC, useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { langKeys } from 'lang/keys';\r\nimport { useParams } from 'react-router';\r\nimport { useDispatch } from 'react-redux';\r\nimport { sendActivation } from 'store/activationuser/actions';\r\nimport { useSelector } from 'hooks';\r\nimport paths from 'common/constants/paths';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    titlecards:{\r\n        fontWeight: \"bold\",\r\n        fontSize: \"1.5em\",\r\n        color: \"#883db7\",\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n    containerHead: {\r\n        display: \"flex\",\r\n        width: \"100%\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        marginBottom: \"30px\"\r\n    },\r\n    boxstyles: {\r\n        textAlign: \"justify\",\r\n        margin: \"25px 10%\",\r\n        border: \"grey 1px solid\",\r\n        padding: 25\r\n    },\r\n    buttonContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end'\r\n    },\r\n    spinnerContainer: {\r\n        margin: '20px auto',\r\n        color: '#883db7'\r\n    },\r\n    link: {\r\n        color: '#883db7',\r\n        cursor: 'pointer'\r\n    }\r\n}));\r\n\r\nexport const ActivateUser: FC = () => {\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n    const { token }: any = useParams();\r\n    const dispatch = useDispatch();\r\n    const activationRes = useSelector(state => state.activationuser.activation);\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n    const [valid, setValid] = useState<boolean | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            dispatch(sendActivation(token));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!activationRes.error && activationRes.data) {\r\n            setLoading(false);\r\n            if (activationRes.data?.success) {\r\n                setValid(true);\r\n            }\r\n            else {\r\n                setValid(false);\r\n            }\r\n        }\r\n        else if (activationRes.error) {\r\n            setTimeout(() => {\r\n                setLoading(false);\r\n            }, 3000);\r\n        }\r\n    }, [activationRes])\r\n\r\n    switch (valid) {\r\n        case null:\r\n            if (loading) {\r\n                return (\r\n                    <div style={{ width: \"100%\",marginTop:25}}>\r\n                        <div className={classes.containerHead}>\r\n                            <img src=\"/Laraigo-vertical-logo-name.svg\" style={{ height: 200}} alt=\"logo\" />\r\n                        </div>\r\n                        <div className={classes.titlecards}>{t(langKeys.message_please_wait)}</div>\r\n                        <div className={clsx(\"la-ball-beat la-2x\", classes.spinnerContainer)}>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n            else {\r\n                return (\r\n                    <div style={{ width: \"100%\",marginTop:25}}>\r\n                        <div className={classes.containerHead}>\r\n                            <img src=\"/Laraigo-vertical-logo-name.svg\" style={{ height: 200}} alt=\"logo\" />\r\n                        </div>\r\n                        <div className={classes.titlecards}>{t(langKeys.message_try_later)}</div>\r\n                    </div>\r\n                );\r\n            }\r\n        case true:\r\n            return (\r\n                <div style={{ width: \"100%\",marginTop:25}}>\r\n                    <div className={classes.containerHead}>\r\n                        <img src=\"/Laraigo-vertical-logo-name.svg\" style={{ height: 200}} alt=\"logo\" />\r\n                    </div>\r\n                    <div className={classes.titlecards}>{t(langKeys.message_account_activated)}</div>\r\n                    <Box className={classes.boxstyles}>\r\n                        <p>{t(langKeys.message_click_to_login)}</p>\r\n                        <div className={classes.buttonContainer}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                type=\"button\"\r\n                                color=\"primary\"\r\n                                style={{ backgroundColor: \"#7721AD\" }}\r\n                                onClick={() => window.open(paths.SIGNIN, \"_self\")}\r\n                            >{t(langKeys.continue)}</Button>\r\n                        </div>\r\n                    </Box>\r\n                </div>\r\n            );\r\n        case false:\r\n            return (\r\n                <div style={{ width: \"100%\",marginTop:25}}>\r\n                    <div className={classes.containerHead}>\r\n                        <img src=\"/Laraigo-vertical-logo-name.svg\" style={{ height: 200}} alt=\"logo\" />\r\n                    </div>\r\n                    <div className={classes.titlecards}>{t(langKeys.message_account_already_activated)}</div>\r\n                    <Box className={classes.boxstyles}>\r\n                        <p>{t(langKeys.message_click_to_login)}</p>\r\n                        <div className={classes.buttonContainer}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                type=\"button\"\r\n                                color=\"primary\"\r\n                                style={{ backgroundColor: \"#7721AD\" }}\r\n                                onClick={() => window.open(paths.SIGNIN, \"_self\")}\r\n                            >{t(langKeys.continue)}</Button>\r\n                        </div>\r\n                    </Box>\r\n                </div>\r\n            );\r\n    }\r\n};\r\n\r\nexport default ActivateUser;","import { IActionCall, ITransaction } from \"@types\";\r\nimport { ActivationUserService } from \"network\";\r\nimport actionTypes from \"./actionTypes\";\r\n\r\nexport const sendActivation = (token: string): IActionCall => ({\r\n    callAPI: () => ActivationUserService.postActivationUser(token),\r\n    types: {\r\n        loading: actionTypes.ACTIVATIONUSER_SEND,\r\n        success: actionTypes.ACTIVATIONUSER_SUCCESS,\r\n        failure: actionTypes.ACTIVATIONUSER_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetActivation = (): IActionCall => ({type: actionTypes.ACTIVATIONUSER_RESET});\r\n\r\n\r\n/**Action type = EXECUTE_MAIN */\r\nexport const saveUser = (requestBody: ITransaction, transaction: boolean = false): IActionCall => ({\r\n    callAPI: () => ActivationUserService.postSaveUser(requestBody),\r\n    types: {\r\n        loading: actionTypes.EXECUTE_MAIN,\r\n        success: actionTypes.EXECUTE_MAIN_SUCCESS,\r\n        failure: actionTypes.EXECUTE_MAIN_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetSaveUser = (): IActionCall => ({ type: actionTypes.EXECUTE_MAIN_RESET });\r\n\r\nexport const delUser = (requestBody: ITransaction, transaction: boolean = false): IActionCall => ({\r\n    callAPI: () => ActivationUserService.delUser(requestBody),\r\n    types: {\r\n        loading: actionTypes.DELUSER_SEND,\r\n        success: actionTypes.DELUSER_SUCCESS,\r\n        failure: actionTypes.DELUSER_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetDelUser = (): IActionCall => ({type: actionTypes.DELUSER_RESET});"],"sourceRoot":""}