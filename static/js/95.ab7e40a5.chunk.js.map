{"version":3,"sources":["pages/channels/ChannelAddIos.tsx","store/channel/actions.ts"],"names":["useChannelAddStyles","makeStyles","theme","button","padding","fontWeight","fontSize","textTransform","width","ChannelAddIos","useState","waitSave","setWaitSave","setins","setsetins","channelreg","setChannelreg","showRegister","setShowRegister","showClose","setShowClose","showScript","setShowScript","integrationId","setIntegrationId","mainResult","useSelector","state","channel","channelList","executeResult","successinsert","history","useHistory","dispatch","useDispatch","t","useTranslation","coloricon","setcoloricon","classes","fields","setFields","whatsAppData","useLocation","a","insertChannel","push","paths","CHANNELS","useEffect","loading","showSnackbar","show","severity","message","langKeys","successful_register","showBackdrop","data","errormessage","code","module","property","toLocaleLowerCase","style","color","href","onClick","e","preventDefault","CHANNELS_ADD","previoustext","textAlign","marginLeft","marginRight","maxWidth","commchannelfinishreg","className","onChange","value","partialf","parameters","description","setnameField","label","givechannelname","lineHeight","mb","givechannelcolor","display","justifyContent","alignItems","fill","hex","prev","paddingLeft","finishreg","disabled","variant","goback","close","height","flexDirection","iosstep1","background","border","pageBreakInside","fontFamily","overflow","wordWrap","whiteSpace","iosstep2","iosstep3","getChannelsList","accessToken","appId","callAPI","ChannelsService","getPagelist","types","actionTypes","success","CHANNELS_SUCCESS","failure","CHANNELS_FAILURE","type","requestBody","insertchnl","CHANNELS_INSERTSUCCESS","activateChannel","ACTIVATECHANNEL","ACTIVATECHANNEL_SUCCESS","ACTIVATECHANNEL_FAILURE","deleteChannel","deletechnl","checkPaymentPlan","CHECK_PAYMENTPLAN","CHECK_PAYMENTPLAN_SUCCESS","CHECK_PAYMENTPLAN_FAILURE","insertChannel2","payload","chatIconFile","service","interface","iconbutton","headerIconFile","iconheader","botIconFile","iconbot","bubbleIconFile","bubble","iconbubble","chatIcon","headerIcon","botIcon","bubbleIcon","fd","FormData","append","name","CommonService","uploadFile","INSERT_CHANNEL","INSERT_CHANNEL_FAILURE","INSERT_CHANNEL_SUCCESS","resetInsertChannel","INSERT_CHANNEL_RESET","editChannel","channelType","editchnl","main","EDIT_CHANNEL","EDIT_CHANNEL_FAILURE","EDIT_CHANNEL_SUCCESS","resetEditChannel","EDIT_CHANNEL_RESET","getFacebookPages","getPagelistSub","FACEBOOK_PAGES","FACEBOOK_PAGES_SUCCESS","FACEBOOK_PAGES_FAILURE","resetGetFacebookPages","FACEBOOK_PAGES_RESET","getMessengerPages","MESSENGER_PAGES","MESSENGER_PAGES_SUCCESS","MESSENGER_PAGES_FAILURE","resetGetMessengerPages","MESSENGER_PAGES_RESET","getInstagramPages","INSTAGRAM_PAGES","INSTAGRAM_PAGES_SUCCESS","INSTAGRAM_PAGES_FAILURE","resetGetInstagramPages","INSTAGRAM_PAGES_RESET","getInstagramDMPages","INSTAGRAMDM_PAGES","INSTAGRAMDM_PAGES_SUCCESS","INSTAGRAMDM_PAGES_FAILURE","resetGetInstagramDMPages","INSTAGRAMDM_PAGES_RESET","synchronizeTemplate","request","SYNCHRONIZE_TEMPLATE_FAILURE","SYNCHRONIZE_TEMPLATE","SYNCHRONIZE_TEMPLATE_SUCCESS","addTemplate","ADD_TEMPLATE_FAILURE","ADD_TEMPLATE","ADD_TEMPLATE_SUCCESS","deleteTemplate","DELETE_TEMPLATE_FAILURE","DELETE_TEMPLATE","DELETE_TEMPLATE_SUCCESS","getPhoneList","PHONE_LIST","PHONE_LIST_SUCCESS","PHONE_LIST_FAILURE"],"mappings":"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","file":"static/js/95.ab7e40a5.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { makeStyles, Breadcrumbs, Button, Box } from '@material-ui/core';\r\nimport Link from '@material-ui/core/Link';\r\nimport { showBackdrop, showSnackbar } from 'store/popus/actions';\r\nimport { langKeys } from \"lang/keys\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ColorInput, FieldEdit, } from \"components\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport paths from \"common/constants/paths\";\r\nimport { useSelector } from \"hooks\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { insertChannel } from \"store/channel/actions\";\r\nimport { AppleIcon } from \"icons\";\r\n\r\ninterface whatsAppData {\r\n    typeWhatsApp?: string;\r\n    row?: any;\r\n}\r\n\r\nconst useChannelAddStyles = makeStyles(theme => ({\r\n    button: {\r\n        padding: 12,\r\n        fontWeight: 500,\r\n        fontSize: '14px',\r\n        textTransform: 'initial',\r\n        width: \"180px\"\r\n    },\r\n}));\r\n\r\nexport const ChannelAddIos: FC = () => {\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const [setins, setsetins] = useState(false);\r\n    const [channelreg, setChannelreg] = useState(true);\r\n    const [showRegister, setShowRegister] = useState(true);\r\n    const [showClose, setShowClose] = useState(false);\r\n    const [showScript, setShowScript] = useState(false);\r\n    const [integrationId, setIntegrationId] = useState('');\r\n    const mainResult = useSelector(state => state.channel.channelList);\r\n    const executeResult = useSelector(state => state.channel.successinsert);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n    const [coloricon, setcoloricon] = useState(\"#000000\");\r\n    const classes = useChannelAddStyles();\r\n    const [fields, setFields] = useState({\r\n        \"method\": \"UFN_COMMUNICATIONCHANNEL_INS\",\r\n        \"parameters\": {\r\n            \"id\": 0,\r\n            \"description\": \"\",\r\n            \"type\": \"\",\r\n            \"communicationchannelsite\": \"\",\r\n            \"communicationchannelowner\": \"\",\r\n            \"chatflowenabled\": true,\r\n            \"integrationid\": \"\",\r\n            \"color\": \"\",\r\n            \"icons\": \"\",\r\n            \"other\": \"\",\r\n            \"form\": \"\",\r\n            \"apikey\": \"\",\r\n            \"coloricon\": \"#000000\",\r\n            \"voximplantcallsupervision\": false\r\n        },\r\n        \"type\": \"SMOOCHIOS\",\r\n    })\r\n\r\n    const location = useLocation<whatsAppData>();\r\n\r\n    const whatsAppData = location.state as whatsAppData | null;\r\n\r\n    async function finishreg() {\r\n        setsetins(true)\r\n        dispatch(insertChannel(fields))\r\n        setWaitSave(true);\r\n    }\r\n    async function goback() {\r\n        history.push(paths.CHANNELS);\r\n    }\r\n    useEffect(() => {\r\n        if (!mainResult.loading && setins) {\r\n            if (executeResult) {\r\n                setsetins(false)\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_register) }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n                setShowRegister(false);\r\n                setShowClose(true);\r\n                setShowScript(true);\r\n                setIntegrationId(mainResult.data[0].integrationId);\r\n            } else if (!executeResult) {\r\n                const errormessage = t(mainResult.code || \"error_unexpected_error\", { module: t(langKeys.property).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            }\r\n        }\r\n    }, [mainResult])\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            dispatch(showBackdrop(false));\r\n            setWaitSave(false);\r\n        }\r\n    }, [mainResult])\r\n\r\n    function setnameField(value: any) {\r\n        setChannelreg(value === \"\");\r\n        let partialf = fields;\r\n        partialf.parameters.description = value;\r\n        setFields(partialf);\r\n    }\r\n    return (\r\n        <div style={{ width: '100%' }}>\r\n            <Breadcrumbs aria-label=\"breadcrumb\">\r\n                <Link color=\"textSecondary\" key={\"mainview\"} href=\"/\" onClick={(e) => { e.preventDefault(); history.push(paths.CHANNELS_ADD, whatsAppData) }}>\r\n                    {t(langKeys.previoustext)}\r\n                </Link>\r\n            </Breadcrumbs>\r\n            <div>\r\n                <div style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"2em\", color: \"#7721ad\", padding: \"20px\", marginLeft: \"auto\", marginRight: \"auto\", maxWidth: \"800px\" }}>{t(langKeys.commchannelfinishreg)}</div>\r\n                <div className=\"row-zyx\">\r\n                    <div className=\"col-3\"></div>\r\n                    <FieldEdit\r\n                        onChange={(value) => setnameField(value)}\r\n                        label={t(langKeys.givechannelname)}\r\n                        className=\"col-6\"\r\n                    />\r\n                </div>\r\n                <div className=\"row-zyx\">\r\n                    <div className=\"col-3\"></div>\r\n                    <div className=\"col-6\">\r\n                        <Box fontWeight={500} lineHeight=\"18px\" fontSize={14} mb={1} color=\"textPrimary\">\r\n                            {t(langKeys.givechannelcolor)}\r\n                        </Box>\r\n                        <div style={{ display: \"flex\", justifyContent: \"space-around\", alignItems: \"center\" }}>\r\n                            <AppleIcon style={{ fill: `${coloricon}`, width: \"100px\" }} />\r\n                            <ColorInput\r\n                                hex={fields.parameters.coloricon}\r\n                                onChange={e => {\r\n                                    setFields(prev => ({\r\n                                        ...prev,\r\n                                        parameters: { ...prev.parameters, coloricon: e.hex, color: e.hex },\r\n                                    }));\r\n                                    setcoloricon(e.hex)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{ paddingLeft: \"80%\" }}>\r\n                    {showRegister ?\r\n                        <Button\r\n                            onClick={() => { finishreg() }}\r\n                            className={classes.button}\r\n                            disabled={channelreg || mainResult.loading}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >{t(langKeys.finishreg)}\r\n                        </Button>\r\n                        : null\r\n                    }\r\n                    {showClose ?\r\n                        <Button\r\n                            onClick={() => { goback() }}\r\n                            className={classes.button}\r\n                            disabled={channelreg}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >{t(langKeys.close)}\r\n                        </Button>\r\n                        : null\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div style={{ display: showScript ? 'flex' : 'none', height: 10 }} />\r\n            <div style={{ display: showScript ? 'flex' : 'none', flexDirection: 'column', marginLeft: 120, marginRight: 120 }}>\r\n                {t(langKeys.iosstep1)}\r\n            </div>\r\n            <div style={{ display: showScript ? 'flex' : 'none', flexDirection: 'column', marginLeft: 120, marginRight: 120 }}><pre style={{ background: '#f4f4f4', border: '1px solid #ddd', color: '#666', pageBreakInside: 'avoid', fontFamily: 'monospace', lineHeight: 1.6, maxWidth: '100%', overflow: 'auto', padding: '1em 1.5em', display: 'block', wordWrap: 'break-word', width: '100%', whiteSpace: 'break-spaces' }}><code>\r\n                {`[Smooch initWithSettings:[SKTSettings settingsWithIntegrationId:@\"${integrationId}\"] completionHandler:^(NSError * _Nullable error, NSDictionary * _Nullable userInfo) {\\n\\tif (error == nil) {\\n\\t\\t// Initialization complete\\n\\t} else {\\n\\t\\t// Something went wrong\\n\\t}\\n}];`}\r\n            </code></pre><div style={{ height: 10 }} />\r\n            </div>\r\n            <div style={{ display: showScript ? 'flex' : 'none', flexDirection: 'column', marginLeft: 120, marginRight: 120 }}>\r\n                {t(langKeys.iosstep2)}\r\n            </div>\r\n            <div style={{ display: showScript ? 'flex' : 'none', flexDirection: 'column', marginLeft: 120, marginRight: 120 }}><pre style={{ background: '#f4f4f4', border: '1px solid #ddd', color: '#666', pageBreakInside: 'avoid', fontFamily: 'monospace', lineHeight: 1.6, maxWidth: '100%', overflow: 'auto', padding: '1em 1.5em', display: 'block', wordWrap: 'break-word', width: '100%', whiteSpace: 'break-spaces' }}><code>\r\n                {`Smooch.initWith(SKTSettings(integrationId: \"${integrationId}\")) { (error: Error?, userInfo: [AnyHashable : Any]?) in\\n\\tif (error == nil) {\\n\\t\\t// Initialization complete\\n\\t} else {\\n\\t\\t// Something went wrong\\n\\t}\\n}`}\r\n            </code></pre><div style={{ height: 10 }} />\r\n            </div>\r\n            <div style={{ display: showScript ? 'flex' : 'none', flexDirection: 'column', marginLeft: 120, marginRight: 120 }}>\r\n                {t(langKeys.iosstep3)}\r\n            </div>\r\n            <div style={{ display: showScript ? 'flex' : 'none', height: 20 }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelAddIos","import { IActionCall, IChannel, IChatWebAdd, IRequestBody } from \"@types\";\r\nimport { ChannelsService, CommonService } from \"network\";\r\nimport actionTypes from \"./actionTypes\";\r\n\r\nexport const getChannelsList = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelist(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_SUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const getChannelsListSub = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_SUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const insertChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.insertchnl(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_INSERTSUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const activateChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.activateChannel(requestBody),\r\n    types: {\r\n        loading: actionTypes.ACTIVATECHANNEL,\r\n        success: actionTypes.ACTIVATECHANNEL_SUCCESS,\r\n        failure: actionTypes.ACTIVATECHANNEL_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const deleteChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.deletechnl(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_INSERTSUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const checkPaymentPlan = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.checkPaymentPlan(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHECK_PAYMENTPLAN,\r\n        success: actionTypes.CHECK_PAYMENTPLAN_SUCCESS,\r\n        failure: actionTypes.CHECK_PAYMENTPLAN_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetChannelsList = (): IActionCall => ({ type: actionTypes.CHANNELS_RESET });\r\n\r\nexport const resetGetChannelsSubList = (): IActionCall => ({ type: actionTypes.CHANNELS_RESET });\r\n\r\nexport const resetChannelInsert = (): IActionCall => ({ type: actionTypes.CHANNELS_INSERTSUCCESS_RESET });\r\n\r\nexport const insertChannel2 = (payload: IRequestBody<IChatWebAdd>): IActionCall => ({\r\n    callAPI: async () => {\r\n        const chatIconFile = payload.service!.interface.iconbutton as File | null;\r\n        const headerIconFile = payload.service!.interface.iconheader as File | null;\r\n        const botIconFile = payload.service!.interface.iconbot as File | null;\r\n        const bubbleIconFile = payload.service!.bubble.iconbubble as File | null;\r\n\r\n        let chatIcon = \"\";\r\n        let headerIcon = \"\";\r\n        let botIcon = \"\";\r\n        let bubbleIcon = \"\";\r\n\r\n        if (chatIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', chatIconFile, chatIconFile.name);\r\n            chatIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (headerIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', headerIconFile, headerIconFile.name);\r\n            headerIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (botIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', botIconFile, botIconFile.name);\r\n            botIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (bubbleIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', bubbleIconFile, bubbleIconFile.name);\r\n            bubbleIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        payload.service!.interface.iconbutton = chatIcon;\r\n        payload.service!.interface.iconheader = headerIcon;\r\n        payload.service!.interface.iconbot = botIcon;\r\n        payload.service!.bubble.iconbubble = bubbleIcon;\r\n\r\n        return ChannelsService.insertchnl(payload);\r\n    },\r\n    types: {\r\n        loading: actionTypes.INSERT_CHANNEL,\r\n        failure: actionTypes.INSERT_CHANNEL_FAILURE,\r\n        success: actionTypes.INSERT_CHANNEL_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetInsertChannel = () => ({ type: actionTypes.INSERT_CHANNEL_RESET });\r\n\r\nexport const editChannel = (payload: IRequestBody<IChannel | IChatWebAdd>, channelType?: string): IActionCall => ({\r\n    callAPI: async () => {\r\n        if (channelType === \"CHAZ\" || channelType === \"SMOOCHANDROID\") {\r\n            const service = payload.service as IChatWebAdd;\r\n            let chatIcon = service.interface.iconbutton as File | string | null;\r\n            let headerIcon = service.interface.iconheader as File | string | null;\r\n            let botIcon = service.interface.iconbot as File | string | null;\r\n            let bubbleIcon = service.bubble.iconbubble as File | string | null;\r\n\r\n            if (chatIcon && typeof chatIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', chatIcon, chatIcon.name);\r\n                chatIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (headerIcon && typeof headerIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', headerIcon, headerIcon.name);\r\n                headerIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (botIcon && typeof botIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', botIcon, botIcon.name);\r\n                botIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (bubbleIcon && typeof bubbleIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', bubbleIcon, bubbleIcon.name);\r\n                bubbleIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            (payload.service as IChatWebAdd).interface.iconbutton = chatIcon;\r\n            (payload.service as IChatWebAdd).interface.iconheader = headerIcon;\r\n            (payload.service as IChatWebAdd).interface.iconbot = botIcon;\r\n            (payload.service as IChatWebAdd).bubble.iconbubble = bubbleIcon;\r\n\r\n            return ChannelsService.editchnl(payload);\r\n        }\r\n        return CommonService.main(payload);\r\n    },\r\n    types: {\r\n        loading: actionTypes.EDIT_CHANNEL,\r\n        failure: actionTypes.EDIT_CHANNEL_FAILURE,\r\n        success: actionTypes.EDIT_CHANNEL_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetEditChannel = () => ({ type: actionTypes.EDIT_CHANNEL_RESET });\r\n\r\nexport const getFacebookPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.FACEBOOK_PAGES,\r\n        success: actionTypes.FACEBOOK_PAGES_SUCCESS,\r\n        failure: actionTypes.FACEBOOK_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetFacebookPages = () => ({ type: actionTypes.FACEBOOK_PAGES_RESET });\r\n\r\nexport const getMessengerPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.MESSENGER_PAGES,\r\n        success: actionTypes.MESSENGER_PAGES_SUCCESS,\r\n        failure: actionTypes.MESSENGER_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetMessengerPages = () => ({ type: actionTypes.MESSENGER_PAGES_RESET });\r\n\r\nexport const getInstagramPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.INSTAGRAM_PAGES,\r\n        success: actionTypes.INSTAGRAM_PAGES_SUCCESS,\r\n        failure: actionTypes.INSTAGRAM_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetInstagramPages = () => ({ type: actionTypes.INSTAGRAM_PAGES_RESET });\r\n\r\nexport const getInstagramDMPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.INSTAGRAMDM_PAGES,\r\n        success: actionTypes.INSTAGRAMDM_PAGES_SUCCESS,\r\n        failure: actionTypes.INSTAGRAMDM_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetInstagramDMPages = () => ({ type: actionTypes.INSTAGRAMDM_PAGES_RESET });\r\n\r\nexport const synchronizeTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.synchronizeTemplate(request),\r\n    types: {\r\n        failure: actionTypes.SYNCHRONIZE_TEMPLATE_FAILURE,\r\n        loading: actionTypes.SYNCHRONIZE_TEMPLATE,\r\n        success: actionTypes.SYNCHRONIZE_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetSynchronizeTemplate = (): IActionCall => ({ type: actionTypes.SYNCHRONIZE_TEMPLATE_RESET });\r\n\r\nexport const addTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.addTemplate(request),\r\n    types: {\r\n        failure: actionTypes.ADD_TEMPLATE_FAILURE,\r\n        loading: actionTypes.ADD_TEMPLATE,\r\n        success: actionTypes.ADD_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetAddTemplate = (): IActionCall => ({ type: actionTypes.ADD_TEMPLATE_RESET });\r\n\r\nexport const deleteTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.deleteTemplate(request),\r\n    types: {\r\n        failure: actionTypes.DELETE_TEMPLATE_FAILURE,\r\n        loading: actionTypes.DELETE_TEMPLATE,\r\n        success: actionTypes.DELETE_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetDeleteTemplate = (): IActionCall => ({ type: actionTypes.DELETE_TEMPLATE_RESET });\r\n\r\nexport const getPhoneList = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPhoneList(request),\r\n    types: {\r\n        loading: actionTypes.PHONE_LIST,\r\n        success: actionTypes.PHONE_LIST_SUCCESS,\r\n        failure: actionTypes.PHONE_LIST_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetPhoneList = (): IActionCall => ({ type: actionTypes.PHONE_LIST_RESET });"],"sourceRoot":""}