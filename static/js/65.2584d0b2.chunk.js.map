{"version":3,"sources":["pages/IntegrationManager.tsx","store/integrationmanager/actions.ts","../node_modules/@material-ui/icons/Clear.js","../node_modules/@material-ui/icons/Save.js","../node_modules/@material-ui/icons/Add.js"],"names":["useStyles","makeStyles","theme","containerDetail","marginTop","spacing","padding","background","button","fontWeight","fontSize","textTransform","selectInput1","flexGrow","flexBasis","marginRight","selectInput2","labelButton1","width","labelButton2","minWidth","minHeight","maxHeight","checkboxRow","fieldRow","fieldButton","dataIntegrationType","STANDARD","CUSTOM","dataMethodType","GET","POST","dataAuthorizationType","NONE","BASIC","BEARER","dataBodyType","JSON","URLENCODED","dataLevel","CORPORATION","ORGANIZATION","dataLevelKeys","DetailIntegrationManager","data","row","edit","setViewSelected","fetchData","multiData","arrayBread","classes","useState","waitSave","setWaitSave","executeRes","useSelector","state","main","execute","user","login","validateToken","dispatch","useDispatch","t","useTranslation","waitImport","setWaitImport","waitDelete","setWaitDelete","mainAuxRes","mainAux","waitView","setWaitView","openViewTableModal","setOpenViewTableModal","tableData","setTableData","columnData","setColumnData","dataKeys","Set","fields","filter","r","key","map","name","useForm","defaultValues","isnew","apikey","uuidv4","id","description","type","status","method","url","authorization","headers","bodytype","body","parameters","variables","level","operation","control","register","handleSubmit","setValue","getValues","trigger","errors","formState","useFieldArray","headersAppend","append","headersRemove","remove","headersUpdate","update","parametersAppend","parametersRemove","parametersUpdate","fieldsAppend","fieldsRemove","fieldsUpdate","React","useEffect","validate","value","length","langKeys","field_required","basiclatin","validateBasicLatinFieldName","field_basiclatinlowercase","loading","error","errormessage","code","module","integrationmanager","toLocaleLowerCase","showSnackbar","show","severity","message","showBackdrop","successful_edit","successful_register","onSubmit","v","extractVariablesFromArray","extractVariables","d","includes","field_key_required","rex1","RegExp","rex2","corpdesc","replace","toLowerCase","orgdesc","apiUrls","INTEGRATION_URL","manageConfirmation","visible","question","confirmation_save","callback","insIntegrationManager","onChangeType","onChangeMethod","onChangeAuthorization","onClickAddHeader","a","onClickDeleteHeader","index","onBlurHeader","param","onChangeBodyType","onClickAddParameter","onClickDeleteParameter","onBlurParameter","onClickBeautify","isJson","parse","stringify","validateJSON","onChangeLevel","f","onClickAddField","onClickDeleteField","onBlurField","disableKeys","field","i","has","test","testRequestRes","request","onClickTest","callAPI","CommonService","request_send","types","actionTypes","REQUEST_SEND","success","REQUEST_SUCCESS","failure","REQUEST_FAILURE","openDialogDomain","setOpenDialogDomain","handleUpload","files","file","item","uploadExcel","undefined","insarrayIntegrationManager","invalid_data","successful_transaction","successful_delete","integration_plural","Object","keys","c","Header","accessor","style","display","justifyContent","breadcrumbs","integrationmanagerdetail","handleClick","title","newintegrationmanager","gap","alignItems","Button","variant","color","backgroundColor","onClick","Fragment","startIcon","getCollectionAux","getdataIntegrationManager","view_table","confirmation_delete_data","deldataIntegrationManager","deletedata","accept","onChange","e","target","htmlFor","className","component","import","downloadJson","reduce","corpid","orgid","info","back","save","label","valueDefault","uset","dictToArrayKV","optionDesc","optionValue","fregister","requesttype","username","password","token","header","addheader","onBlur","IconButton","size","beautify","addparameter","invalid","invalidjson","rows","disabled","tablelayout","addfield","duplicate","x","m","validateDuplicateFieldName","field_duplicate","startwithchar","validateStartwithcharFieldName","field_startwithchar","order","openModal","setOpenModal","cleanModalData","REQUEST_RESET","columns","ModalIntegrationManager","open","result","buttonText2","handleClickButton2","button2Type","ModalViewTable","resetMainAux","maxWidth","button1Type","buttonText1","close","handleClickButton1","download","pageSizeDefault","filterGeneral","IntegrationManager","history","useHistory","mainResult","executeResult","viewSelected","rowSelected","setRowSelected","mainData","setMainData","configuration_plural","integrationmanager_plural","redirectFunc","view","push","paths","CONFIGURATION","useMemo","NoFilter","isComponent","Cell","props","cell","original","viewFunction","handleView","deleteFunction","handleDelete","editFunction","handleEdit","prefixTranslation","toUpperCase","getCollection","getIntegrationManagerSel","getMultiCollection","getValuesFromDomain","resetAllMain","confirmation_delete","type_translated","titlemodule","count","ButtonsElement","onClickRow","handleRegister","_interopRequireDefault","require","_interopRequireWildcard","defineProperty","exports","default","_default","createElement"],"mappings":"qeA2CMA,EAAYC,aAAW,SAACC,GAAK,MAAM,CACrCC,gBAAiB,CACbC,UAAWF,EAAMG,QAAQ,GACzBC,QAASJ,EAAMG,QAAQ,GACvBE,WAAY,QAEhBC,OAAQ,CACJF,QAAS,GACTG,WAAY,IACZC,SAAU,OACVC,cAAe,WAEnBC,aAAc,CACVC,SAAU,EACVC,UAAW,QACXC,YAAa,QAEjBC,aAAc,CACVH,SAAU,EACVC,UAAW,SAEfG,aAAc,CACVC,MAAO,OACPH,YAAa,WAEjBI,aAAc,CACVC,SAAU,cACVC,UAAW,OACXC,UAAW,OACXR,UAAW,EACXD,SAAU,GAEdU,YAAa,CACTV,SAAU,EACVC,UAAW,EACXC,YAAa,UAEjBS,SAAU,CACNX,SAAU,EACVC,UAAW,EACXC,YAAa,UAEjBU,YAAa,CACTZ,SAAU,EACVC,UAAW,OAIbY,EAAkC,CACpCC,SAAU,WACVC,OAAQ,UAGNC,EAA6B,CAC/BC,IAAK,MACLC,KAAM,QAGJC,EAAoC,CACtCC,KAAM,OACNC,MAAO,QACPC,OAAQ,UAGNC,EAA2B,CAC7BC,KAAM,OACNC,WAAY,eAGVC,EAAwB,CAC1BC,YAAa,cACbC,aAAc,gBAGZC,EAAgB,CAAC,SAAS,SAwN1BC,EAAkD,SAAH,GAAoF,IAAD,kDAA7EC,KAAQC,GAAG,GAAHA,IAAKC,GAAI,GAAJA,KAAQC,GAAe,EAAfA,gBAA4BC,IAAF,EAATC,UAAoB,EAATD,WAAWE,GAAU,EAAVA,WAC7GC,GAAUnD,IAChB,GAAgCoD,oBAAS,GAAM,qBAAxCC,GAAQ,MAAEC,GAAW,MACtBC,GAAaC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,WAC7CC,GAAOJ,aAAY,SAAAC,GAAK,OAAIA,EAAMI,MAAMC,cAAcF,QAEtDG,GAAWC,cACTC,GAAMC,cAAND,EAER,GAAoCb,oBAAS,GAAM,qBAA5Ce,GAAU,MAAEC,GAAa,MAChC,GAAoChB,oBAAS,GAAM,qBAA5CiB,GAAU,MAAEC,GAAa,MAE1BC,GAAaf,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKc,WACnD,GAAgCpB,oBAAS,GAAM,qBAAxCqB,GAAQ,MAAEC,GAAW,MAC5B,GAAoDtB,oBAAS,GAAM,qBAA5DuB,GAAkB,MAAEC,GAAqB,MAChD,GAAkCxB,mBAAgB,IAAG,qBAA9CyB,GAAS,MAAEC,GAAY,MAC9B,GAAoC1B,mBAAgB,IAAG,qBAAhD2B,GAAU,MAAEC,GAAa,MAI1BC,GAAW,IAAIC,IAAI,GAAD,OAAKxC,EAAc,aAAQ,OAAHG,SAAG,IAAHA,IAAW,QAAR,EAAHA,GAAKsC,cAAM,OAAiC,QAAjC,EAAX,EAAaC,QAAO,SAACC,GAAY,OAAKA,EAAEC,cAAI,WAAzC,EAAH,EAA8CC,KAAI,SAACF,GAAY,OAAKA,EAAEG,UAAS,MAE/H,GAAiGC,YAAoB,CACjHC,cAAe,CACXC,OAAO9C,GACP+C,OAAQ/C,IAA8B,MAAtBA,GAAI+C,QAAU,IAAa/C,GAAI+C,OAASC,eACxDC,GAAIjD,GAAMA,GAAIiD,GAAK,EACnBC,YAAalD,IAAOA,GAAIkD,aAAqB,GAC7CC,KAAMnD,IAAOA,GAAImD,MAAsB,WACvCC,OAAQpD,IAAOA,GAAIoD,QAAsB,SACzCT,KAAM3C,IAAOA,GAAI2C,MAAc,GAC/BU,OAAQrD,IAAOA,GAAIqD,QAAmB,MACtCC,IAAKtD,IAAOA,GAAIsD,KAAa,GAC7BC,cAAevD,IAAOA,GAAIuD,eAAqC,CAAEJ,KAAM,QACvEK,QAASxD,IAAOA,GAAIwD,SAAiB,GACrCC,SAAUzD,IAAOA,GAAIyD,UAAsB,OAC3CC,KAAM1D,IAAOA,GAAI0D,MAAc,GAC/BC,WAAY3D,IAAOA,GAAI2D,YAAoB,GAC3CC,UAAW5D,IAAOA,GAAI4D,WAAmB,GACzCC,MAAO7D,IAAOA,GAAI6D,OAA0B,cAC5CvB,OAAQtC,IACLA,GAAIsC,QACL,CAAC,CAACK,KAAM,SAAUF,KAAK,IACzBqB,UAAW9D,GAAM,OAAS,YArB1B+D,GAAO,GAAPA,QAASC,GAAQ,GAARA,SAAUC,GAAY,GAAZA,aAAcC,GAAQ,GAARA,SAAUC,GAAS,GAATA,UAAWC,GAAO,GAAPA,QAAsBC,GAAM,GAAnBC,UAAaD,OAyBpF,GAAiGE,YAAc,CAC3GR,WACApB,KAAM,YAFMa,GAAO,GAAflB,OAAyBkC,GAAa,GAArBC,OAA+BC,GAAa,GAArBC,OAA+BC,GAAa,GAArBC,OAKvE,GAA6GN,YAAc,CACvHR,WACApB,KAAM,eAFMgB,GAAU,GAAlBrB,OAA4BwC,GAAgB,GAAxBL,OAAkCM,GAAgB,GAAxBJ,OAAkCK,GAAgB,GAAxBH,OAKhF,GAAqFN,YAAc,CAC/FR,WACApB,KAAM,WAFFL,GAAM,GAANA,OAAgB2C,GAAY,GAApBR,OAA8BS,GAAY,GAApBP,OAA8BQ,GAAY,GAApBN,OAK5DO,IAAMC,WAAU,WACZrB,GAAS,OAAQ,CACbsB,SAAU,CACNC,MAAM,SAAD,oGAAC,EAAC,SAACA,GAAU,OAAMA,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,mBAC7DC,WAAY,SAACJ,GAAU,MAA2B,WAAtBpB,GAAU,SAAwByB,GAA4BL,IAAUnE,GAAEqE,IAASI,+BAGvH7B,GAAS,OAAQ,CAAEsB,SAAU,SAACC,GAAU,OAAMA,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,mBACnF1B,GAAS,SAAU,CAAEsB,SAAU,SAACC,GAAU,OAAMA,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,qBACtF,CAACzF,GAAM+D,KAEVqB,qBAAU,WACN,GAAI7E,GACA,GAAKE,GAAWoF,SAAYpF,GAAWqF,OAKhC,GAAIrF,GAAWqF,MAAO,CACzB,IAAMC,EAAe5E,GAAEV,GAAWuF,MAAQ,yBAA0B,CAAEC,OAAQ9E,GAAEqE,IAASU,oBAAoBC,sBAC7GlF,GAASmF,YAAa,CAAEC,MAAM,EAAMC,SAAU,QAASC,QAASR,KAChE9E,GAASuF,aAAa,IACtBhG,IAAY,SARZS,GAASmF,YAAa,CAAEC,MAAM,EAAMC,SAAU,UAAWC,QAASpF,GAAEpB,GAAMyF,IAASiB,gBAAkBjB,IAASkB,wBAC9GxG,KACAe,GAASuF,aAAa,IACtBvG,GAAgB,YAQzB,CAACQ,GAAYF,KAEhB,IAAMoG,GAAW3C,IAAa,SAAClE,GAE3B,GADAA,EAAK6D,UAAY7D,EAAK6D,WAAa,GACjB,aAAd7D,EAAKoD,KAAqB,CAC1B,IAAI0D,EAAc,GAClBA,EAAIC,aAA0B/G,EAAKyD,QAAS,QAASqD,GAC/B,SAAlB9G,EAAK0D,SACLoD,EAAIE,aAAiBhH,EAAK2D,KAAMmD,GAET,eAAlB9G,EAAK0D,WACVoD,EAAIC,aAA0B/G,EAAK4D,WAAY,QAASkD,IAE5D9G,EAAK6D,UAAYiD,OAEhB,GAAI9G,EAAK+C,OAAuB,WAAd/C,EAAKoD,KAAmB,CAC3C,GAA0F,IAAtFpD,EAAKuC,OAAOC,QAAO,SAAAyE,GAAC,OAAKnH,EAAcoH,SAASD,EAAErE,QAAmB,IAAVqE,EAAEvE,OAAc+C,OAE3E,OADAtE,GAASmF,YAAa,CAAEC,MAAM,EAAMC,SAAU,QAASC,QAASpF,GAAEqE,IAASyB,uBACpE,KAEX,IAAIC,EAAO,IAAIC,OAAO,mBAAmB,KACrCC,EAAO,IAAID,OAAO,QAAQ,KAC1BE,IAAgB,OAAJvG,SAAI,IAAJA,QAAI,EAAJA,GAAMuG,WAAY,IAAIC,QAAQJ,EAAM,KAAKI,QAAQF,EAAM,KAAKG,cACxEC,IAAe,OAAJ1G,SAAI,IAAJA,QAAI,EAAJA,GAAM0G,UAAW,IAAIF,QAAQJ,EAAM,KAAKI,QAAQF,EAAM,KAAKG,cACtE7E,EAAO5C,EAAK4C,KAAK4E,QAAQJ,EAAM,IAAII,QAAQF,EAAM,KAAKG,cAC1DzH,EAAKuD,IAAG,UAAMoE,IAAQC,gBAAe,wBAAgBL,EAAQ,YAAIG,EAAO,YAAI9E,GAShFzB,GAAS0G,YAAmB,CACxBC,SAAS,EACTC,SAAU1G,GAAEqE,IAASsC,mBACrBC,SATa,WACb9G,GAASJ,YAAQmH,aAAsBlI,KACvCmB,GAASuF,aAAa,IACtBhG,IAAY,UAUdyH,GAAY,uCAAG,WAAOnI,GAAgB,iEACN,OAAlCmE,GAAS,QAAY,OAAJnE,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,MAAO,IAAI,SAC5B2B,GAAQ,QAAQ,KAAD,sCACxB,gBAHiB,sCAKZ+D,GAAc,uCAAG,WAAOpI,GAAgB,iEACN,OAApCmE,GAAS,UAAc,OAAJnE,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,MAAO,IAAI,SAC9B2B,GAAQ,UAAU,KAAD,sCAC1B,gBAHmB,sCAKdgE,GAAqB,uCAAG,WAAOrI,GAAgB,iEACD,OAAhDmE,GAAS,sBAA0B,OAAJnE,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,MAAO,IAAI,SAC1C2B,GAAQ,sBAAsB,KAAD,sCACtC,gBAH0B,sCAKrBiE,GAAgB,uCAAG,sBAAAC,EAAA,sDACrB9D,GAAc,CAAE/B,IAAK,GAAI8C,MAAO,KAAM,2CACzC,kBAFqB,mCAIhBgD,GAAmB,uCAAG,WAAOC,GAAa,iEAC5C9D,GAAc8D,GAAO,2CACxB,gBAFwB,sCAInBC,GAAe,SAACD,EAAYE,EAAenD,GAC7CX,GAAc4D,EAAM,2BAAMhF,GAAQgF,IAAM,kBAAGE,EAAQnD,MAGjDoD,GAAgB,uCAAG,WAAO5I,GAAgB,iEACN,OAAtCmE,GAAS,YAAgB,OAAJnE,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,MAAO,IAAI,SAChC2B,GAAQ,YAAY,KAAD,sCAC5B,gBAHqB,sCAKhBwE,GAAmB,uCAAG,sBAAAN,EAAA,sDACxBxD,GAAiB,CAAErC,IAAK,GAAI8C,MAAO,KAAM,2CAC5C,kBAFwB,mCAInBsD,GAAsB,uCAAG,WAAOL,GAAa,iEAC/CzD,GAAiByD,GAAO,2CAC3B,gBAF2B,sCAItBM,GAAkB,SAACN,EAAYE,EAAenD,GAChDP,GAAiBwD,EAAM,2BAAM7E,GAAW6E,IAAM,kBAAGE,EAAQnD,MAOvDwD,GAAe,uCAAG,4BAAAT,EAAA,sDACS,GAAzBvI,EAAOoE,GAAU,SACjB6E,aAAOjJ,GAAM,CAAD,gBAGS,OAFrBA,EAAOP,KAAKyJ,MAAMlJ,GAClBA,EAAOP,KAAK0J,UAAUnJ,EAAM,KAAM,GAClCmE,GAAS,OAAQ,IAAI,SACfE,GAAQ,QAAQ,KAAD,EACE,OAAvBF,GAAS,OAAQnE,GAAM,UACjBqE,GAAQ,QAAQ,KAAD,uCAE5B,kBAVoB,mCAoBf+E,GAAe,SAACpJ,GAClB,QAAKiJ,aAAOjJ,IAQVqJ,GAAa,uCAAG,WAAOrJ,GAAgB,iEACN,OAAnCmE,GAAS,SAAa,OAAJnE,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,MAAO,IAAI,SAC7B2B,GAAQ,SAAS,KAAD,EACJ,iBAAV,OAAJrE,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,MACNyB,GAAS,SAAS,CACd,CAAEvB,KAAM,SAAUF,KAAK,IAAM,mBAC1B0B,GAAU,UAAU5B,QAAO,SAAA8G,GAAC,OAAKxJ,EAAcoH,SAASoC,EAAE1G,YAGnD,kBAAV,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,MACNyB,GAAS,SAAS,CACd,CAAEvB,KAAM,SAAUF,KAAK,GACvB,CAAEE,KAAM,QAASF,KAAK,IAAM,mBACzB0B,GAAU,UAAU5B,QAAO,SAAA8G,GAAC,OAAKxJ,EAAcoH,SAASoC,EAAE1G,YAEpE,2CACJ,gBAhBkB,sCAkBb2G,GAAe,uCAAG,sBAAAhB,EAAA,sDACpBrD,GAAa,CAAEtC,KAAM,GAAIF,KAAK,IAAS,2CAC1C,kBAFoB,mCAIf8G,GAAkB,uCAAG,WAAOf,GAAa,iEAC3CtD,GAAasD,GAAO,2CACvB,gBAFuB,sCAIlBgB,GAAc,SAAChB,EAAYE,EAAenD,GAC5CJ,GAAaqD,EAAM,2BAAMlG,GAAOkG,IAAM,kBAAGE,EAAQnD,MAG/CkE,GAAc,SAACC,EAAkBC,GACnC,QAAI9J,EAAcoH,SAAc,OAALyC,QAAK,IAALA,OAAK,EAALA,EAAO/G,UAGzBP,GAASwH,IAAS,OAALF,QAAK,IAALA,OAAK,EAALA,EAAO/G,OAAUwB,GAAU,WAgB/CyB,GAA8B,SAACL,GAEjC,OADU,IAAI6B,OAAO,aAAa,KACvByC,KAAKtE,IAGduE,GAAiBnJ,aAAY,SAAAC,GAAK,OAAIA,EAAMuF,mBAAmB4D,WAC/DC,GAAc,WC9kBI,IAACD,ED+kBrB7I,IC/kBqB6I,ED+kBC5F,KC/kB8B,CACxD8F,QAAS,kBAAMC,IAAcC,aAAaJ,IAC1CK,MAAO,CACHtE,QAASuE,IAAYC,aACrBC,QAASF,IAAYG,gBACrBC,QAASJ,IAAYK,iBAEzBvH,KAAM,SD2kBN,GAAgD5C,oBAAS,GAAM,qBAAxDoK,GAAgB,MAAEC,GAAmB,MAE5CvF,qBAAU,WACuB,QAAX,OAAdyE,SAAc,IAAdA,QAAc,EAAdA,GAAgB/J,OAChB6K,IAAoB,KAEzB,CAACd,KAEJ,IAqCMe,GAAY,uCAAG,WAAOC,GAAU,yEACN,KAAtBC,EAAY,OAALD,QAAK,IAALA,OAAK,EAALA,EAAOE,KAAK,IAChB,CAAD,+BACoBC,aAAYF,OAAMG,GAAU,QAA9CnL,EAAS,QACNyF,OAAS,IACdtE,GAASuF,aAAa,IACtBvF,GAASJ,YAAQqK,aAA2BhH,GAAU,MAAOpE,KAC7DwB,IAAc,IACjB,2CAER,gBAViB,sCAYlB8D,qBAAU,WACN,GAAI/D,GACA,GAAKZ,GAAWoF,SAAYpF,GAAWqF,OAIhC,GAAIrF,GAAWqF,MAAO,CACzB,IAAMC,EAAe5E,GAAEqE,IAAS2F,cAChClK,GAASmF,YAAa,CAAEC,MAAM,EAAMC,SAAU,QAASC,QAASR,KAChE9E,GAASuF,aAAa,IACtBlF,IAAc,SAPdL,GAASmF,YAAa,CAAEC,MAAM,EAAMC,SAAU,UAAWC,QAASpF,GAAEqE,IAAS4F,2BAC7EnK,GAASuF,aAAa,IACtBlF,IAAc,KAQvB,CAACb,GAAYY,KAgBhB+D,qBAAU,WACN,GAAI7D,GACA,GAAKd,GAAWoF,SAAYpF,GAAWqF,OAIhC,GAAIrF,GAAWqF,MAAO,CACzB,IAAMC,EAAe5E,GAAEV,GAAWuF,MAAQ,yBAA0B,CAAEC,OAAQ9E,GAAEqE,IAASU,oBAAoBC,sBAC7GlF,GAASmF,YAAa,CAAEC,MAAM,EAAMC,SAAU,QAASC,QAASR,KAChE9E,GAASuF,aAAa,IACtBhF,IAAc,SAPdP,GAASmF,YAAa,CAAEC,MAAM,EAAMC,SAAU,UAAWC,QAASpF,GAAEqE,IAAS6F,sBAC7EpK,GAASuF,aAAa,IACtBhF,IAAc,KAQvB,CAACf,GAAYc,KA8BhB,OAtBA6D,qBAAU,WACN,GAAIzD,GACA,GAAKF,GAAWoE,SAAYpE,GAAWqE,OAWhC,GAAIrE,GAAWqE,MAAO,CACzB,IAAMC,EAAe5E,GAAEM,GAAWuE,MAAQ,yBAA0B,CAAEC,OAAQ9E,GAAEqE,IAAS8F,oBAAoBnF,sBAC7GlF,GAASmF,YAAa,CAAEC,MAAM,EAAMC,SAAU,QAASC,QAASR,KAChE9E,GAASuF,aAAa,IACtB5E,IAAY,QAf8B,CAAC,IAAD,MAG4B,EAAtE,GAFAX,GAASuF,aAAa,IACtB5E,IAAY,IACU,QAAlB,EAAAH,GAAW3B,KAAK,UAAE,aAAlB,EAAoBA,QAA0B,QAAlB,EAAA2B,GAAW3B,KAAK,UAAE,OAAM,QAAN,EAAlB,EAAoBA,YAAI,WAAN,EAAlB,EAA0ByF,QAAS,EAC/DvD,GAA+B,QAAnB,EAACP,GAAW3B,KAAK,UAAE,aAAlB,EAAoBA,MACjCoC,GAAcqJ,OAAOC,KAAK/J,GAAW3B,KAAK,GAAGA,KAAK,IAAI2C,KAAI,SAAAgJ,GAAC,MAAK,CAC5DC,OAAQD,EACRE,SAAUF,OAGlB3J,IAAsB,MAQ/B,CAACL,GAAYE,KAGZ,sBAAKiK,MAAO,CAAExN,MAAO,QAAS,UAC1B,uBAAMuI,SAAUA,GAAS,UACrB,sBAAKiF,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAAkB,UAC7D,gCACI,cAAC,IAAmB,CAChBC,YAAW,sBAAM3L,IAAU,CAAE,CAAE4C,GAAI,SAAUN,KAAMvB,GAAEqE,IAASwG,6BAC9DC,YAAahM,KAEjB,cAAC,IAAW,CACRiM,MAAOnM,GAAG,UAAMA,GAAI2C,MAASvB,GAAEqE,IAAS2G,4BAGhD,sBAAKP,MAAO,CAAEC,QAAS,OAAQO,IAAK,OAAQC,WAAY,UAAW,UACxC,aAAtBnI,GAAU,SACX,cAACoI,EAAA,EAAM,CACHC,QAAQ,YACRrJ,KAAK,SACLsJ,MAAM,UACNZ,MAAO,CAAEa,gBAAiB,WAC1BC,QAAS,kBAAM3C,MAAc,SAC/B5I,GAAEqE,IAASoE,SAEX1F,GAAU,UAAkC,WAAtBA,GAAU,SAC9B,eAAC,IAAMyI,SAAQ,WACX,cAACL,EAAA,EAAM,CACHC,QAAQ,YACRrJ,KAAK,SACLsJ,MAAM,UACNI,UAAW,cAAC,IAAW,CAACJ,MAAM,cAC9BZ,MAAO,CAAEa,gBAAiB,WAC1BC,QA3DR,WACpBzL,GAASuF,aAAa,IACtBvF,GAAS4L,YAAiBC,aAA0B5I,GAAU,SAC9DtC,IAAY,IAwDyC,SAC3BT,GAAEqE,IAASuH,cACb,cAACT,EAAA,EAAM,CACHC,QAAQ,YACRrJ,KAAK,SACLsJ,MAAM,UACNI,UAAW,cAAC,IAAU,CAACJ,MAAM,cAC7BZ,MAAO,CAAEa,gBAAiB,WAC1BC,QAhGX,WAOjBzL,GAAS0G,YAAmB,CACxBC,SAAS,EACTC,SAAU1G,GAAEqE,IAASwH,0BACrBjF,SATa,WACb9G,GAASuF,aAAa,IACtBvF,GAASJ,YAAQoM,YAA0B/I,GAAU,SACrD1C,IAAc,QA4FgC,SACxBL,GAAEqE,IAAS0H,cACb,uBACIC,OAAO,yEACPnK,GAAG,aACHE,KAAK,OACL0I,MAAO,CAAEC,QAAS,QAClBuB,SAAU,SAACC,GAAC,OAAKzC,GAAayC,EAAEC,OAAOzC,UAE3C,uBAAO0C,QAAQ,aAAY,SACvB,cAACjB,EAAA,EAAM,CACHkB,UAAWnN,GAAQ3C,OACnB6O,QAAQ,YACRkB,UAAU,OACVjB,MAAM,UACNI,UAAW,cAAC,IAAU,CAACJ,MAAM,cAC7BZ,MAAO,CAAEa,gBAAiB,WAAY,SACxCtL,GAAEqE,IAASkI,eAIF,WAAtBxJ,GAAU,SACX,cAACoI,EAAA,EAAM,CACHC,QAAQ,YACRrJ,KAAK,SACLsJ,MAAM,UACNI,UAAW,cAAC,IAAQ,CAACJ,MAAM,cAC3BZ,MAAO,CAAEa,gBAAiB,WAC1BC,QAAS,WAvL7BiB,YAAa,OACT,CACI,IAAM,GAAD,OAAKzJ,GAAU,OAAM,gBAC1B,WAAc,CACV,KAAQ7B,GAAOuL,QAAO,SAACvF,EAAGtB,GAAC,kCAAUsB,GAAC,kBAAGtB,EAAErE,KAAkB,WAAXqE,EAAErE,KAAwB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAM+M,OAAqB,UAAX9G,EAAErE,KAAuB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAMgN,MAAK,UAAM/G,EAAErE,KAAI,cAAa,KAErJ,YAAe,CACX,KAAQ,CACJL,GAAOuL,QAAO,SAACvF,EAAGtB,GAAC,kCAAUsB,GAAC,kBAAGtB,EAAErE,KAAkB,WAAXqE,EAAErE,KAAwB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAM+M,OAAqB,UAAX9G,EAAErE,KAAuB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAMgN,MAAK,UAAM/G,EAAErE,KAAI,cAAa,IACzIL,GAAOuL,QAAO,SAACvF,EAAGtB,GAAC,kCAAUsB,GAAC,kBAAGtB,EAAErE,KAAkB,WAAXqE,EAAErE,KAAwB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAM+M,OAAqB,UAAX9G,EAAErE,KAAuB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAMgN,MAAK,UAAM/G,EAAErE,KAAI,cAAa,MAGjJ,OAAU,CACN,KAAQL,GAAOuL,QAAO,SAACvF,EAAGtB,GAAC,kCAAUsB,GAAC,kBAAGtB,EAAErE,KAAkB,WAAXqE,EAAErE,KAAwB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAM+M,OAAqB,UAAX9G,EAAErE,KAAuB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAMgN,MAAK,UAAM/G,EAAErE,KAAI,cAAa,IACjJ,OAAUL,GAAOuL,QAAO,SAACvF,EAAGtB,GAAC,kCAAUsB,GAAC,kBAAGtB,EAAErE,KAAkB,WAAXqE,EAAErE,KAAwB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAM+M,OAAqB,UAAX9G,EAAErE,KAAuB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAMgN,MAAK,UAAM/G,EAAErE,KAAI,cAAa,KAEvJ,OAAU,CACN,OAAUL,GAAOuL,QAAO,SAACvF,EAAGtB,GAAC,kCAAUsB,GAAC,kBAAGtB,EAAErE,KAAkB,WAAXqE,EAAErE,KAAwB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAM+M,OAAqB,UAAX9G,EAAErE,KAAuB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAMgN,MAAK,UAAM/G,EAAErE,KAAI,cAAa,KAEvJ,SAAY,CACR,OAAUL,GAAOuL,QAAO,SAACvF,EAAGtB,GAAC,kCAAUsB,GAAC,kBAAGtB,EAAErE,KAAkB,WAAXqE,EAAErE,KAAwB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAM+M,OAAqB,UAAX9G,EAAErE,KAAuB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAMgN,MAAK,UAAM/G,EAAErE,KAAI,cAAa,IACnJ,KAAQL,GAAOuL,QAAO,SAACvF,EAAGtB,GAAC,kCAAUsB,GAAC,kBAAGtB,EAAErE,KAAO,UAAS,KAE/D,UAAa,CACT,OAAUL,GAAOuL,QAAO,SAACvF,EAAGtB,GAAC,kCAAUsB,GAAC,kBAAGtB,EAAErE,KAAkB,WAAXqE,EAAErE,KAAwB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAM+M,OAAqB,UAAX9G,EAAErE,KAAuB,OAAJ5B,SAAI,IAAJA,QAAI,EAAJA,GAAMgN,MAAK,UAAM/G,EAAErE,KAAI,cAAa,IACnJ,KAAQL,GAAOuL,QAAO,SAACvF,EAAGtB,GAAC,kCAAUsB,GAAC,kBAAGtB,EAAErE,KAAO,UAAS,IAC3D,MAAS,OA6J4B,SAC/BvB,GAAEqE,IAASuI,QAEb,cAACzB,EAAA,EAAM,CACHC,QAAQ,YACRrJ,KAAK,SACLsJ,MAAM,UACNI,UAAW,cAAC,IAAS,CAACJ,MAAM,cAC5BZ,MAAO,CAAEa,gBAAiB,WAC1BC,QAAS,kBAAMzM,GAAgB,WAAU,SAC3CkB,GAAEqE,IAASwI,QACZhO,IACG,cAACsM,EAAA,EAAM,CACHkB,UAAWnN,GAAQ3C,OACnB6O,QAAQ,YACRC,MAAM,UACNtJ,KAAK,SACL0J,UAAW,cAAC,IAAQ,CAACJ,MAAM,cAC3BZ,MAAO,CAAEa,gBAAiB,WAAY,SACxCtL,GAAEqE,IAASyI,cAKzB,sBAAKT,UAAWnN,GAAQhD,gBAAgB,UACxC,qBAAKmQ,UAAU,UAAS,SACdxN,IAAQkE,GAAU,SAChB,cAAC,IAAS,CACNgK,MAAO/M,GAAEqE,IAAS9C,MAClB8K,UAAU,SACVW,aAAcjK,GAAU,QACxBkJ,SAAU,SAAC9H,GAAK,OAAKrB,GAAS,OAAQqB,IACtCQ,MAAa,OAAN1B,SAAM,IAANA,IAAY,QAAN,EAANA,GAAQ1B,YAAI,WAAN,EAAN,EAAc6D,UAGzB,cAAC,IAAS,CACN2H,MAAO/M,GAAEqE,IAAS9C,MAClB4C,OAAU,OAAHvF,SAAG,IAAHA,QAAG,EAAHA,GAAK2C,OAAQ,GACpB8K,UAAU,aAItB,qBAAKA,UAAU,UAAS,SAClBxN,IAAQkE,GAAU,SAChB,cAAC,IAAW,CACRkK,MAAM,EACNF,MAAO/M,GAAEqE,IAAStC,MAClBsK,UAAU,SACVW,aAAcjK,GAAU,QACxBkJ,SAAUnF,GACVnC,MAAa,OAAN1B,SAAM,IAANA,IAAY,QAAN,EAANA,GAAQlB,YAAI,WAAN,EAAN,EAAcqD,QACrBzG,KAAMuO,YAAczP,GACpB0P,WAAW,QACXC,YAAY,QAGhB,cAAC,IAAS,CACNL,MAAO/M,GAAEqE,IAAStC,MAClBoC,MAAOnE,GAAEvC,EAAuB,OAAHmB,SAAG,IAAHA,QAAG,EAAHA,GAAKmD,QAAU,GAC5CsK,UAAU,aAIC,aAAtBtJ,GAAU,QACX,eAAC,IAAMyI,SAAQ,WACX,qBAAKa,UAAU,UAAS,SACnBxN,GACG,eAAC,IAAM2M,SAAQ,WACX,cAAC,IAAW,CACR6B,UAAS,eAAMzK,GAAS,SAAU,CAC9BsB,SAAU,SAACC,GAAU,OAAMA,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,oBAEpEyI,MAAO/M,GAAEqE,IAASiJ,aAClBjB,UAAWnN,GAAQvC,aACnBqQ,aAAcjK,GAAU,UACxBkJ,SAAUlF,GACVpC,MAAa,OAAN1B,SAAM,IAANA,IAAc,QAAR,EAANA,GAAQhB,cAAM,WAAR,EAAN,EAAgBmD,QACvBzG,KAAMuO,YAActP,GACpBuP,WAAW,QACXC,YAAY,QAEhB,cAAC,IAAS,CACNC,UAAS,eAAMzK,GAAS,MAAO,CAC3BsB,SAAU,SAACC,GAAU,OAAMA,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,oBAEpEyI,MAAO/M,GAAEqE,IAASnC,KAClBmK,UAAWnN,GAAQnC,aACnBiQ,aAAcjK,GAAU,OACxBkJ,SAAU,SAAC9H,GAAK,OAAKrB,GAAS,MAAOqB,IACrCQ,MAAa,OAAN1B,SAAM,IAANA,IAAW,QAAL,EAANA,GAAQf,WAAG,WAAL,EAAN,EAAakD,aAI5B,cAAC,IAAS,CACN2H,MAAO/M,GAAEqE,IAASnC,KAClBiC,OAAU,OAAHvF,SAAG,IAAHA,QAAG,EAAHA,GAAKsD,MAAO,GACnBmK,UAAU,aAItB,qBAAKA,UAAU,UAAS,SACpB,cAAC,IAAW,CACRY,MAAM,EACNI,UAAS,eAAMzK,GAAS,qBAAsB,CAC1CsB,SAAU,SAACC,GAAU,OAAMA,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,oBAEpEyI,MAAO/M,GAAEqE,IAASlC,eAClB6K,aAAcjK,GAAU,sBACxBkJ,SAAUjF,GACVrC,MAAa,OAAN1B,SAAM,IAANA,IAAqB,QAAf,EAANA,GAAQd,qBAAa,OAAM,QAAN,EAArB,EAAuBJ,YAAI,WAArB,EAAN,EAA6BqD,QACpCzG,KAAMuO,YAAcnP,GACpBoP,WAAW,QACXC,YAAY,UAGiB,UAApCrK,GAAU,sBACP,qBAAKsJ,UAAU,UAAS,SACpB,eAAC,IAAMb,SAAQ,WACX,cAAC,IAAS,CACN6B,UAAS,eAAMzK,GAAS,yBAA0B,CAAEsB,SAAU,SAACC,GAAS,MAAuC,UAAlCpB,GAAU,sBAAkCoB,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,gBAAiB,SAC/KyI,MAAO/M,GAAEqE,IAASkJ,UAClBlB,UAAU,QACVW,aAAcjK,GAAU,0BACxBkJ,SAAU,SAAC9H,GAAK,OAAKrB,GAAS,yBAA0BqB,IACxDQ,MAAa,OAAN1B,SAAM,IAANA,IAAqB,QAAf,EAANA,GAAQd,qBAAa,OAAU,QAAV,EAArB,EAAuBoL,gBAAQ,WAAzB,EAAN,EAAiCnI,UAE5C,cAAC,IAAS,CACNiI,UAAS,eAAMzK,GAAS,yBAA0B,CAAEsB,SAAU,SAACC,GAAS,MAAuC,UAAlCpB,GAAU,sBAAkCoB,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,gBAAiB,SAC/KyI,MAAO/M,GAAEqE,IAASmJ,UAClBnB,UAAU,QACVW,aAAcjK,GAAU,0BACxBkJ,SAAU,SAAC9H,GAAK,OAAKrB,GAAS,yBAA0BqB,IACxDQ,MAAa,OAAN1B,SAAM,IAANA,IAAqB,QAAf,EAANA,GAAQd,qBAAa,OAAU,QAAV,EAArB,EAAuBqL,gBAAQ,WAAzB,EAAN,EAAiCpI,eAKpD,KAEiC,WAApCrC,GAAU,sBACP,qBAAKsJ,UAAU,UAAS,SACnBxN,GACG,cAAC,IAAS,CACNwO,UAAS,eAAMzK,GAAS,sBAAuB,CAAEsB,SAAU,SAACC,GAAS,MAAuC,WAAlCpB,GAAU,sBAAmCoB,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,gBAAiB,SAC7KyI,MAAO/M,GAAEqE,IAASoJ,OAClBpB,UAAU,SACVW,aAAcjK,GAAU,uBACxBkJ,SAAU,SAAC9H,GAAK,OAAKrB,GAAS,sBAAuBqB,IACrDQ,MAAa,OAAN1B,SAAM,IAANA,IAAqB,QAAf,EAANA,GAAQd,qBAAa,OAAO,QAAP,EAArB,EAAuBsL,aAAK,WAAtB,EAAN,EAA8BrI,UAGzC,cAAC,IAAS,CACN2H,MAAO/M,GAAEqE,IAASoJ,OAClBtJ,OAAU,OAAHvF,SAAG,IAAHA,IAAkB,QAAf,EAAHA,GAAKuD,qBAAa,WAAf,EAAH,EAAoBsL,QAAS,GACpCpB,UAAU,aAKtB,KAEJ,qBAAKA,UAAU,UAAU5B,MAAO,CAAES,WAAY,YAAa,SACvD,eAAC,IAAMM,SAAQ,WACX,cAAC,IAAS,CACNuB,MAAO/M,GAAEqE,IAASqJ,QAClBrB,UAAWnN,GAAQlC,eAEtB6B,GACG,cAACsM,EAAA,EAAM,CACHC,QAAQ,WACRrJ,KAAK,SACLsJ,MAAM,UACNgB,UAAWnN,GAAQhC,aACnBuO,UAAW,cAAC,IAAO,CAACJ,MAAM,YAC1BE,QAAS,kBAAMtE,MAAmB,SACpCjH,GAAEqE,IAASsJ,aAEb,UAIX9O,GACU,OAAPuD,SAAO,IAAPA,QAAO,EAAPA,GAASd,KAAI,SAACgH,EAAYC,GAAe,IAAD,YACpC,OACI,sBAAK8D,UAAU,UAAS,UACpB,cAAC,IAAS,CACNU,MAAO/M,GAAEqE,IAAShD,KAClBgL,UAAWnN,GAAQ3B,SACnByP,cAAmB,OAAL1E,QAAK,IAALA,OAAK,EAALA,EAAOjH,MAAO,GAC5BuM,OAAQ,SAACzJ,GAAK,OAAKkD,GAAakB,EAAG,MAAOpE,IAC1CQ,MAAa,OAAN1B,SAAM,IAANA,IAAe,QAAT,EAANA,GAAQb,eAAO,OAAK,QAAL,EAAf,EAAkBmG,UAAE,OAAK,QAAL,EAApB,EAAsBlH,WAAG,WAAnB,EAAN,EAA2B+D,UAEtC,cAAC,IAAS,CACN2H,MAAO/M,GAAEqE,IAASF,OAClBkI,UAAWnN,GAAQ3B,SACnByP,cAAmB,OAAL1E,QAAK,IAALA,OAAK,EAALA,EAAOnE,QAAS,GAC9ByJ,OAAQ,SAACzJ,GAAK,OAAKkD,GAAakB,EAAG,QAASpE,IAC5CQ,MAAa,OAAN1B,SAAM,IAANA,IAAe,QAAT,EAANA,GAAQb,eAAO,OAAK,QAAL,EAAf,EAAkBmG,UAAE,OAAO,QAAP,EAApB,EAAsBpE,aAAK,WAArB,EAAN,EAA6BiB,UAExC,cAACyI,EAAA,EAAU,CACPC,KAAK,QACLzB,UAAWnN,GAAQ1B,YACnB+N,QAAS,kBAAMpE,GAAoBoB,IAAG,SACtC,cAAC,IAAU,CAACkC,MAAO,CAAEY,MAAO,iBAnBN/C,EAAMzG,OAyBzC,OAAPO,SAAO,IAAPA,QAAO,EAAPA,GAASd,KAAI,SAACgH,EAAYC,GACtB,OACI,sBAAK8D,UAAU,UAAS,UACpB,cAAC,IAAS,CACNU,MAAO/M,GAAEqE,IAAShD,KAClB8C,OAAY,OAALmE,QAAK,IAALA,OAAK,EAALA,EAAOjH,MAAO,GACrBgL,UAAU,WAEd,cAAC,IAAS,CACNU,MAAO/M,GAAEqE,IAASF,OAClBA,OAAY,OAALmE,QAAK,IAALA,OAAK,EAALA,EAAOnE,QAAS,GACvBkI,UAAU,aATY/D,EAAMzG,OAcnB,SAAxBkB,GAAU,UACX,qBAAKsJ,UAAU,UAAS,SACnBxN,GACG,eAAC,IAAM2M,SAAQ,WACX,cAAC,IAAW,CACR6B,UAAS,eAAMzK,GAAS,WAAY,CAChCsB,SAAU,SAACC,GAAU,OAAMA,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,oBAEpEyI,MAAO/M,GAAEqE,IAAShC,UAClBgK,UAAWnN,GAAQvC,aACnBqQ,aAAcjK,GAAU,YACxBkJ,SAAU1E,GACV5C,MAAa,OAAN1B,SAAM,IAANA,IAAgB,QAAV,GAANA,GAAQZ,gBAAQ,YAAV,EAAN,GAAkB+C,QACzBzG,KAAMuO,YAAc/O,GACpBgP,WAAW,QACXC,YAAY,QAEW,SAA1BrK,GAAU,YACX,cAACoI,EAAA,EAAM,CACHC,QAAQ,WACRrJ,KAAK,SACLsJ,MAAM,UACNgB,UAAWnN,GAAQhC,aACnBqO,QAAS,kBAAM5D,MAAkB,SACnC3H,GAAEqE,IAAS0J,YACX,KACyB,eAA1BhL,GAAU,YACX,cAACoI,EAAA,EAAM,CACHC,QAAQ,WACRrJ,KAAK,SACLsJ,MAAM,UACNgB,UAAWnN,GAAQhC,aACnBuO,UAAW,cAAC,IAAO,CAACJ,MAAM,YAC1BE,QAAS,kBAAM/D,MAAsB,SACvCxH,GAAEqE,IAAS2J,gBACX,QAGN,cAAC,IAAS,CACNjB,MAAO/M,GAAEqE,IAAShC,UAClB8B,MAAOvF,IAAOA,GAAIyD,UAAkB,GACpCgK,UAAU,aAIpB,KACwB,SAAxBtJ,GAAU,WACiB,SAA1BA,GAAU,YACb,qBAAKsJ,UAAU,UAAS,SACnBxN,GACG,cAAC,IAAc,CACXwO,UAAS,eAAMzK,GAAS,OAAQ,CAC5BsB,SAAU,CACNC,MAAM,SAAD,oGAAC,EAAC,SAACA,GAAU,OAAMA,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,mBAC7D2J,QAAS,SAAC9J,GAAU,OAAK4D,GAAa5D,IAAUnE,GAAEqE,IAAS6J,kBAGnEnB,MAAO/M,GAAEqE,IAAS/B,MAClB+J,UAAU,SACVW,aAAcjK,GAAU,QACxBkJ,SA9jBX,SAAC9H,GAClBrB,GAAS,OAAQqB,IA8jBWyJ,OA/iBb,WAEf,GAAiB,SADF7K,GAAU,YACA,CACrB,IAAIpE,EAAOoE,GAAU,QACrBgF,GAAapJ,KA4iBWgG,MAAa,OAAN1B,SAAM,IAANA,IAAY,QAAN,GAANA,GAAQX,YAAI,YAAN,EAAN,GAAc8C,QACrB+I,KAAM,IAGV,cAAC,IAAS,CACNpB,MAAO/M,GAAEqE,IAAS/B,MAClB6B,MAAOvF,IAAOA,GAAI0D,MAAc,GAChC+J,UAAU,aAIpB,KACwB,SAAxBtJ,GAAU,WACiB,eAA1BA,GAAU,YACT,cAAC,IAAMyI,SAAQ,UACV3M,GACa,OAAV0D,SAAU,IAAVA,QAAU,EAAVA,GAAYjB,KAAI,SAACgH,EAAYC,GAAe,IAAD,YACvC,OACI,sBAAK8D,UAAU,UAAS,UACpB,cAAC,IAAS,CACNU,MAAO/M,GAAEqE,IAAShD,KAClBgL,UAAWnN,GAAQ3B,SACnByP,cAAmB,OAAL1E,QAAK,IAALA,OAAK,EAALA,EAAOjH,MAAO,GAC5BuM,OAAQ,SAACzJ,GAAK,OAAKuD,GAAgBa,EAAG,MAAOpE,IAC7CQ,MAAa,OAAN1B,SAAM,IAANA,IAAkB,QAAZ,EAANA,GAAQV,kBAAU,OAAK,QAAL,EAAlB,EAAqBgG,UAAE,OAAK,QAAL,EAAvB,EAAyBlH,WAAG,WAAtB,EAAN,EAA8B+D,UAEzC,cAAC,IAAS,CACN2H,MAAO/M,GAAEqE,IAASF,OAClBkI,UAAWnN,GAAQ3B,SACnByP,cAAmB,OAAL1E,QAAK,IAALA,OAAK,EAALA,EAAOnE,QAAS,GAC9ByJ,OAAQ,SAACzJ,GAAK,OAAKuD,GAAgBa,EAAG,QAASpE,IAC/CQ,MAAa,OAAN1B,SAAM,IAANA,IAAkB,QAAZ,EAANA,GAAQV,kBAAU,OAAK,QAAL,EAAlB,EAAqBgG,UAAE,OAAO,QAAP,EAAvB,EAAyBpE,aAAK,WAAxB,EAAN,EAAgCiB,UAE3C,cAACyI,EAAA,EAAU,CACPC,KAAK,QACLzB,UAAWnN,GAAQ1B,YACnB+N,QAAS,kBAAM9D,GAAuBc,IAAG,SACzC,cAAC,IAAU,CAACkC,MAAO,CAAEY,MAAO,iBAnBN/C,EAAMzG,OAwBpC,OAAVU,SAAU,IAAVA,QAAU,EAAVA,GAAYjB,KAAI,SAACgH,EAAYC,GAC3B,OACI,sBAAK8D,UAAU,UAAS,UACpB,cAAC,IAAS,CACNU,MAAO/M,GAAEqE,IAAShD,KAClB8C,OAAY,OAALmE,QAAK,IAALA,OAAK,EAALA,EAAOjH,MAAO,GACrBgL,UAAU,WAEd,cAAC,IAAS,CACNU,MAAO/M,GAAEqE,IAASF,OAClBA,OAAY,OAALmE,QAAK,IAALA,OAAK,EAALA,EAAOnE,QAAS,GACvBkI,UAAU,aATY/D,EAAMzG,SAgBlD,QAEJ,KAEqB,WAAtBkB,GAAU,QACX,eAAC,IAAMyI,SAAQ,WACX,qBAAKa,UAAU,UAAS,SAClBxN,IAAQkE,GAAU,SAChB,cAAC,IAAMyI,SAAQ,UACX,cAAC,IAAS,CACNuB,MAAO/M,GAAEqE,IAASnC,KAClBmK,UAAU,SACVW,aAAcjK,GAAU,OACxBqL,UAAU,EACVzJ,MAAa,OAAN1B,SAAM,IAANA,IAAW,QAAL,GAANA,GAAQf,WAAG,YAAL,EAAN,GAAakD,YAI5B,cAAC,IAAS,CACN2H,MAAO/M,GAAEqE,IAASnC,KAClBiC,OAAU,OAAHvF,SAAG,IAAHA,QAAG,EAAHA,GAAKsD,MAAO,GACnBmK,UAAU,aAItB,qBAAKA,UAAU,UAAS,SAClBxN,IAAQkE,GAAU,SAChB,cAAC,IAAS,CACNgK,MAAO/M,GAAEqE,IAAS1C,QAClB0K,UAAU,SACVW,aAAcjK,GAAU,UACxBqL,UAAU,EACVzJ,MAAa,OAAN1B,SAAM,IAANA,IAAc,QAAR,GAANA,GAAQtB,cAAM,YAAR,EAAN,GAAgByD,UAG3B,cAAC,IAAS,CACN2H,MAAO/M,GAAEqE,IAAS1C,QAClBwC,OAAU,OAAHvF,SAAG,IAAHA,QAAG,EAAHA,GAAK+C,SAAU,GACtB0K,UAAU,aAItB,qBAAKA,UAAU,UAAS,SAClBxN,IAAQkE,GAAU,SAChB,cAAC,IAAW,CACRkK,MAAM,EACNI,UAAS,eAAMzK,GAAS,QAAS,CAC7BsB,SAAU,SAACC,GAAU,OAAMA,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,oBAEpEyI,MAAO/M,GAAEqE,IAAS5B,OAClB4J,UAAU,SACVW,aAAcjK,GAAU,SACxBkJ,SAAUjE,GACVrD,MAAa,OAAN1B,SAAM,IAANA,IAAa,QAAP,GAANA,GAAQR,aAAK,YAAP,EAAN,GAAe2C,QACtBzG,KAAMuO,YAAc5O,GACpB6O,WAAW,QACXC,YAAY,QAGhB,cAAC,IAAS,CACNL,MAAO/M,GAAEqE,IAAS5B,OAClB0B,MAAOnE,GAAE1B,EAAa,OAAHM,SAAG,IAAHA,QAAG,EAAHA,GAAK6D,SAAW,GACnC4J,UAAU,aAItB,qBAAKA,UAAU,UAAU5B,MAAO,CAAES,WAAY,YAAa,SACtDrM,GACG,eAAC,IAAM2M,SAAQ,WACX,cAAC,IAAS,CACNuB,MAAO/M,GAAEqE,IAASgK,aAClBhC,UAAWnN,GAAQlC,eAEvB,cAACmO,EAAA,EAAM,CACHC,QAAQ,WACRrJ,KAAK,SACLsJ,MAAM,UACNgB,UAAWnN,GAAQhC,aACnBuO,UAAW,cAAC,IAAO,CAACJ,MAAM,YAC1BE,QAAS,kBAAMrD,MAAkB,SACnClI,GAAEqE,IAASiK,eAGjB,cAAC,IAAS,CACNvB,MAAO/M,GAAEqE,IAASgK,aAClBhC,UAAU,aAIrBxN,GACS,OAANqC,SAAM,IAANA,QAAM,EAANA,GAAQI,KAAI,SAACgH,EAAYC,GAAe,IAAD,YACnC,OACI,sBAAK8D,UAAU,UAAS,UACpB,cAAC,IAAS,CACNgB,UAAS,eAAMzK,GAAS,UAAD,OAAW2F,EAAC,SAAS,CACxCrE,SAAU,CACNC,MAAM,SAAD,oGAAC,EAAC,SAACA,GAAU,OAAMA,GAASA,EAAMC,QAAWpE,GAAEqE,IAASC,mBAC7DiK,UAAW,SAACpK,GAAU,OAppBnC,SAACmE,EAAkBnE,GAElD,OADQjD,GAAOC,QAAO,SAACqN,GAAY,OAAKA,EAAE3M,KAAOyG,EAAMzG,MAAIP,KAAI,SAACmN,GAAY,OAAKA,EAAElN,QACzEsE,SAAS1B,GAkpBoDuK,CAA2BpG,EAAOnE,IAAUnE,GAAEqE,IAASsK,kBAClFC,cAAe,SAACzK,GAAU,OAhpBnC,SAACA,GAEpC,OADU,IAAI6B,OAAO,QAAQ,KAClByC,KAAKtE,EAAM,IA8oBqD0K,CAA+B1K,IAAUnE,GAAEqE,IAASyK,sBACnFvK,WAAY,SAACJ,GAAU,OAAKK,GAA4BL,IAAUnE,GAAEqE,IAASI,gCAGrFsI,MAAO/M,GAAEqE,IAAS9C,MAClB8K,UAAWnN,GAAQ3B,SACnByP,cAAmB,OAAL1E,QAAK,IAALA,OAAK,EAALA,EAAO/G,OAAQ,GAC7B6M,SAAU/F,GAAYC,GACtBsF,OAAQ,SAACzJ,GAAK,OAAKiE,GAAYG,EAAG,OAAQpE,IAC1CQ,MAAa,OAAN1B,SAAM,IAANA,IAAc,QAAR,EAANA,GAAQ/B,cAAM,OAAK,QAAL,EAAd,EAAiBqH,UAAE,OAAM,QAAN,EAAnB,EAAqBhH,YAAI,WAAnB,EAAN,EAA2B6D,UAErCrC,GAAU,SACX,cAAC,IAAa,CACVgK,MAAO/M,GAAEqE,IAAShD,KAClBgL,UAAS,UAAKnN,GAAQ5B,aACtB0P,aAAmB,OAAL1E,QAAK,IAALA,OAAK,EAALA,EAAOjH,IACrB+M,SAAU/F,GAAYC,GACtB2D,SAAU,SAAC9H,GAAK,OAAKiE,GAAYG,EAAG,MAAOpE,IAC3CQ,MAAa,OAAN1B,SAAM,IAANA,IAAc,QAAR,EAANA,GAAQ/B,cAAM,OAAK,QAAL,EAAd,EAAiBqH,UAAE,OAAK,QAAL,EAAnB,EAAqBlH,WAAG,WAAlB,EAAN,EAA0B+D,UAEnC,KACAiD,GAAYC,GAOZ,KANF,cAACuF,EAAA,EAAU,CACPC,KAAK,QACLzB,UAAWnN,GAAQ1B,YACnB+N,QAAS,kBAAMpD,GAAmBI,IAAG,SACrC,cAAC,IAAU,CAACkC,MAAO,CAAEY,MAAO,iBAhCN/C,EAAMzG,OAuC1C,OAANX,SAAM,IAANA,QAAM,EAANA,GAAQI,KAAI,SAACJ,EAAaqH,GACtB,OACI,sBAAK8D,UAAU,UAAS,UACpB,cAAC,IAAS,CACNU,MAAO/M,GAAEqE,IAAS9C,MAClB4C,OAAa,OAANjD,QAAM,IAANA,OAAM,EAANA,EAAQK,OAAQ,GACvB8K,UAAU,WAEd,cAAC,IAAS,CACNU,MAAO/M,GAAEqE,IAAS0K,OAClB5K,OAAa,OAANjD,QAAM,IAANA,OAAM,EAANA,EAAQ6N,QAAS,GACxB1C,UAAU,aATYnL,EAAOW,UAe/C,WAIV,cAAC,EAAuB,CACpBlD,KAAM+J,GAAe/J,KACrBqQ,UAAWzF,GACX0F,aAAczF,GACd0F,eAnrBa,WACrBpP,GCjlBwC,CAACiC,KAAMkH,IAAYkG,mBDswCvD,cAAC,GAAc,CACXH,UAAWtO,GACXuO,aAActO,GACdyO,QAAStO,GACTnC,KAAMiC,SAahByO,EAAgD,SAAH,GAA2D,IAArD1Q,EAAI,EAAJA,KAAMqQ,EAAS,EAATA,UAAWC,EAAY,EAAZA,aAAcC,EAAc,EAAdA,eAC5ElP,EAAMC,cAAND,EAER,OACI,cAAC,IAAS,CACNsP,KAAMN,EACNjE,MAAO/K,EAAEqE,IAASkL,QAClBC,YAAaxP,EAAEqE,IAASwI,MACxB4C,mBAAoB,WAChBP,IACAD,GAAa,IAEjBS,YAAY,SAAQ,SAEpB,qBAAKrD,UAAU,UAAS,SACnBjO,KAAK0J,UAAUnJ,EAAM,KAAM,QAatCgR,GAAgD,SAAH,GAA8D,IAAxDX,EAAS,EAATA,UAAWC,EAAY,EAAZA,aAAa,EAAD,EAAEG,eAAO,MAAG,GAAE,MAAEzQ,YAAI,MAAG,GAAE,EAC7FqB,EAAMC,cAAND,EACFF,EAAWC,cAajB,OAPAkE,qBAAU,WACN,OAAO,WACHnE,EAAS8P,kBAGd,IAGC,cAAC,IAAS,CACN7E,MAAM,GACNuE,KAAMN,EACNa,SAAS,KACTC,YAAY,SACZC,YAAa/P,EAAEqE,IAAS2L,OACxBC,mBAlBkB,WACtBhB,GAAa,IAiB6B,SAEtC,cAAC,IAAQ,CACLG,QAASA,EACTzQ,KAAMA,EACNuR,UAAU,EACVC,gBAAiB,GACjBC,eAAe,OAMhBC,UA7uCgB,WAC3B,IAAMC,EAAUC,cACVzQ,EAAWC,cACTC,EAAMC,cAAND,EACFwQ,EAAajR,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QACxCgR,EAAgBlR,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,WAEtD,EAAwCP,mBAAS,UAAS,mBAAnDuR,EAAY,KAAE5R,EAAe,KACpC,EAAsCK,mBAAsB,CAAEP,IAAK,KAAMC,MAAM,IAAQ,mBAAhF8R,EAAW,KAAEC,EAAc,KAClC,EAAgCzR,oBAAS,GAAM,mBAAxCC,EAAQ,KAAEC,EAAW,KAC5B,EAAgCF,mBAAc,IAAG,mBAA1C0R,EAAQ,KAAEC,EAAW,KACtB7R,EAAa,CACf,CAAE4C,GAAI,SAAUN,KAAMvB,EAAEqE,IAAS0M,uBACjC,CAAElP,GAAI,SAAUN,KAAMvB,EAAEqE,IAAS2M,6BAErC,SAASC,EAAaC,GACP,WAARA,EAIHpS,EAAgBoS,GAHZZ,EAAQa,KAAKC,IAAMC,eAM3B,IAAMjC,EAAUpL,IAAMsN,SAClB,iBAAM,CACF,CACI9G,SAAU,KACV+G,UAAU,EACVC,aAAa,EACbrU,SAAU,GACVF,MAAO,KACPwU,KAAM,SAACC,GACH,IAAM9S,EAAM8S,EAAMC,KAAK/S,IAAIgT,SAC3B,OACI,cAAC,IAAa,CACVC,aAAc,kBAAMC,EAAWlT,IAC/BmT,eAAgB,kBAAMC,EAAapT,IACnCqT,aAAc,kBAAMC,EAAWtT,QAK/C,CACI2L,OAAQvK,EAAEqE,IAAS9C,MACnBiJ,SAAU,OACV+G,UAAU,GAEd,CACIhH,OAAQvK,EAAEqE,IAAStC,MACnByI,SAAU,kBACV+G,UAAU,GAEd,CACIhH,OAAQvK,EAAEqE,IAASrC,QACnBwI,SAAU,SACV+G,UAAU,EACVY,kBAAmB,UACnBV,KAAM,SAACC,GACH,IAAQ1P,EAAW0P,EAAMC,KAAK/S,IAAIgT,SAA1B5P,OACR,OAAQhC,EAAE,iBAAUgC,GAASoE,gBAAkB,IAAIgM,mBAI/D,IAGErT,EAAY,WAAH,OAASe,EAASuS,YAAcC,aAAyB,MAExErO,qBAAU,WAKN,OAJAlF,IACAe,EAASyS,YAAmB,CACxBC,aAAoB,qBAEjB,WACH1S,EAAS2S,kBAEd,IAEHxO,qBAAU,WACN,GAAI7E,EACA,GAAKqR,EAAc/L,SAAY+L,EAAc9L,OAKtC,GAAI8L,EAAc9L,MAAO,CAC5B,IAAMC,EAAe5E,EAAEyQ,EAAc5L,MAAQ,yBAA0B,CAAEC,OAAQ9E,EAAEqE,IAASU,oBAAoBC,sBAChHlF,EAASmF,YAAa,CAAEC,MAAM,EAAMC,SAAU,QAASC,QAASR,KAChE9E,EAASuF,aAAa,IACtBhG,GAAY,SARZS,EAASmF,YAAa,CAAEC,MAAM,EAAMC,SAAU,UAAWC,QAASpF,EAAEqE,IAAS6F,sBAC7EnL,IACAe,EAASuF,aAAa,IACtBhG,GAAY,KAQrB,CAACoR,EAAerR,IAEnB,IAKM0S,EAAa,SAAClT,GAChBE,EAAgB,UAChB8R,EAAe,CAAEhS,MAAKC,MAAM,KAG1BqT,EAAa,SAACtT,GAChBE,EAAgB,UAChB8R,EAAe,CAAEhS,MAAKC,MAAM,KAG1BmT,EAAe,SAACpT,GAOlBkB,EAAS0G,YAAmB,CACxBC,SAAS,EACTC,SAAU1G,EAAEqE,IAASqO,qBACrB9L,SATa,WACb9G,EAASJ,YAAQmH,aAAsB,2BAAKjI,GAAG,IAAE8D,UAAW,SAAUV,OAAQ,YAAaH,GAAIjD,EAAIiD,QACnG/B,EAASuF,aAAa,IACtBhG,GAAY,QAiBpB,OAPA4E,qBAAU,WACN6M,EAAYN,EAAWK,SAASlS,KAAK2C,KAAI,SAAAkN,GAAC,kCACnCA,GAAC,IACJmE,iBAAkB3S,EAAE,UAAGwO,EAAEzM,MAAOqE,gBAAkB,IAAIgM,sBAE3D,CAAC5B,EAAWK,SAASlS,OAEH,WAAjB+R,EAEIF,EAAWK,SAASlM,MACb,uCAIP,sBAAK8F,MAAO,CAACxN,MAAM,QAAQ,UACvB,qBAAKwN,MAAO,CAAEC,QAAS,OAASC,eAAgB,gBAAkBO,WAAY,UAAU,SACpF,cAAC,IAAmB,CAChBN,YAAa3L,EACb6L,YAAamG,MAGrB,cAAC,IAAQ,CACL7B,QAASA,EACTwD,YAAa5S,EAAEqE,IAAS2M,0BAA2B,CAAE6B,MAAO,IAC5DlU,KAAMkS,EACNiC,eAAgB,kBACZ,cAAC3H,EAAA,EAAM,CACHiD,SAAUoC,EAAWK,SAASnM,QAC9B0G,QAAQ,YACRrJ,KAAK,SACLsJ,MAAM,UACNI,UAAW,cAAC,IAAS,CAACJ,MAAM,cAC5BZ,MAAO,CAAEa,gBAAiB,WAC1BC,QAAS,kBAAM+E,EAAQa,KAAKC,IAAMC,gBAAe,SACnDrR,EAAEqE,IAASwI,SAEjBkG,WAAYb,EACZhC,UAAU,EACVxL,QAAS8L,EAAWK,SAASnM,QAC7B9B,UAAU,EACVoQ,eArEO,WACnBlU,EAAgB,UAChB8R,EAAe,CAAEhS,IAAK,KAAMC,MAAM,UA0E9B,cAAC,EAAwB,CACrBF,KAAMgS,EACN7R,gBAAiBmS,EACjBjS,UAAWwR,EAAWxR,UAAUL,KAChCI,UAAWA,EACXE,WAAYA,M,iCEpS5B,IAAIgU,EAAyBC,EAAQ,IAEjCC,EAA0BD,EAAQ,IAEtC9I,OAAOgJ,eAAeC,EAAS,aAAc,CAC3ClP,OAAO,IAETkP,EAAQC,aAAU,EAElB,IAAItP,EAAQmP,EAAwBD,EAAQ,IAIxCK,GAAW,EAFMN,EAAuBC,EAAQ,KAElBI,SAAuBtP,EAAMwP,cAAc,OAAQ,CACnF5N,EAAG,0GACD,SAEJyN,EAAQC,QAAUC,G,iCCjBlB,IAAIN,EAAyBC,EAAQ,IAEjCC,EAA0BD,EAAQ,IAEtC9I,OAAOgJ,eAAeC,EAAS,aAAc,CAC3ClP,OAAO,IAETkP,EAAQC,aAAU,EAElB,IAAItP,EAAQmP,EAAwBD,EAAQ,IAIxCK,GAAW,EAFMN,EAAuBC,EAAQ,KAElBI,SAAuBtP,EAAMwP,cAAc,OAAQ,CACnF5N,EAAG,mJACD,QAEJyN,EAAQC,QAAUC,G,iCCjBlB,IAAIN,EAAyBC,EAAQ,IAEjCC,EAA0BD,EAAQ,IAEtC9I,OAAOgJ,eAAeC,EAAS,aAAc,CAC3ClP,OAAO,IAETkP,EAAQC,aAAU,EAElB,IAAItP,EAAQmP,EAAwBD,EAAQ,IAIxCK,GAAW,EAFMN,EAAuBC,EAAQ,KAElBI,SAAuBtP,EAAMwP,cAAc,OAAQ,CACnF5N,EAAG,wCACD,OAEJyN,EAAQC,QAAUC","file":"static/js/65.2584d0b2.chunk.js","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { FC, useEffect, useState } from 'react'; // we need this to make JSX compile\r\nimport { useSelector } from 'hooks';\r\nimport { useDispatch } from 'react-redux';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport { TemplateIcons, TemplateBreadcrumbs, TitleDetail, FieldView, FieldEdit, FieldSelect, FieldEditMulti, FieldCheckbox, DialogZyx } from 'components';\r\nimport { getIntegrationManagerSel, insIntegrationManager, getValuesFromDomain, uuidv4, extractVariablesFromArray, downloadJson, uploadExcel, insarrayIntegrationManager, deldataIntegrationManager, getdataIntegrationManager } from 'common/helpers';\r\nimport { Dictionary, MultiData } from \"@types\";\r\nimport TableZyx from '../components/fields/table-simple';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { langKeys } from 'lang/keys';\r\nimport { useFieldArray, useForm } from 'react-hook-form';\r\nimport { getCollection, resetAllMain, getMultiCollection, execute, getCollectionAux, resetMainAux } from 'store/main/actions';\r\nimport { showSnackbar, showBackdrop, manageConfirmation } from 'store/popus/actions';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { apiUrls } from 'common/constants';\r\nimport { request_send, resetRequest } from 'store/integrationmanager/actions';\r\nimport { dictToArrayKV, extractVariables, isJson } from 'common/helpers';\r\nimport BackupIcon from '@material-ui/icons/Backup';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport { useHistory } from 'react-router-dom';\r\nimport paths from 'common/constants/paths';\r\n\r\ninterface RowSelected {\r\n    row: Dictionary | null,\r\n    edit: boolean\r\n}\r\n\r\ninterface DetailProps {\r\n    data: RowSelected;\r\n    setViewSelected: (view: string) => void;\r\n    multiData: MultiData[];\r\n    fetchData: () => void;\r\n    arrayBread: any;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    containerDetail: {\r\n        marginTop: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n        background: '#fff',\r\n    },\r\n    button: {\r\n        padding: 12,\r\n        fontWeight: 500,\r\n        fontSize: '14px',\r\n        textTransform: 'initial'\r\n    },\r\n    selectInput1: {\r\n        flexGrow: 0,\r\n        flexBasis: '180px',\r\n        marginRight: '10px',\r\n    },\r\n    selectInput2: {\r\n        flexGrow: 1,\r\n        flexBasis: '200px',\r\n    },\r\n    labelButton1: {\r\n        width: 'auto',\r\n        marginRight: '0.25rem',\r\n    },\r\n    labelButton2: {\r\n        minWidth: 'max-content',\r\n        minHeight: '30px',\r\n        maxHeight: '48px',\r\n        flexBasis: 0,\r\n        flexGrow: 0,\r\n    },\r\n    checkboxRow: {\r\n        flexGrow: 0,\r\n        flexBasis: 0,\r\n        marginRight: '0.5rem',\r\n    },\r\n    fieldRow: {\r\n        flexGrow: 1,\r\n        flexBasis: 0,\r\n        marginRight: '0.5rem'\r\n    },\r\n    fieldButton: {\r\n        flexGrow: 0,\r\n        flexBasis: 0,\r\n    }\r\n}));\r\n\r\nconst dataIntegrationType: Dictionary = {\r\n    STANDARD: 'standard',\r\n    CUSTOM: 'custom',\r\n};\r\n\r\nconst dataMethodType: Dictionary = {\r\n    GET: 'GET',\r\n    POST: 'POST',\r\n};\r\n\r\nconst dataAuthorizationType: Dictionary = {\r\n    NONE: 'none',\r\n    BASIC: 'basic',\r\n    BEARER: 'bearer',\r\n};\r\n\r\nconst dataBodyType: Dictionary = {\r\n    JSON: 'JSON',\r\n    URLENCODED: 'URL encoded',\r\n}\r\n\r\nconst dataLevel: Dictionary = {\r\n    CORPORATION: 'corporation',\r\n    ORGANIZATION: 'organization',\r\n}\r\n\r\nconst dataLevelKeys = ['corpid','orgid'];\r\n\r\nconst IntegrationManager: FC = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n    const mainResult = useSelector(state => state.main);\r\n    const executeResult = useSelector(state => state.main.execute);\r\n\r\n    const [viewSelected, setViewSelected] = useState(\"view-1\");\r\n    const [rowSelected, setRowSelected] = useState<RowSelected>({ row: null, edit: false });\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const [mainData, setMainData] = useState<any>([]);\r\n    const arrayBread = [\r\n        { id: \"view-0\", name: t(langKeys.configuration_plural) },\r\n        { id: \"view-1\", name: t(langKeys.integrationmanager_plural) },\r\n    ];\r\n    function redirectFunc(view:string){\r\n        if(view ===\"view-0\"){\r\n            history.push(paths.CONFIGURATION)\r\n            return;\r\n        }\r\n        setViewSelected(view)\r\n    }\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                accessor: 'id',\r\n                NoFilter: true,\r\n                isComponent: true,\r\n                minWidth: 60,\r\n                width: '1%',\r\n                Cell: (props: any) => {\r\n                    const row = props.cell.row.original;\r\n                    return (\r\n                        <TemplateIcons\r\n                            viewFunction={() => handleView(row)}\r\n                            deleteFunction={() => handleDelete(row)}\r\n                            editFunction={() => handleEdit(row)}\r\n                        />\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                Header: t(langKeys.name),\r\n                accessor: 'name',\r\n                NoFilter: true\r\n            },\r\n            {\r\n                Header: t(langKeys.type),\r\n                accessor: 'type_translated',\r\n                NoFilter: true,\r\n            },\r\n            {\r\n                Header: t(langKeys.status),\r\n                accessor: 'status',\r\n                NoFilter: true,\r\n                prefixTranslation: 'status_',\r\n                Cell: (props: any) => {\r\n                    const { status } = props.cell.row.original;\r\n                    return (t(`status_${status}`.toLowerCase()) || \"\").toUpperCase()\r\n                }\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const fetchData = () => dispatch(getCollection(getIntegrationManagerSel(0)));\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n        dispatch(getMultiCollection([\r\n            getValuesFromDomain(\"ESTADOGENERICO\"),\r\n        ]));\r\n        return () => {\r\n            dispatch(resetAllMain());\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeResult.loading && !executeResult.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_delete) }))\r\n                fetchData();\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            } else if (executeResult.error) {\r\n                const errormessage = t(executeResult.code || \"error_unexpected_error\", { module: t(langKeys.integrationmanager).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            }\r\n        }\r\n    }, [executeResult, waitSave]);\r\n\r\n    const handleRegister = () => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row: null, edit: true });\r\n    }\r\n\r\n    const handleView = (row: Dictionary) => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row, edit: false });\r\n    }\r\n\r\n    const handleEdit = (row: Dictionary) => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row, edit: true });\r\n    }\r\n\r\n    const handleDelete = (row: Dictionary) => {\r\n        const callback = () => {\r\n            dispatch(execute(insIntegrationManager({ ...row, operation: 'DELETE', status: 'ELIMINADO', id: row.id })));\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true);\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_delete),\r\n            callback\r\n        }))\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setMainData(mainResult.mainData.data.map(x => ({\r\n            ...x,\r\n            type_translated: (t(`${x.type}`.toLowerCase()) || \"\").toUpperCase(),\r\n        })))\r\n    }, [mainResult.mainData.data])\r\n\r\n    if (viewSelected === \"view-1\") {\r\n\r\n        if (mainResult.mainData.error) {\r\n            return <h1>ERROR</h1>;\r\n        }\r\n\r\n        return (\r\n            <div style={{width:\"100%\"}}>\r\n                <div style={{ display: 'flex',  justifyContent: 'space-between',  alignItems: 'center'}}>\r\n                    <TemplateBreadcrumbs\r\n                        breadcrumbs={arrayBread}\r\n                        handleClick={redirectFunc}\r\n                    />\r\n                </div>\r\n                <TableZyx\r\n                    columns={columns}\r\n                    titlemodule={t(langKeys.integrationmanager_plural, { count: 2 })}\r\n                    data={mainData}\r\n                    ButtonsElement={() => (\r\n                        <Button\r\n                            disabled={mainResult.mainData.loading}\r\n                            variant=\"contained\"\r\n                            type=\"button\"\r\n                            color=\"primary\"\r\n                            startIcon={<ClearIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: \"#FB5F5F\" }}\r\n                            onClick={() => history.push(paths.CONFIGURATION)}\r\n                        >{t(langKeys.back)}</Button>\r\n                    )}\r\n                    onClickRow={handleEdit}\r\n                    download={true}\r\n                    loading={mainResult.mainData.loading}\r\n                    register={true}\r\n                    handleRegister={handleRegister}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    else\r\n        return (\r\n            <DetailIntegrationManager\r\n                data={rowSelected}\r\n                setViewSelected={redirectFunc}\r\n                multiData={mainResult.multiData.data}\r\n                fetchData={fetchData}\r\n                arrayBread={arrayBread}\r\n            />\r\n        )\r\n}\r\n\r\ntype AuthorizationType = {\r\n    type: string,\r\n    username?: string,\r\n    password?: string,\r\n    token?: string\r\n}\r\n\r\ntype FieldType = {\r\n    id?: string,\r\n    name: string,\r\n    key: boolean,\r\n}\r\n\r\ntype FormFields = {\r\n    isnew: boolean,\r\n    apikey: string,\r\n    id: number,\r\n    description: string,\r\n    type: string,\r\n    status: string,\r\n    name: string,\r\n    method: string,\r\n    url: string,\r\n    authorization: AuthorizationType,\r\n    headers: Dictionary[],\r\n    bodytype: string,\r\n    body: string,\r\n    parameters: Dictionary[],\r\n    variables: string[],\r\n    level: string,\r\n    fields: FieldType[],\r\n    operation: string\r\n}\r\n\r\nconst DetailIntegrationManager: React.FC<DetailProps> = ({ data: { row, edit }, setViewSelected, multiData, fetchData, arrayBread }) => {\r\n    const classes = useStyles();\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const executeRes = useSelector(state => state.main.execute);\r\n    const user = useSelector(state => state.login.validateToken.user);\r\n\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n\r\n    const [waitImport, setWaitImport] = useState(false);\r\n    const [waitDelete, setWaitDelete] = useState(false);\r\n\r\n    const mainAuxRes = useSelector(state => state.main.mainAux);\r\n    const [waitView, setWaitView] = useState(false);\r\n    const [openViewTableModal, setOpenViewTableModal] = useState(false);\r\n    const [tableData, setTableData] = useState<any[]>([]);\r\n    const [columnData, setColumnData] = useState<any[]>([]);\r\n\r\n    // const dataStatus = multiData[0] && multiData[0].success ? multiData[0].data : [];\r\n    \r\n    const dataKeys = new Set([...dataLevelKeys, ...(row?.fields?.filter((r: FieldType) => r.key)?.map((r: FieldType) => r.name) || [])]);\r\n\r\n    const { control, register, handleSubmit, setValue, getValues, trigger, formState: { errors } } = useForm<FormFields>({\r\n        defaultValues: {\r\n            isnew: row ? false : true,\r\n            apikey: row && (row.apikey || '') !== '' ? row.apikey : uuidv4(),\r\n            id: row ? row.id : 0,\r\n            description: row ? (row.description || '') : '',\r\n            type: row ? (row.type || 'STANDARD') : 'STANDARD',\r\n            status: row ? (row.status || 'ACTIVO') : 'ACTIVO',\r\n            name: row ? (row.name || '') : '',\r\n            method: row ? (row.method || 'GET') : 'GET',\r\n            url: row ? (row.url || '') : '',\r\n            authorization: row ? (row.authorization || { type: 'NONE' }) : { type: 'NONE' },\r\n            headers: row ? (row.headers || []) : [],\r\n            bodytype: row ? (row.bodytype || 'JSON') : 'JSON',\r\n            body: row ? (row.body || '') : '',\r\n            parameters: row ? (row.parameters || []) : [],\r\n            variables: row ? (row.variables || []) : [],\r\n            level: row ? (row.level || 'CORPORATION') : 'CORPORATION',\r\n            fields: row\r\n            ? (row.fields || [{name: 'corpid', key: true}])\r\n            : [{name: 'corpid', key: true}],\r\n            operation: row ? \"EDIT\" : \"INSERT\",\r\n        }\r\n    });\r\n\r\n    const { fields: headers, append: headersAppend, remove: headersRemove, update: headersUpdate } = useFieldArray({\r\n        control,\r\n        name: \"headers\",\r\n    });\r\n\r\n    const { fields: parameters, append: parametersAppend, remove: parametersRemove, update: parametersUpdate } = useFieldArray({\r\n        control,\r\n        name: \"parameters\",\r\n    });\r\n\r\n    const { fields, append: fieldsAppend, remove: fieldsRemove, update: fieldsUpdate } = useFieldArray({\r\n        control,\r\n        name: \"fields\",\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        register('name', {\r\n            validate: {\r\n                value: (value: any) => (value && value.length) || t(langKeys.field_required),\r\n                basiclatin: (value: any) => getValues('type') !== 'CUSTOM' || validateBasicLatinFieldName(value) || t(langKeys.field_basiclatinlowercase),\r\n            }\r\n        });\r\n        register('type', { validate: (value: any) => (value && value.length) || t(langKeys.field_required) });\r\n        register('method', { validate: (value: any) => (value && value.length) || t(langKeys.field_required) });\r\n    }, [edit, register]);\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeRes.loading && !executeRes.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(row ? langKeys.successful_edit : langKeys.successful_register) }))\r\n                fetchData();\r\n                dispatch(showBackdrop(false));\r\n                setViewSelected(\"view-1\")\r\n            } else if (executeRes.error) {\r\n                const errormessage = t(executeRes.code || \"error_unexpected_error\", { module: t(langKeys.integrationmanager).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            }\r\n        }\r\n    }, [executeRes, waitSave])\r\n\r\n    const onSubmit = handleSubmit((data) => {\r\n        data.variables = data.variables || [];\r\n        if (data.type === 'STANDARD') {\r\n            let v: string[] = [];\r\n            v = extractVariablesFromArray(data.headers, 'value', v);\r\n            if (data.bodytype === 'JSON') {\r\n                v = extractVariables(data.body, v);\r\n            }\r\n            else if (data.bodytype === 'URLENCODED') {\r\n                v = extractVariablesFromArray(data.parameters, 'value', v);\r\n            }\r\n            data.variables = v;\r\n        }\r\n        else if (data.isnew && data.type === 'CUSTOM') {\r\n            if (data.fields.filter(d => !dataLevelKeys.includes(d.name) && d.key === true).length === 0) {\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: t(langKeys.field_key_required) }))\r\n                return null;\r\n            }\r\n            let rex1 = new RegExp(/[^0-9a-zA-Z\\s-_]/,'g');\r\n            let rex2 = new RegExp(/[\\s-]/,'g');\r\n            let corpdesc = (user?.corpdesc || '').replace(rex1, '_').replace(rex2, '_').toLowerCase();\r\n            let orgdesc = (user?.orgdesc || '').replace(rex1, '_').replace(rex2, '_').toLowerCase();\r\n            let name = data.name.replace(rex1, '').replace(rex2, '_').toLowerCase();\r\n            data.url = `${apiUrls.INTEGRATION_URL}/integration_${corpdesc}_${orgdesc}_${name}`;\r\n        }\r\n        \r\n        const callback = () => {\r\n            dispatch(execute(insIntegrationManager(data)));\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true)\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_save),\r\n            callback\r\n        }))\r\n    });\r\n\r\n    const onChangeType = async (data: Dictionary) => {\r\n        setValue('type', data?.key || '');\r\n        await trigger('type');\r\n    }\r\n\r\n    const onChangeMethod = async (data: Dictionary) => {\r\n        setValue('method', data?.key || '');\r\n        await trigger('method');\r\n    }\r\n\r\n    const onChangeAuthorization = async (data: Dictionary) => {\r\n        setValue('authorization.type', data?.key || '');\r\n        await trigger('authorization.type');\r\n    }\r\n\r\n    const onClickAddHeader = async () => {\r\n        headersAppend({ key: '', value: '' });\r\n    }\r\n\r\n    const onClickDeleteHeader = async (index: number) => {\r\n        headersRemove(index);\r\n    }\r\n\r\n    const onBlurHeader = (index: any, param: string, value: any) => {\r\n        headersUpdate(index, { ...headers[index], [param]: value});\r\n    }\r\n\r\n    const onChangeBodyType = async (data: Dictionary) => {\r\n        setValue('bodytype', data?.key || '');\r\n        await trigger('bodytype');\r\n    }\r\n\r\n    const onClickAddParameter = async () => {\r\n        parametersAppend({ key: '', value: '' });\r\n    }\r\n\r\n    const onClickDeleteParameter = async (index: number) => {\r\n        parametersRemove(index);\r\n    }\r\n\r\n    const onBlurParameter = (index: any, param: string, value: any) => {\r\n        parametersUpdate(index, { ...parameters[index], [param]: value});\r\n    }\r\n\r\n    const onChangeBody = (value: string) => {\r\n        setValue('body', value)\r\n    }\r\n\r\n    const onClickBeautify = async () => {\r\n        let data = getValues('body');\r\n        if (isJson(data)) {\r\n            data = JSON.parse(data);\r\n            data = JSON.stringify(data, null, 4);\r\n            setValue('body', '');\r\n            await trigger('body');\r\n            setValue('body', data);\r\n            await trigger('body');\r\n        }\r\n    }\r\n\r\n    const onBlurBody = () => {\r\n        let bodytype = getValues('bodytype');\r\n        if (bodytype === 'JSON') {\r\n            let data = getValues('body');\r\n            validateJSON(data);\r\n        }\r\n    }\r\n\r\n    const validateJSON = (data: string): any => {\r\n        if (!isJson(data)) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const onChangeLevel = async (data: Dictionary) => {\r\n        setValue('level', data?.key || '');\r\n        await trigger('level');\r\n        if (data?.key === 'CORPORATION') {\r\n            setValue('fields', [\r\n                { name: 'corpid', key: true },\r\n                ...getValues('fields').filter(f => !dataLevelKeys.includes(f.name))\r\n            ])\r\n        }\r\n        if (data?.key === 'ORGANIZATION') {\r\n            setValue('fields', [\r\n                { name: 'corpid', key: true },\r\n                { name: 'orgid', key: true },\r\n                ...getValues('fields').filter(f => !dataLevelKeys.includes(f.name))\r\n            ])\r\n        }\r\n    }\r\n\r\n    const onClickAddField = async () => {\r\n        fieldsAppend({ name: '', key: false });\r\n    }\r\n\r\n    const onClickDeleteField = async (index: number) => {\r\n        fieldsRemove(index);\r\n    }\r\n\r\n    const onBlurField = (index: any, param: string, value: any) => {\r\n        fieldsUpdate(index, { ...fields[index], [param]: value});\r\n    }\r\n\r\n    const disableKeys = (field: FieldType, i: number) => {\r\n        if (dataLevelKeys.includes(field?.name)) {\r\n            return true;\r\n        }\r\n        else if (dataKeys.has(field?.name) && !getValues('isnew')) {\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const validateDuplicateFieldName = (field: FieldType, value: string): any => {\r\n        let f = fields.filter((x: FieldType) => x.id !== field.id).map((m: FieldType) => m.name);\r\n        return !f.includes(value);\r\n    }\r\n\r\n    const validateStartwithcharFieldName = (value: string): any => {\r\n        let rex = new RegExp(/[a-z]/,'g');\r\n        return rex.test(value[0]);\r\n    }\r\n\r\n    const validateBasicLatinFieldName = (value: string): any => {\r\n        let rex = new RegExp(/^[a-z\\d]+$/,'g');\r\n        return rex.test(value);\r\n    }\r\n\r\n    const testRequestRes = useSelector(state => state.integrationmanager.request);\r\n    const onClickTest = () => {\r\n        dispatch(request_send(getValues()))\r\n    }\r\n\r\n    const [openDialogDomain, setOpenDialogDomain] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (testRequestRes?.data !== null) {\r\n            setOpenDialogDomain(true);\r\n        }\r\n    }, [testRequestRes])\r\n\r\n    const cleanRequestData = () => {\r\n        dispatch(resetRequest());\r\n    }\r\n\r\n    const onClickInfo = () => {\r\n        downloadJson(\"info\",\r\n            {\r\n                \"url\": `${getValues('url')}/{operation}`,\r\n                \"insert_one\": {\r\n                    \"data\": fields.reduce((a, d) => ({...a, [d.name]: d.name === 'corpid' ? user?.corpid : (d.name === 'orgid' ? user?.orgid : `${d.name}_data1`)}), {})\r\n                },\r\n                \"insert_many\": {\r\n                    \"data\": [\r\n                        fields.reduce((a, d) => ({...a, [d.name]: d.name === 'corpid' ? user?.corpid : (d.name === 'orgid' ? user?.orgid : `${d.name}_data1`)}), {}),\r\n                        fields.reduce((a, d) => ({...a, [d.name]: d.name === 'corpid' ? user?.corpid : (d.name === 'orgid' ? user?.orgid : `${d.name}_data2`)}), {})\r\n                    ]\r\n                },\r\n                \"update\": {\r\n                    \"data\": fields.reduce((a, d) => ({...a, [d.name]: d.name === 'corpid' ? user?.corpid : (d.name === 'orgid' ? user?.orgid : `${d.name}_data2`)}), {}),\r\n                    \"filter\": fields.reduce((a, d) => ({...a, [d.name]: d.name === 'corpid' ? user?.corpid : (d.name === 'orgid' ? user?.orgid : `${d.name}_data1`)}), {})\r\n                },\r\n                \"remove\": {\r\n                    \"filter\": fields.reduce((a, d) => ({...a, [d.name]: d.name === 'corpid' ? user?.corpid : (d.name === 'orgid' ? user?.orgid : `${d.name}_data1`)}), {})\r\n                },\r\n                \"find_one\": {\r\n                    \"filter\": fields.reduce((a, d) => ({...a, [d.name]: d.name === 'corpid' ? user?.corpid : (d.name === 'orgid' ? user?.orgid : `${d.name}_data1`)}), {}),\r\n                    \"sort\": fields.reduce((a, d) => ({...a, [d.name]: \"asc\"}), {})\r\n                },\r\n                \"find_many\": {\r\n                    \"filter\": fields.reduce((a, d) => ({...a, [d.name]: d.name === 'corpid' ? user?.corpid : (d.name === 'orgid' ? user?.orgid : `${d.name}_data1`)}), {}),\r\n                    \"sort\": fields.reduce((a, d) => ({...a, [d.name]: \"asc\"}), {}),\r\n                    \"limit\": 10\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    const handleUpload = async (files: any) => {\r\n        const file = files?.item(0);\r\n        if (file) {\r\n            const data: any = await uploadExcel(file, undefined)\r\n            if (data.length > 0) {\r\n                dispatch(showBackdrop(true));\r\n                dispatch(execute(insarrayIntegrationManager(getValues('id'), data)));\r\n                setWaitImport(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (waitImport) {\r\n            if (!executeRes.loading && !executeRes.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_transaction) }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitImport(false);\r\n            } else if (executeRes.error) {\r\n                const errormessage = t(langKeys.invalid_data)\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitImport(false);\r\n            }\r\n        }\r\n    }, [executeRes, waitImport]);\r\n\r\n    const onDeleteData = () => {\r\n        const callback = () => {\r\n            dispatch(showBackdrop(true));\r\n            dispatch(execute(deldataIntegrationManager(getValues('id'))));\r\n            setWaitDelete(true)\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_delete_data),\r\n            callback\r\n        }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (waitDelete) {\r\n            if (!executeRes.loading && !executeRes.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_delete) }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitDelete(false);\r\n            } else if (executeRes.error) {\r\n                const errormessage = t(executeRes.code || \"error_unexpected_error\", { module: t(langKeys.integrationmanager).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitDelete(false);\r\n            }\r\n        }\r\n    }, [executeRes, waitDelete]);\r\n    \r\n    const handleViewTable = () => {\r\n        dispatch(showBackdrop(true));\r\n        dispatch(getCollectionAux(getdataIntegrationManager(getValues('id'))));\r\n        setWaitView(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (waitView) {\r\n            if (!mainAuxRes.loading && !mainAuxRes.error) {\r\n                dispatch(showBackdrop(false));\r\n                setWaitView(false);\r\n                if (mainAuxRes.data[0]?.data && mainAuxRes.data[0]?.data?.length > 0) {\r\n                    setTableData(mainAuxRes.data[0]?.data);\r\n                    setColumnData(Object.keys(mainAuxRes.data[0].data[0]).map(c => ({\r\n                        Header: c,\r\n                        accessor: c\r\n                    })))\r\n                }\r\n                setOpenViewTableModal(true);\r\n            } else if (mainAuxRes.error) {\r\n                const errormessage = t(mainAuxRes.code || \"error_unexpected_error\", { module: t(langKeys.integration_plural).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitView(false);\r\n            }\r\n        }\r\n    }, [mainAuxRes, waitView]);\r\n\r\n    return (\r\n        <div style={{ width: '100%' }}>\r\n            <form onSubmit={onSubmit}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <div>\r\n                        <TemplateBreadcrumbs\r\n                            breadcrumbs={[...arrayBread, { id: \"view-2\", name: t(langKeys.integrationmanagerdetail) }]}\r\n                            handleClick={setViewSelected}\r\n                        />\r\n                        <TitleDetail\r\n                            title={row ? `${row.name}` : t(langKeys.newintegrationmanager)}\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n                        {getValues('type') === 'STANDARD' &&\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            type=\"button\"\r\n                            color=\"primary\"\r\n                            style={{ backgroundColor: \"#7721AD\" }}\r\n                            onClick={() => onClickTest()}\r\n                        >{t(langKeys.test)}</Button>\r\n                        }\r\n                        {!getValues('isnew') && getValues('type') === 'CUSTOM' && (\r\n                            <React.Fragment>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    type=\"button\"\r\n                                    color=\"primary\"\r\n                                    startIcon={<ListAltIcon color=\"secondary\" />}\r\n                                    style={{ backgroundColor: \"#7721AD\" }}\r\n                                    onClick={handleViewTable}\r\n                                >{t(langKeys.view_table)}</Button>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    type=\"button\"\r\n                                    color=\"primary\"\r\n                                    startIcon={<DeleteIcon color=\"secondary\" />}\r\n                                    style={{ backgroundColor: \"#FB5F5F\" }}\r\n                                    onClick={onDeleteData}\r\n                                >{t(langKeys.deletedata)}</Button>\r\n                                <input\r\n                                    accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,.csv\"\r\n                                    id=\"uploadfile\"\r\n                                    type=\"file\"\r\n                                    style={{ display: 'none' }}\r\n                                    onChange={(e) => handleUpload(e.target.files)}\r\n                                />\r\n                                <label htmlFor=\"uploadfile\">\r\n                                    <Button\r\n                                        className={classes.button}\r\n                                        variant=\"contained\"\r\n                                        component=\"span\"\r\n                                        color=\"primary\"\r\n                                        startIcon={<BackupIcon color=\"secondary\" />}\r\n                                        style={{ backgroundColor: \"#55BD84\" }}\r\n                                    >{t(langKeys.import)}</Button>\r\n                                </label>\r\n                            </React.Fragment>\r\n                        )}\r\n                        {getValues('type') === 'CUSTOM' &&\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            type=\"button\"\r\n                            color=\"primary\"\r\n                            startIcon={<InfoIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: \"#7721AD\" }}\r\n                            onClick={() => onClickInfo()}\r\n                        >{t(langKeys.info)}</Button>\r\n                        }\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            type=\"button\"\r\n                            color=\"primary\"\r\n                            startIcon={<ClearIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: \"#FB5F5F\" }}\r\n                            onClick={() => setViewSelected(\"view-1\")}\r\n                        >{t(langKeys.back)}</Button>\r\n                        {edit &&\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                startIcon={<SaveIcon color=\"secondary\" />}\r\n                                style={{ backgroundColor: \"#55BD84\" }}\r\n                            >{t(langKeys.save)}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className={classes.containerDetail}>\r\n                <div className=\"row-zyx\">\r\n                        {(edit && getValues('isnew')) ?\r\n                            <FieldEdit\r\n                                label={t(langKeys.name)}\r\n                                className=\"col-12\"\r\n                                valueDefault={getValues('name')}\r\n                                onChange={(value) => setValue('name', value)}\r\n                                error={errors?.name?.message}\r\n                            />\r\n                            :\r\n                            <FieldView\r\n                                label={t(langKeys.name)}\r\n                                value={row?.name || \"\"}\r\n                                className=\"col-12\"\r\n                            />\r\n                        }\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        {(edit && getValues('isnew')) ?\r\n                            <FieldSelect\r\n                                uset={true}\r\n                                label={t(langKeys.type)}\r\n                                className=\"col-12\"\r\n                                valueDefault={getValues('type')}\r\n                                onChange={onChangeType}\r\n                                error={errors?.type?.message}\r\n                                data={dictToArrayKV(dataIntegrationType)}\r\n                                optionDesc=\"value\"\r\n                                optionValue=\"key\"\r\n                            />\r\n                            :\r\n                            <FieldView\r\n                                label={t(langKeys.type)}\r\n                                value={t(dataIntegrationType[row?.type]) || \"\"}\r\n                                className=\"col-12\"\r\n                            />\r\n                        }\r\n                    </div>\r\n                    {getValues('type') === 'STANDARD' ?\r\n                    <React.Fragment>\r\n                        <div className=\"row-zyx\">\r\n                            {edit ?\r\n                                <React.Fragment>\r\n                                    <FieldSelect\r\n                                        fregister={{...register(`method`, {\r\n                                            validate: (value: any) => (value && value.length) || t(langKeys.field_required)\r\n                                        })}}\r\n                                        label={t(langKeys.requesttype)}\r\n                                        className={classes.selectInput1}\r\n                                        valueDefault={getValues('method')}\r\n                                        onChange={onChangeMethod}\r\n                                        error={errors?.method?.message}\r\n                                        data={dictToArrayKV(dataMethodType)}\r\n                                        optionDesc=\"value\"\r\n                                        optionValue=\"key\"\r\n                                    />\r\n                                    <FieldEdit\r\n                                        fregister={{...register(`url`, {\r\n                                            validate: (value: any) => (value && value.length) || t(langKeys.field_required)\r\n                                        })}}\r\n                                        label={t(langKeys.url)}\r\n                                        className={classes.selectInput2}\r\n                                        valueDefault={getValues('url')}\r\n                                        onChange={(value) => setValue('url', value)}\r\n                                        error={errors?.url?.message}\r\n                                    />\r\n                                </React.Fragment>\r\n                                :\r\n                                <FieldView\r\n                                    label={t(langKeys.url)}\r\n                                    value={row?.url || \"\"}\r\n                                    className=\"col-12\"\r\n                                />\r\n                            }\r\n                        </div>\r\n                        <div className=\"row-zyx\">\r\n                            <FieldSelect\r\n                                uset={true}\r\n                                fregister={{...register(`authorization.type`, {\r\n                                    validate: (value: any) => (value && value.length) || t(langKeys.field_required)\r\n                                })}}       \r\n                                label={t(langKeys.authorization)}\r\n                                valueDefault={getValues('authorization.type')}\r\n                                onChange={onChangeAuthorization}\r\n                                error={errors?.authorization?.type?.message}\r\n                                data={dictToArrayKV(dataAuthorizationType)}\r\n                                optionDesc=\"value\"\r\n                                optionValue=\"key\"\r\n                            />\r\n                        </div>\r\n                        {getValues('authorization.type') === 'BASIC' ?\r\n                            <div className=\"row-zyx\">\r\n                                <React.Fragment>\r\n                                    <FieldEdit\r\n                                        fregister={{...register(`authorization.username`, { validate: (value:any) => getValues('authorization.type')===\"BASIC\"?((value && value.length) || t(langKeys.field_required)):null })}}\r\n                                        label={t(langKeys.username)}\r\n                                        className=\"col-6\"\r\n                                        valueDefault={getValues('authorization.username')}\r\n                                        onChange={(value) => setValue('authorization.username', value)}\r\n                                        error={errors?.authorization?.username?.message}\r\n                                    />\r\n                                    <FieldEdit\r\n                                        fregister={{...register(`authorization.password`, { validate: (value:any) => getValues('authorization.type')===\"BASIC\"?((value && value.length) || t(langKeys.field_required)):null })}}\r\n                                        label={t(langKeys.password)}\r\n                                        className=\"col-6\"\r\n                                        valueDefault={getValues('authorization.password')}\r\n                                        onChange={(value) => setValue('authorization.password', value)}\r\n                                        error={errors?.authorization?.password?.message}\r\n                                    />\r\n                                </React.Fragment>\r\n                            </div>\r\n                            :\r\n                            null\r\n                        }\r\n                        {getValues('authorization.type') === 'BEARER' ?\r\n                            <div className=\"row-zyx\">\r\n                                {edit ?\r\n                                    <FieldEdit\r\n                                        fregister={{...register(`authorization.token`, { validate: (value:any) => getValues('authorization.type')===\"BEARER\"?((value && value.length) || t(langKeys.field_required)):null })}}\r\n                                        label={t(langKeys.token)}\r\n                                        className=\"col-12\"\r\n                                        valueDefault={getValues('authorization.token')}\r\n                                        onChange={(value) => setValue('authorization.token', value)}\r\n                                        error={errors?.authorization?.token?.message}\r\n                                    />\r\n                                    :\r\n                                    <FieldView\r\n                                        label={t(langKeys.token)}\r\n                                        value={row?.authorization?.token || \"\"}\r\n                                        className=\"col-12\"\r\n                                    />\r\n                                }\r\n                            </div>\r\n                            :\r\n                            null\r\n                        }\r\n                        <div className=\"row-zyx\" style={{ alignItems: 'flex-end' }}>\r\n                            <React.Fragment>\r\n                                <FieldView\r\n                                    label={t(langKeys.header)}\r\n                                    className={classes.labelButton1}\r\n                                />\r\n                                {edit ?\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        type=\"button\"\r\n                                        color=\"primary\"\r\n                                        className={classes.labelButton2}\r\n                                        startIcon={<AddIcon color=\"primary\" />}\r\n                                        onClick={() => onClickAddHeader()}\r\n                                    >{t(langKeys.addheader)}</Button>\r\n                                    :\r\n                                    null\r\n                                }\r\n                            </React.Fragment>\r\n                        </div>\r\n                        {edit ?\r\n                            headers?.map((field: any, i: number) => {\r\n                                return (\r\n                                    <div className=\"row-zyx\" key={field.id}>\r\n                                        <FieldEdit\r\n                                            label={t(langKeys.key)}\r\n                                            className={classes.fieldRow}\r\n                                            valueDefault={field?.key || \"\"}\r\n                                            onBlur={(value) => onBlurHeader(i, 'key', value)}\r\n                                            error={errors?.headers?.[i]?.key?.message}\r\n                                        />\r\n                                        <FieldEdit\r\n                                            label={t(langKeys.value)}\r\n                                            className={classes.fieldRow}\r\n                                            valueDefault={field?.value || \"\"}\r\n                                            onBlur={(value) => onBlurHeader(i, 'value', value)}\r\n                                            error={errors?.headers?.[i]?.value?.message}\r\n                                        />\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            className={classes.fieldButton}\r\n                                            onClick={() => onClickDeleteHeader(i)}>\r\n                                            <DeleteIcon style={{ color: '#000000'}} />\r\n                                        </IconButton>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        :\r\n                        headers?.map((field: any, i: number) => {\r\n                            return (\r\n                                <div className=\"row-zyx\" key={field.id}>\r\n                                    <FieldView\r\n                                        label={t(langKeys.key)}\r\n                                        value={field?.key || \"\"}\r\n                                        className=\"col-12\"\r\n                                    />\r\n                                    <FieldView\r\n                                        label={t(langKeys.value)}\r\n                                        value={field?.value || \"\"}\r\n                                        className=\"col-12\"\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                        {getValues('method') === 'POST' ?\r\n                        <div className=\"row-zyx\">\r\n                            {edit ?\r\n                                <React.Fragment>\r\n                                    <FieldSelect\r\n                                        fregister={{...register(`bodytype`, {\r\n                                            validate: (value: any) => (value && value.length) || t(langKeys.field_required)\r\n                                        })}}\r\n                                        label={t(langKeys.bodytype)}\r\n                                        className={classes.selectInput1}\r\n                                        valueDefault={getValues('bodytype')}\r\n                                        onChange={onChangeBodyType}\r\n                                        error={errors?.bodytype?.message}\r\n                                        data={dictToArrayKV(dataBodyType)}\r\n                                        optionDesc=\"value\"\r\n                                        optionValue=\"key\"\r\n                                    />\r\n                                    {getValues('bodytype') === 'JSON' ?\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        type=\"button\"\r\n                                        color=\"primary\"\r\n                                        className={classes.labelButton2}\r\n                                        onClick={() => onClickBeautify()}\r\n                                    >{t(langKeys.beautify)}</Button>\r\n                                    : null}\r\n                                    {getValues('bodytype') === 'URLENCODED' ?\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        type=\"button\"\r\n                                        color=\"primary\"\r\n                                        className={classes.labelButton2}\r\n                                        startIcon={<AddIcon color=\"primary\" />}\r\n                                        onClick={() => onClickAddParameter()}\r\n                                    >{t(langKeys.addparameter)}</Button>\r\n                                    : null}\r\n                                </React.Fragment>\r\n                                :\r\n                                <FieldView\r\n                                    label={t(langKeys.bodytype)}\r\n                                    value={row ? (row.bodytype || \"\") : \"\"}\r\n                                    className=\"col-12\"\r\n                                />\r\n                            }\r\n                        </div>\r\n                        : null}\r\n                        {(getValues('method') === 'POST'\r\n                        && getValues('bodytype') === 'JSON') ?\r\n                        <div className=\"row-zyx\">\r\n                            {edit ?\r\n                                <FieldEditMulti\r\n                                    fregister={{...register(`body`, {\r\n                                        validate: {\r\n                                            value: (value: any) => (value && value.length) || t(langKeys.field_required),\r\n                                            invalid: (value: any) => validateJSON(value) || t(langKeys.invalidjson)\r\n                                        }\r\n                                    })}}    \r\n                                    label={t(langKeys.body)}\r\n                                    className=\"col-12\"\r\n                                    valueDefault={getValues('body')}\r\n                                    onChange={onChangeBody}\r\n                                    onBlur={onBlurBody}\r\n                                    error={errors?.body?.message}\r\n                                    rows={8}\r\n                                />\r\n                                :\r\n                                <FieldView\r\n                                    label={t(langKeys.body)}\r\n                                    value={row ? (row.body || \"\") : \"\"}\r\n                                    className=\"col-12\"\r\n                                />\r\n                            }\r\n                        </div>\r\n                        : null}\r\n                        {(getValues('method') === 'POST'\r\n                        && getValues('bodytype') === 'URLENCODED') ?\r\n                            <React.Fragment>\r\n                                {edit ?\r\n                                    parameters?.map((field: any, i: number) => {\r\n                                        return (\r\n                                            <div className=\"row-zyx\" key={field.id}>\r\n                                                <FieldEdit\r\n                                                    label={t(langKeys.key)}\r\n                                                    className={classes.fieldRow}\r\n                                                    valueDefault={field?.key || \"\"}\r\n                                                    onBlur={(value) => onBlurParameter(i, 'key', value)}\r\n                                                    error={errors?.parameters?.[i]?.key?.message}\r\n                                                />\r\n                                                <FieldEdit\r\n                                                    label={t(langKeys.value)}\r\n                                                    className={classes.fieldRow}\r\n                                                    valueDefault={field?.value || \"\"}\r\n                                                    onBlur={(value) => onBlurParameter(i, 'value', value)}\r\n                                                    error={errors?.parameters?.[i]?.value?.message}\r\n                                                />\r\n                                                <IconButton\r\n                                                    size=\"small\"\r\n                                                    className={classes.fieldButton}\r\n                                                    onClick={() => onClickDeleteParameter(i)}>\r\n                                                    <DeleteIcon style={{ color: '#000000'}} />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                : parameters?.map((field: any, i: number) => {\r\n                                    return (\r\n                                        <div className=\"row-zyx\" key={field.id}>\r\n                                            <FieldView\r\n                                                label={t(langKeys.key)}\r\n                                                value={field?.key || \"\"}\r\n                                                className=\"col-12\"\r\n                                            />\r\n                                            <FieldView\r\n                                                label={t(langKeys.value)}\r\n                                                value={field?.value || \"\"}\r\n                                                className=\"col-12\"\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                                }\r\n                            </React.Fragment>\r\n                        : null}\r\n                    </React.Fragment>\r\n                    : null}\r\n\r\n                    {getValues('type') === 'CUSTOM' ?\r\n                    <React.Fragment>\r\n                        <div className=\"row-zyx\">\r\n                            {(edit && getValues('isnew')) ?\r\n                                <React.Fragment>\r\n                                    <FieldEdit\r\n                                        label={t(langKeys.url)}\r\n                                        className=\"col-12\"\r\n                                        valueDefault={getValues('url')}\r\n                                        disabled={true}\r\n                                        error={errors?.url?.message}\r\n                                    />\r\n                                </React.Fragment>\r\n                                :\r\n                                <FieldView\r\n                                    label={t(langKeys.url)}\r\n                                    value={row?.url || \"\"}\r\n                                    className=\"col-12\"\r\n                                />\r\n                            }\r\n                        </div>\r\n                        <div className=\"row-zyx\">\r\n                            {(edit && getValues('isnew')) ?\r\n                                <FieldEdit\r\n                                    label={t(langKeys.apikey)}\r\n                                    className=\"col-12\"\r\n                                    valueDefault={getValues('apikey')}\r\n                                    disabled={true}\r\n                                    error={errors?.apikey?.message}\r\n                                />\r\n                                :\r\n                                <FieldView\r\n                                    label={t(langKeys.apikey)}\r\n                                    value={row?.apikey || \"\"}\r\n                                    className=\"col-12\"\r\n                                />\r\n                            }\r\n                        </div>\r\n                        <div className=\"row-zyx\">\r\n                            {(edit && getValues('isnew')) ?\r\n                                <FieldSelect\r\n                                    uset={true}\r\n                                    fregister={{...register(`level`, {\r\n                                        validate: (value: any) => (value && value.length) || t(langKeys.field_required)\r\n                                    })}}    \r\n                                    label={t(langKeys.level)}\r\n                                    className=\"col-12\"\r\n                                    valueDefault={getValues('level')}\r\n                                    onChange={onChangeLevel}\r\n                                    error={errors?.level?.message}\r\n                                    data={dictToArrayKV(dataLevel)}\r\n                                    optionDesc=\"value\"\r\n                                    optionValue=\"key\"\r\n                                />\r\n                                :\r\n                                <FieldView\r\n                                    label={t(langKeys.level)}\r\n                                    value={t(dataLevel[row?.level]) || \"\"}\r\n                                    className=\"col-12\"\r\n                                />\r\n                            }\r\n                        </div>\r\n                        <div className=\"row-zyx\" style={{ alignItems: 'flex-end' }}>\r\n                            {edit ?\r\n                                <React.Fragment>\r\n                                    <FieldView\r\n                                        label={t(langKeys.tablelayout)}\r\n                                        className={classes.labelButton1}\r\n                                    />\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        type=\"button\"\r\n                                        color=\"primary\"\r\n                                        className={classes.labelButton2}\r\n                                        startIcon={<AddIcon color=\"primary\" />}\r\n                                        onClick={() => onClickAddField()}\r\n                                    >{t(langKeys.addfield)}</Button>\r\n                                </React.Fragment>\r\n                                :\r\n                                <FieldView\r\n                                    label={t(langKeys.tablelayout)}\r\n                                    className=\"col-12\"\r\n                                />\r\n                            }\r\n                        </div>\r\n                        {edit ?\r\n                            fields?.map((field: any, i: number) => {\r\n                                return (\r\n                                    <div className=\"row-zyx\" key={field.id}>\r\n                                        <FieldEdit\r\n                                            fregister={{...register(`fields.${i}.name`, {\r\n                                                validate: {\r\n                                                    value: (value: any) => (value && value.length) || t(langKeys.field_required),\r\n                                                    duplicate: (value: any) => validateDuplicateFieldName(field, value) || t(langKeys.field_duplicate),\r\n                                                    startwithchar: (value: any) => validateStartwithcharFieldName(value) || t(langKeys.field_startwithchar),\r\n                                                    basiclatin: (value: any) => validateBasicLatinFieldName(value) || t(langKeys.field_basiclatinlowercase),\r\n                                                }\r\n                                            })}}\r\n                                            label={t(langKeys.name)}\r\n                                            className={classes.fieldRow}\r\n                                            valueDefault={field?.name || \"\"}\r\n                                            disabled={disableKeys(field, i)}\r\n                                            onBlur={(value) => onBlurField(i, 'name', value)}\r\n                                            error={errors?.fields?.[i]?.name?.message}\r\n                                        />\r\n                                        {getValues('isnew') ?\r\n                                        <FieldCheckbox\r\n                                            label={t(langKeys.key)}\r\n                                            className={`${classes.checkboxRow}`}\r\n                                            valueDefault={field?.key}\r\n                                            disabled={disableKeys(field, i)}\r\n                                            onChange={(value) => onBlurField(i, 'key', value)}\r\n                                            error={errors?.fields?.[i]?.key?.message}\r\n                                        />\r\n                                        : null}\r\n                                        {!disableKeys(field, i) ?\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            className={classes.fieldButton}\r\n                                            onClick={() => onClickDeleteField(i)}>\r\n                                            <DeleteIcon style={{ color: '#000000'}} />\r\n                                        </IconButton>\r\n                                        : null}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        :\r\n                        fields?.map((fields: any, i: number) => {\r\n                            return (\r\n                                <div className=\"row-zyx\" key={fields.id}>\r\n                                    <FieldView\r\n                                        label={t(langKeys.name)}\r\n                                        value={fields?.name || \"\"}\r\n                                        className=\"col-12\"\r\n                                    />\r\n                                    <FieldView\r\n                                        label={t(langKeys.order)}\r\n                                        value={fields?.order || \"\"}\r\n                                        className=\"col-12\"\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </React.Fragment>\r\n                    : null}\r\n                </div>\r\n            </form>\r\n\r\n            <ModalIntegrationManager\r\n                data={testRequestRes.data}\r\n                openModal={openDialogDomain}\r\n                setOpenModal={setOpenDialogDomain}\r\n                cleanModalData={cleanRequestData}\r\n            />\r\n\r\n            <ModalViewTable\r\n                openModal={openViewTableModal}\r\n                setOpenModal={setOpenViewTableModal}\r\n                columns={columnData}\r\n                data={tableData}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface ModalProps {\r\n    data: any;\r\n    openModal: boolean;\r\n    setOpenModal: (open: boolean) => void;\r\n    cleanModalData: () => void;\r\n}\r\n\r\nconst ModalIntegrationManager: React.FC<ModalProps> = ({ data, openModal, setOpenModal, cleanModalData }) => {\r\n    const { t } = useTranslation();\r\n    \r\n    return (\r\n        <DialogZyx\r\n            open={openModal}\r\n            title={t(langKeys.result)}\r\n            buttonText2={t(langKeys.back)}\r\n            handleClickButton2={() => {\r\n                cleanModalData();\r\n                setOpenModal(false);\r\n            }}\r\n            button2Type=\"button\"\r\n        >\r\n            <div className=\"row-zyx\">\r\n                {JSON.stringify(data, null, 4)}\r\n            </div>\r\n        </DialogZyx>\r\n    )\r\n}\r\n\r\ninterface ViewTableModalProps {\r\n    openModal: boolean;\r\n    setOpenModal: (value: boolean) => any;\r\n    columns: Dictionary[];\r\n    data: Dictionary[];\r\n}\r\n\r\nconst ModalViewTable: React.FC<ViewTableModalProps> = ({ openModal, setOpenModal, columns = [], data = [] }) => {\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCancelModal = () => {\r\n        setOpenModal(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(resetMainAux());\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <DialogZyx\r\n            title=''    \r\n            open={openModal}\r\n            maxWidth=\"lg\"\r\n            button1Type=\"button\"\r\n            buttonText1={t(langKeys.close)}\r\n            handleClickButton1={handleCancelModal}\r\n        >\r\n            <TableZyx\r\n                columns={columns}\r\n                data={data}\r\n                download={true}\r\n                pageSizeDefault={20}\r\n                filterGeneral={false}\r\n            />\r\n        </DialogZyx>\r\n    )\r\n}\r\n\r\nexport default IntegrationManager;","import { IActionCall } from \"@types\";\r\nimport { CommonService } from \"network\";\r\nimport actionTypes from \"./actionTypes\";\r\n\r\nexport const request_send = (request: any): IActionCall => ({\r\n    callAPI: () => CommonService.request_send(request),\r\n    types: {\r\n        loading: actionTypes.REQUEST_SEND,\r\n        success: actionTypes.REQUEST_SUCCESS,\r\n        failure: actionTypes.REQUEST_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetRequest = (): IActionCall => ({type: actionTypes.REQUEST_RESET});","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;"],"sourceRoot":""}