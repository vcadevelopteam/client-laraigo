{"version":3,"sources":["pages/InputValidation.tsx","../node_modules/@material-ui/icons/Clear.js","../node_modules/@material-ui/icons/Save.js"],"names":["useStyles","makeStyles","theme","containerDetail","marginTop","spacing","padding","background","button","fontWeight","fontSize","textTransform","DetailInputValidation","data","row","edit","setViewSelected","fetchData","arrayBread","classes","useState","waitSave","setWaitSave","executeRes","useSelector","state","main","execute","dispatch","useDispatch","t","useTranslation","useForm","defaultValues","type","id","inputvalidationid","description","inputvalue","operation","status","register","handleSubmit","setValue","errors","formState","React","useEffect","validate","value","length","langKeys","field_required","loading","error","showSnackbar","show","severity","message","inputvalidationerror","showBackdrop","successful_edit","successful_register","onSubmit","manageConfirmation","visible","question","confirmation_save","callback","inputValidationins","style","width","display","justifyContent","breadcrumbs","name","inputvalidation","detail","handleClick","title","newinputvalidation","gap","alignItems","variant","color","startIcon","backgroundColor","onClick","back","className","save","label","onChange","valueDefault","InputValidation","history","useHistory","mainResult","executeResult","viewSelected","rowSelected","setRowSelected","configuration_plural","redirectFunc","view","push","paths","CONFIGURATION","columns","useMemo","accessor","NoFilter","isComponent","minWidth","Cell","props","cell","original","extraOption","duplicate","deleteFunction","handleDelete","editFunction","handleEdit","extraFunction","handleDuplicate","ExtraICon","fill","Header","getCollection","getInputValidationSel","resetAllMain","successful_delete","confirmation_delete","titlemodule","count","mainData","download","ButtonsElement","disabled","onClickRow","handleRegister","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","_default","createElement","d"],"mappings":"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","file":"static/js/78.fb960b95.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { FC, useEffect, useState } from 'react'; // we need this to make JSX compile\r\nimport { useSelector } from 'hooks';\r\nimport { useDispatch } from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport { TemplateIcons, TemplateBreadcrumbs, TitleDetail, FieldEdit } from 'components';\r\nimport { getInputValidationSel, inputValidationins } from 'common/helpers';\r\nimport { Dictionary } from \"@types\";\r\nimport TableZyx from '../components/fields/table-simple';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { langKeys } from 'lang/keys';\r\nimport { useForm } from 'react-hook-form';\r\nimport { getCollection, resetAllMain, execute } from 'store/main/actions';\r\nimport { showSnackbar, showBackdrop, manageConfirmation } from 'store/popus/actions';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { DuplicateIcon } from 'icons';\r\nimport { useHistory } from 'react-router-dom';\r\nimport paths from 'common/constants/paths';\r\n\r\ninterface RowSelected {\r\n    row: Dictionary | null,\r\n    edit: boolean\r\n}\r\ninterface DetailInputValidationProps {\r\n    data: RowSelected;\r\n    setViewSelected: (view: string) => void;\r\n    fetchData: () => void;\r\n    arrayBread:any;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    containerDetail: {\r\n        marginTop: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n        background: '#fff',\r\n    },\r\n    button: {\r\n        padding: 12,\r\n        fontWeight: 500,\r\n        fontSize: '14px',\r\n        textTransform: 'initial'\r\n    },\r\n}));\r\n\r\nconst DetailInputValidation: React.FC<DetailInputValidationProps> = ({ data: { row, edit }, setViewSelected, fetchData,arrayBread }) => {\r\n    const classes = useStyles();\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const executeRes = useSelector(state => state.main.execute);\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n\r\n    const { register, handleSubmit, setValue, formState: { errors } } = useForm({\r\n        defaultValues: {\r\n            type: 'NINGUNO',\r\n            id: edit?(row?.inputvalidationid || 0):0,\r\n            description: edit?(row?.description || \"\"):\"\",\r\n            inputvalue: row?.inputvalue || '',\r\n            operation: edit?(row ? \"EDIT\" : \"INSERT\"):\"INSERT\",\r\n            status: \"ACTIVO\",\r\n        }\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        register('type');\r\n        register('id');\r\n        register('description', { validate: (value) => (value && value.length) || t(langKeys.field_required) });\r\n        register('inputvalue', { validate: (value) => (value && value.length) || t(langKeys.field_required) });\r\n    }, [edit, register]);\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeRes.loading && !executeRes.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(row ? langKeys.successful_edit : langKeys.successful_register) }))\r\n                fetchData && fetchData();\r\n                dispatch(showBackdrop(false));\r\n                setViewSelected(\"view-1\")\r\n            } else if (executeRes.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: `23505: ${t(langKeys.inputvalidationerror)}` }))\r\n                setWaitSave(false);\r\n                dispatch(showBackdrop(false));\r\n            }\r\n        }\r\n    }, [executeRes, waitSave])\r\n    \r\n    const onSubmit = handleSubmit((data) => {\r\n        const callback = () => {\r\n            dispatch(execute(inputValidationins(data)));\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true)\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_save),\r\n            callback\r\n        }))\r\n    });\r\n\r\n    return (\r\n        <div style={{width: '100%'}}>\r\n            <form onSubmit={onSubmit}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <div>\r\n                        <TemplateBreadcrumbs\r\n                            breadcrumbs={[...arrayBread, { id: \"view-2\", name: `${t(langKeys.inputvalidation)} ${t(langKeys.detail)}` }]}\r\n                            handleClick={setViewSelected}\r\n                        />\r\n                        <TitleDetail\r\n                            title={edit?(row ? `${row.description}` : t(langKeys.newinputvalidation)): t(langKeys.newinputvalidation)}\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center'  }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            type=\"button\"\r\n                            color=\"primary\"\r\n                            startIcon={<ClearIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: \"#FB5F5F\" }}\r\n                            onClick={() => setViewSelected(\"view-1\")}\r\n                        >{t(langKeys.back)}</Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            startIcon={<SaveIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: \"#55BD84\" }}\r\n                        >{t(langKeys.save)}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.containerDetail}>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldEdit\r\n                            label={t(langKeys.description)} \r\n                            className=\"col-6\"\r\n                            onChange={(value) => setValue('description', value)}\r\n                            valueDefault={edit?(row?.description || \"\") : \"\"}\r\n                            error={errors?.description?.message}\r\n                        />\r\n                        <FieldEdit\r\n                            label={t(langKeys.value)} \r\n                            className=\"col-6\"\r\n                            onChange={(value) => setValue('inputvalue', value)}\r\n                            valueDefault={row?.inputvalue || \"\"}\r\n                            error={errors?.inputvalue?.message}\r\n                        />\r\n                    </div>\r\n                    \r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst InputValidation: FC = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n    const mainResult = useSelector(state => state.main);\r\n    const executeResult = useSelector(state => state.main.execute);\r\n\r\n    const [viewSelected, setViewSelected] = useState(\"view-1\");\r\n    const [rowSelected, setRowSelected] = useState<RowSelected>({ row: null, edit: false });\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const arrayBread = [\r\n        { id: \"view-0\", name: t(langKeys.configuration_plural) },\r\n        { id: \"view-1\", name: t(langKeys.inputvalidation) },\r\n    ];\r\n    function redirectFunc(view:string){\r\n        if(view ===\"view-0\"){\r\n            history.push(paths.CONFIGURATION)\r\n            return;\r\n        }\r\n        setViewSelected(view)\r\n    }\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                accessor: 'inputvalidationid',\r\n                NoFilter: true,\r\n                isComponent: true,\r\n                minWidth:60,\r\n                width: '1%',\r\n                Cell: (props: any) => {\r\n                    const row = props.cell.row.original;\r\n                    return (\r\n                        <TemplateIcons\r\n                            extraOption={t(langKeys.duplicate)}\r\n                            // viewFunction={() => history.push(`/properties/${row.GroupConfigid}`)}\r\n                            deleteFunction={() => handleDelete(row)}\r\n                            editFunction={() => handleEdit(row)}\r\n                            extraFunction={() => handleDuplicate(row)}\r\n                            ExtraICon={() => <DuplicateIcon width={28} style={{ fill: '#7721AD' }} />}\r\n                        />\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                Header: t(langKeys.description),\r\n                accessor: 'description',\r\n                NoFilter: true,\r\n                width: '25%',\r\n            },\r\n            {\r\n                Header: t(langKeys.value),\r\n                accessor: 'inputvalue',\r\n                NoFilter: true,\r\n            },\r\n            \r\n        ],\r\n        [t]\r\n    );\r\n\r\n    const fetchData = () => dispatch(getCollection(getInputValidationSel(0)));\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n        return () => {\r\n            dispatch(resetAllMain());\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeResult.loading && !executeResult.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_delete) }))\r\n                fetchData();\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            } else if (executeResult.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: `23505: ${t(langKeys.inputvalidationerror)}` }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            }\r\n        }\r\n    }, [executeResult, waitSave])\r\n\r\n    const handleRegister = () => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row: null, edit: true });\r\n    }\r\n\r\n    const handleDuplicate = (row: Dictionary) => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row, edit: false });\r\n    }\r\n\r\n    const handleEdit = (row: Dictionary) => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row, edit: true });\r\n    }\r\n\r\n    const handleDelete = (row: Dictionary) => {\r\n        const callback = () => {\r\n            dispatch(execute(inputValidationins({ ...row, operation: 'DELETE', status: 'ELIMINADO', id: row.inputvalidationid })));\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true);\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_delete),\r\n            callback\r\n        }))\r\n    }\r\n\r\n    if (viewSelected === \"view-1\") {\r\n\r\n        return (\r\n            <div style={{width:\"100%\"}}>\r\n                <div style={{ display: 'flex',  justifyContent: 'space-between',  alignItems: 'center'}}>\r\n                    <TemplateBreadcrumbs\r\n                        breadcrumbs={arrayBread}\r\n                        handleClick={redirectFunc}\r\n                    />\r\n                </div>\r\n                <TableZyx\r\n                    columns={columns}\r\n                    titlemodule={t(langKeys.inputvalidation, { count: 2 })}\r\n                    data={mainResult.mainData.data}\r\n                    download={true}\r\n                    ButtonsElement={() => (\r\n                        <Button\r\n                            disabled={mainResult.mainData.loading}\r\n                            variant=\"contained\"\r\n                            type=\"button\"\r\n                            color=\"primary\"\r\n                            startIcon={<ClearIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: \"#FB5F5F\" }}\r\n                            onClick={() => history.push(paths.CONFIGURATION)}\r\n                        >{t(langKeys.back)}</Button>\r\n                    )}\r\n                    onClickRow={handleEdit}\r\n                    loading={mainResult.mainData.loading}\r\n                    register={true}\r\n                    handleRegister={handleRegister}\r\n                // fetchData={fetchData}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    else if (viewSelected === \"view-2\") {\r\n        return (\r\n            <DetailInputValidation\r\n                data={rowSelected}\r\n                setViewSelected={redirectFunc}\r\n                fetchData={fetchData}\r\n                arrayBread={arrayBread}\r\n            />\r\n        )\r\n    } else\r\n        return null;\r\n\r\n}\r\n\r\nexport default InputValidation;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');\n\nexports.default = _default;"],"sourceRoot":""}