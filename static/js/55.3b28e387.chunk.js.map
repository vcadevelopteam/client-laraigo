{"version":3,"sources":["../node_modules/@material-ui/icons/YouTube.js","pages/channels/ChannelAddYouTube.tsx","store/channel/actions.ts","../node_modules/@react-oauth/google/dist/index.esm.js","store/google/actions.ts","pages/channels/GoogleLogInFrame.tsx"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","useChannelAddStyles","makeStyles","theme","button","padding","fontWeight","fontSize","textTransform","width","buttonGoogle","justifyContent","ChannelAddYouTube","dispatch","useDispatch","t","useTranslation","classes","exchangeCodeResult","useSelector","state","google","requestExchangeCode","executeResult","channel","successinsert","history","useHistory","listYouTubeResult","requestListYouTube","location","useLocation","mainResult","channelList","whatsAppData","useState","channellist","setChannellist","channelreg","setChannelreg","coloricon","setcoloricon","fields","setFields","nextbutton","setNextbutton","setins","setsetins","viewSelected","setViewSelected","waitExchange","setWaitExchange","waitList","setWaitList","waitSave","setWaitSave","a","insertChannel","useEffect","loading","error","showSnackbar","show","severity","message","msg","code","langKeys","success","data","partialFields","service","accesstoken","access_token","idtoken","id_token","refreshtoken","refresh_token","scope","tokentype","token_type","listYouTube","showBackdrop","items","forEach","element","channelname","id","successful_register","push","paths","CHANNELS","errormessage","module","property","toLocaleLowerCase","name","content","apiUrls","GOOGLECLIENTID_CHANNEL","src","async","defer","style","color","href","onClick","e","preventDefault","CHANNELS_ADD","previoustext","textAlign","channel_youtubetitle","channel_youtubealert1","channel_youtubealert2","display","alignContent","alignItems","clientId","paddingTop","fontStyle","connectface4","paddingBottom","cursor","window","open","rel","privacypoliciestitle","className","onChange","partialf","setchannelField","label","selectchannellink","valueDefault","optionDesc","optionValue","paddingLeft","variant","disabled","next","marginLeft","marginRight","maxWidth","commchannelfinishreg","parameters","description","setnameField","givechannelname","lineHeight","mb","givechannelcolor","fill","height","hex","prev","finishreg","getChannelsList","accessToken","appId","callAPI","ChannelsService","getPagelist","types","actionTypes","CHANNELS_SUCCESS","failure","CHANNELS_FAILURE","type","requestBody","insertchnl","CHANNELS_INSERTSUCCESS","activateChannel","ACTIVATECHANNEL","ACTIVATECHANNEL_SUCCESS","ACTIVATECHANNEL_FAILURE","deleteChannel","deletechnl","checkPaymentPlan","CHECK_PAYMENTPLAN","CHECK_PAYMENTPLAN_SUCCESS","CHECK_PAYMENTPLAN_FAILURE","insertChannel2","payload","chatIconFile","interface","iconbutton","headerIconFile","iconheader","botIconFile","iconbot","bubbleIconFile","bubble","iconbubble","chatIcon","headerIcon","botIcon","bubbleIcon","fd","FormData","append","CommonService","uploadFile","INSERT_CHANNEL","INSERT_CHANNEL_FAILURE","INSERT_CHANNEL_SUCCESS","resetInsertChannel","INSERT_CHANNEL_RESET","editChannel","channelType","editchnl","main","EDIT_CHANNEL","EDIT_CHANNEL_FAILURE","EDIT_CHANNEL_SUCCESS","resetEditChannel","EDIT_CHANNEL_RESET","getFacebookPages","getPagelistSub","FACEBOOK_PAGES","FACEBOOK_PAGES_SUCCESS","FACEBOOK_PAGES_FAILURE","resetGetFacebookPages","FACEBOOK_PAGES_RESET","getMessengerPages","MESSENGER_PAGES","MESSENGER_PAGES_SUCCESS","MESSENGER_PAGES_FAILURE","resetGetMessengerPages","MESSENGER_PAGES_RESET","getInstagramPages","INSTAGRAM_PAGES","INSTAGRAM_PAGES_SUCCESS","INSTAGRAM_PAGES_FAILURE","resetGetInstagramPages","INSTAGRAM_PAGES_RESET","getInstagramDMPages","INSTAGRAMDM_PAGES","INSTAGRAMDM_PAGES_SUCCESS","INSTAGRAMDM_PAGES_FAILURE","resetGetInstagramDMPages","INSTAGRAMDM_PAGES_RESET","synchronizeTemplate","request","SYNCHRONIZE_TEMPLATE_FAILURE","SYNCHRONIZE_TEMPLATE","SYNCHRONIZE_TEMPLATE_SUCCESS","addTemplate","ADD_TEMPLATE_FAILURE","ADD_TEMPLATE","ADD_TEMPLATE_SUCCESS","deleteTemplate","DELETE_TEMPLATE_FAILURE","DELETE_TEMPLATE","DELETE_TEMPLATE_SUCCESS","getPhoneList","PHONE_LIST","PHONE_LIST_SUCCESS","PHONE_LIST_FAILURE","GoogleOAuthContext","createContext","GoogleOAuthProvider","onScriptLoadSuccess","onScriptLoadError","children","scriptLoadedSuccessfully","options","setScriptLoadedSuccessfully","onScriptLoadSuccessRef","useRef","current","onScriptLoadErrorRef","scriptTag","document","onload","_a","call","onerror","body","appendChild","removeChild","useLoadGsiScript","contextValue","useMemo","Provider","useGoogleOAuth","context","useContext","Error","useGoogleLogin","flow","onSuccess","onError","props","clientRef","onSuccessRef","onErrorRef","clientMethod","client","accounts","oauth2","client_id","callback","response","_b","loginImplicitFlow","useCallback","overrideConfig","requestAccessToken","loginAuthCodeFlow","requestCode","exchangeCode","GoogleService","EXCHANGE_CODE","EXCHANGE_CODE_SUCCESS","EXCHANGE_CODE_FAILURE","listBlogger","LIST_BLOGGER","LIST_BLOGGER_SUCCESS","LIST_BLOGGER_FAILURE","LIST_YOUTUBE","LIST_YOUTUBE_SUCCESS","LIST_YOUTUBE_FAILURE","useStyles","GoogleLogInFrame","login","tokenResponse","onGoogleLoginSucess","onGoogleLoginFailure","event","googlecode","console","log","JSON","stringify","login_with_google"],"mappings":"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","file":"static/js/55.3b28e387.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 15l5.19-3L10 9v6m11.56-7.83c.13.47.22 1.1.28 1.9.07.8.1 1.49.1 2.09L22 12c0 2.19-.16 3.8-.44 4.83-.25.9-.83 1.48-1.73 1.73-.47.13-1.33.22-2.65.28-1.3.07-2.49.1-3.59.1L12 19c-4.19 0-6.8-.16-7.83-.44-.9-.25-1.48-.83-1.73-1.73-.13-.47-.22-1.1-.28-1.9-.07-.8-.1-1.49-.1-2.09L2 12c0-2.19.16-3.8.44-4.83.25-.9.83-1.48 1.73-1.73.47-.13 1.33-.22 2.65-.28 1.3-.07 2.49-.1 3.59-.1L12 5c4.19 0 6.8.16 7.83.44.9.25 1.48.83 1.73 1.73z\"\n}), 'YouTube');\n\nexports.default = _default;","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable no-useless-escape */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport Link from '@material-ui/core/Link';\r\nimport paths from \"common/constants/paths\";\r\nimport YouTubeIcon from '@material-ui/icons/YouTube';\r\n\r\nimport { apiUrls } from 'common/constants';\r\nimport { Breadcrumbs, Box, Button, makeStyles } from '@material-ui/core';\r\nimport { ColorInput, FieldEdit, FieldSelect } from \"components\";\r\nimport { listYouTube } from \"store/google/actions\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { insertChannel } from \"store/channel/actions\";\r\nimport { langKeys } from \"lang/keys\";\r\nimport { showBackdrop, showSnackbar } from 'store/popus/actions';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport { useSelector } from \"hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { GoogleOAuthProvider } from '@react-oauth/google';\r\nimport GoogleLogInFrame from './GoogleLogInFrame';\r\n\r\ninterface whatsAppData {\r\n    typeWhatsApp?: string;\r\n    row?: any;\r\n}\r\n\r\nconst useChannelAddStyles = makeStyles(theme => ({\r\n    button: {\r\n        padding: 12,\r\n        fontWeight: 500,\r\n        fontSize: '14px',\r\n        textTransform: 'initial',\r\n        width: \"180px\"\r\n    },\r\n    buttonGoogle: {\r\n        \"& button\": {\r\n            width: \"200px\",\r\n            justifyContent: \"center\",\r\n        }\r\n    },\r\n}));\r\n\r\nexport const ChannelAddYouTube: FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const classes = useChannelAddStyles();\r\n    const exchangeCodeResult = useSelector(state => state.google.requestExchangeCode);\r\n    const executeResult = useSelector(state => state.channel.successinsert);\r\n    const history = useHistory();\r\n    const listYouTubeResult = useSelector(state => state.google.requestListYouTube);\r\n    const location = useLocation<whatsAppData>();\r\n    const mainResult = useSelector(state => state.channel.channelList);\r\n    const whatsAppData = location.state as whatsAppData | null;\r\n\r\n    const [channellist, setChannellist] = useState([]);\r\n    const [channelreg, setChannelreg] = useState(true);\r\n    const [coloricon, setcoloricon] = useState(\"#FE0000\");\r\n    const [fields, setFields] = useState({\r\n        \"method\": \"UFN_COMMUNICATIONCHANNEL_INS\",\r\n        \"parameters\": {\r\n            \"id\": 0,\r\n            \"description\": \"\",\r\n            \"type\": \"\",\r\n            \"communicationchannelsite\": \"\",\r\n            \"communicationchannelowner\": \"\",\r\n            \"chatflowenabled\": true,\r\n            \"integrationid\": \"\",\r\n            \"color\": \"\",\r\n            \"icons\": \"\",\r\n            \"other\": \"\",\r\n            \"form\": \"\",\r\n            \"apikey\": \"\",\r\n            \"coloricon\": \"#FE0000\",\r\n            \"voximplantcallsupervision\": false\r\n        },\r\n        \"type\": \"YOUTUBE\",\r\n        \"service\": {\r\n            \"accesstoken\": \"\",\r\n            \"refreshtoken\": \"\",\r\n            \"scope\": \"\",\r\n            \"tokentype\": \"\",\r\n            \"idtoken\": \"\",\r\n            \"channel\": \"\",\r\n        }\r\n    })\r\n    const [nextbutton, setNextbutton] = useState(true);\r\n    const [setins, setsetins] = useState(false);\r\n    const [viewSelected, setViewSelected] = useState(\"view1\");\r\n    const [waitExchange, setWaitExchange] = useState(false);\r\n    const [waitList, setWaitList] = useState(false);\r\n    const [waitSave, setWaitSave] = useState(false);\r\n\r\n    const openprivacypolicies = () => {\r\n        window.open(\"/privacy\", \"_blank\");\r\n    }\r\n\r\n    async function finishreg() {\r\n        setsetins(true);\r\n        dispatch(insertChannel(fields));\r\n        setWaitSave(true);\r\n        setViewSelected(\"main\");\r\n    }\r\n\r\n    function setnameField(value: any) {\r\n        setChannelreg(value === \"\");\r\n        let partialf = fields;\r\n        partialf.parameters.description = value;\r\n        setFields(partialf);\r\n    }\r\n\r\n    function setchannelField(value: any) {\r\n        setNextbutton(value === null);\r\n        let partialf = fields;\r\n        partialf.service.channel = value?.id || \"\";\r\n        setFields(partialf);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (waitExchange) {\r\n            if (!exchangeCodeResult.loading) {\r\n                if (!exchangeCodeResult.error) {\r\n                    dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.success) }));\r\n                    if (exchangeCodeResult.data) {\r\n                        let partialFields = fields;\r\n                        partialFields.service.accesstoken = exchangeCodeResult.data.access_token;\r\n                        partialFields.service.idtoken = exchangeCodeResult.data.id_token;\r\n                        partialFields.service.refreshtoken = exchangeCodeResult.data.refresh_token;\r\n                        partialFields.service.scope = exchangeCodeResult.data.scope;\r\n                        partialFields.service.tokentype = exchangeCodeResult.data.token_type;\r\n                        setFields(partialFields);\r\n\r\n                        setViewSelected(\"view2\");\r\n                        setChannellist([]);\r\n\r\n                        dispatch(listYouTube({ accesstoken: exchangeCodeResult.data.access_token }));\r\n                        dispatch(showBackdrop(true));\r\n                        setWaitList(true);\r\n                    }\r\n                }\r\n                else {\r\n                    dispatch(showSnackbar({ show: true, severity: \"error\", message: t(((exchangeCodeResult.msg || exchangeCodeResult.message) || exchangeCodeResult.code) || 'error_unexpected_error') }));\r\n                }\r\n                dispatch(showBackdrop(false));\r\n                setWaitExchange(false);\r\n            }\r\n        }\r\n    }, [exchangeCodeResult, waitExchange])\r\n\r\n    useEffect(() => {\r\n        if (waitList) {\r\n            if (!listYouTubeResult.loading) {\r\n                if (!listYouTubeResult.error) {\r\n                    dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.success) }));\r\n                    if (listYouTubeResult.data) {\r\n                        if (listYouTubeResult.data.items) {\r\n                            listYouTubeResult.data.items.forEach((element: any) => {\r\n                                element.channelname = `https://www.youtube.com/channel/${element.id}`;\r\n                            });\r\n                            setChannellist(listYouTubeResult.data.items);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    dispatch(showSnackbar({ show: true, severity: \"error\", message: t(((listYouTubeResult.msg || listYouTubeResult.message) || listYouTubeResult.code) || 'error_unexpected_error') }));\r\n                }\r\n                dispatch(showBackdrop(false));\r\n                setWaitList(false);\r\n            }\r\n        }\r\n    }, [listYouTubeResult, waitList])\r\n\r\n    useEffect(() => {\r\n        if (!mainResult.loading && setins) {\r\n            if (executeResult) {\r\n                setsetins(false);\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_register) }));\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n                history.push(paths.CHANNELS);\r\n            } else if (!executeResult) {\r\n                const errormessage = t(mainResult.code || \"error_unexpected_error\", { module: t(langKeys.property).toLocaleLowerCase() });\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }));\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            }\r\n        }\r\n    }, [mainResult])\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            dispatch(showBackdrop(false));\r\n            setWaitSave(false);\r\n        }\r\n    }, [mainResult])\r\n\r\n    if (viewSelected === \"view1\") {\r\n        return (\r\n            <>\r\n                <meta name=\"google-signin-client_id\" content={apiUrls.GOOGLECLIENTID_CHANNEL} />\r\n                <script src=\"https://apis.google.com/js/platform.js\" async defer></script>\r\n                <div style={{ width: '100%' }}>\r\n                    <Breadcrumbs aria-label=\"breadcrumb\">\r\n                        <Link color=\"textSecondary\" key={\"mainview\"} href=\"/\" onClick={(e) => { e.preventDefault(); history.push(paths.CHANNELS_ADD, whatsAppData) }}>\r\n                            {t(langKeys.previoustext)}\r\n                        </Link>\r\n                    </Breadcrumbs>\r\n                    <div>\r\n                        <div style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"2em\", color: \"#7721ad\", padding: \"20px\" }}>{t(langKeys.channel_youtubetitle)}</div>\r\n                        <div style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"1.1em\", padding: \"20px\" }}>{t(langKeys.channel_youtubealert1)}</div>\r\n                        <div style={{ textAlign: \"center\", padding: \"20px\", color: \"#969ea5\" }}>{t(langKeys.channel_youtubealert2)}</div>\r\n                        <div style={{ display: \"flex\", alignContent: \"center\", alignItems: \"center\", justifyContent: \"center\" }}>\r\n                            <GoogleOAuthProvider clientId={apiUrls.GOOGLECLIENTID_CHANNEL}>\r\n                                <GoogleLogInFrame\r\n                                    setWaitExchange={setWaitExchange}\r\n                                />\r\n                            </GoogleOAuthProvider>\r\n                        </div>\r\n                        <div style={{ textAlign: \"center\", paddingTop: \"20px\", color: \"#969ea5\", fontStyle: \"italic\" }}>{t(langKeys.connectface4)}</div>\r\n                        <div style={{ textAlign: \"center\", paddingBottom: \"80px\", color: \"#969ea5\" }}><a style={{ fontWeight: \"bold\", color: \"#6F1FA1\", cursor: \"pointer\" }} onClick={openprivacypolicies} rel=\"noopener noreferrer\">{t(langKeys.privacypoliciestitle)}</a></div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    } else if (viewSelected === \"view2\") {\r\n        return (\r\n            <div style={{ width: \"100%\" }}>\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                    <Link color=\"textSecondary\" key={\"mainview\"} href=\"/\" onClick={(e) => { e.preventDefault(); setViewSelected(\"view1\") }}>\r\n                        {t(langKeys.previoustext)}\r\n                    </Link>\r\n                </Breadcrumbs>\r\n                <div>\r\n                    <div style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"2em\", color: \"#7721ad\", padding: \"20px\" }}>{t(langKeys.channel_youtubetitle)}</div>\r\n                    <div className=\"row-zyx\">\r\n                        <div className=\"col-3\"></div>\r\n                        <FieldSelect\r\n                            onChange={(value) => setchannelField(value)}\r\n                            label={t(langKeys.selectchannellink)}\r\n                            className=\"col-6\"\r\n                            valueDefault={fields.service.channel}\r\n                            data={channellist}\r\n                            optionDesc=\"channelname\"\r\n                            optionValue=\"id\"\r\n                        />\r\n                    </div>\r\n                    <div style={{ paddingLeft: \"80%\" }}>\r\n                        <Button\r\n                            onClick={() => { setViewSelected(\"viewfinishreg\") }}\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={nextbutton}\r\n                        >{t(langKeys.next)}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div style={{ width: '100%' }}>\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                    <Link color=\"textSecondary\" key={\"mainview\"} href=\"/\" onClick={(e) => { e.preventDefault(); setViewSelected(\"view2\") }}>\r\n                        {t(langKeys.previoustext)}\r\n                    </Link>\r\n                </Breadcrumbs>\r\n                <div>\r\n                    <div style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"2em\", color: \"#7721ad\", padding: \"20px\", marginLeft: \"auto\", marginRight: \"auto\", maxWidth: \"800px\" }}>{t(langKeys.commchannelfinishreg)}</div>\r\n                    <div className=\"row-zyx\">\r\n                        <div className=\"col-3\"></div>\r\n                        <FieldEdit\r\n                            onChange={(value) => setnameField(value)}\r\n                            label={t(langKeys.givechannelname)}\r\n                            className=\"col-6\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <div className=\"col-3\"></div>\r\n                        <div className=\"col-6\">\r\n                            <Box fontWeight={500} lineHeight=\"18px\" fontSize={14} mb={1} color=\"textPrimary\">\r\n                                {t(langKeys.givechannelcolor)}\r\n                            </Box>\r\n                            <div style={{ display: \"flex\", justifyContent: \"space-around\", alignItems: \"center\" }}>\r\n                                <YouTubeIcon style={{ fill: `${coloricon}`, width: \"100px\", height: \"100px\" }} />\r\n                                <ColorInput\r\n                                    hex={fields.parameters.coloricon}\r\n                                    onChange={e => {\r\n                                        setFields(prev => ({\r\n                                            ...prev,\r\n                                            parameters: { ...prev.parameters, coloricon: e.hex, color: e.hex },\r\n                                        }));\r\n                                        setcoloricon(e.hex)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ paddingLeft: \"80%\" }}>\r\n                        <Button\r\n                            onClick={() => { finishreg() }}\r\n                            className={classes.button}\r\n                            disabled={channelreg || mainResult.loading}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >{t(langKeys.finishreg)}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChannelAddYouTube;","import { IActionCall, IChannel, IChatWebAdd, IRequestBody } from \"@types\";\r\nimport { ChannelsService, CommonService } from \"network\";\r\nimport actionTypes from \"./actionTypes\";\r\n\r\nexport const getChannelsList = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelist(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_SUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const getChannelsListSub = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_SUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const insertChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.insertchnl(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_INSERTSUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const activateChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.activateChannel(requestBody),\r\n    types: {\r\n        loading: actionTypes.ACTIVATECHANNEL,\r\n        success: actionTypes.ACTIVATECHANNEL_SUCCESS,\r\n        failure: actionTypes.ACTIVATECHANNEL_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const deleteChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.deletechnl(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_INSERTSUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const checkPaymentPlan = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.checkPaymentPlan(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHECK_PAYMENTPLAN,\r\n        success: actionTypes.CHECK_PAYMENTPLAN_SUCCESS,\r\n        failure: actionTypes.CHECK_PAYMENTPLAN_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetChannelsList = (): IActionCall => ({ type: actionTypes.CHANNELS_RESET });\r\n\r\nexport const resetGetChannelsSubList = (): IActionCall => ({ type: actionTypes.CHANNELS_RESET });\r\n\r\nexport const resetChannelInsert = (): IActionCall => ({ type: actionTypes.CHANNELS_INSERTSUCCESS_RESET });\r\n\r\nexport const insertChannel2 = (payload: IRequestBody<IChatWebAdd>): IActionCall => ({\r\n    callAPI: async () => {\r\n        const chatIconFile = payload.service!.interface.iconbutton as File | null;\r\n        const headerIconFile = payload.service!.interface.iconheader as File | null;\r\n        const botIconFile = payload.service!.interface.iconbot as File | null;\r\n        const bubbleIconFile = payload.service!.bubble.iconbubble as File | null;\r\n\r\n        let chatIcon = \"\";\r\n        let headerIcon = \"\";\r\n        let botIcon = \"\";\r\n        let bubbleIcon = \"\";\r\n\r\n        if (chatIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', chatIconFile, chatIconFile.name);\r\n            chatIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (headerIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', headerIconFile, headerIconFile.name);\r\n            headerIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (botIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', botIconFile, botIconFile.name);\r\n            botIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (bubbleIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', bubbleIconFile, bubbleIconFile.name);\r\n            bubbleIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        payload.service!.interface.iconbutton = chatIcon;\r\n        payload.service!.interface.iconheader = headerIcon;\r\n        payload.service!.interface.iconbot = botIcon;\r\n        payload.service!.bubble.iconbubble = bubbleIcon;\r\n\r\n        return ChannelsService.insertchnl(payload);\r\n    },\r\n    types: {\r\n        loading: actionTypes.INSERT_CHANNEL,\r\n        failure: actionTypes.INSERT_CHANNEL_FAILURE,\r\n        success: actionTypes.INSERT_CHANNEL_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetInsertChannel = () => ({ type: actionTypes.INSERT_CHANNEL_RESET });\r\n\r\nexport const editChannel = (payload: IRequestBody<IChannel | IChatWebAdd>, channelType?: string): IActionCall => ({\r\n    callAPI: async () => {\r\n        if (channelType === \"CHAZ\" || channelType === \"SMOOCHANDROID\") {\r\n            const service = payload.service as IChatWebAdd;\r\n            let chatIcon = service.interface.iconbutton as File | string | null;\r\n            let headerIcon = service.interface.iconheader as File | string | null;\r\n            let botIcon = service.interface.iconbot as File | string | null;\r\n            let bubbleIcon = service.bubble.iconbubble as File | string | null;\r\n\r\n            if (chatIcon && typeof chatIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', chatIcon, chatIcon.name);\r\n                chatIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (headerIcon && typeof headerIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', headerIcon, headerIcon.name);\r\n                headerIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (botIcon && typeof botIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', botIcon, botIcon.name);\r\n                botIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (bubbleIcon && typeof bubbleIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', bubbleIcon, bubbleIcon.name);\r\n                bubbleIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            (payload.service as IChatWebAdd).interface.iconbutton = chatIcon;\r\n            (payload.service as IChatWebAdd).interface.iconheader = headerIcon;\r\n            (payload.service as IChatWebAdd).interface.iconbot = botIcon;\r\n            (payload.service as IChatWebAdd).bubble.iconbubble = bubbleIcon;\r\n\r\n            return ChannelsService.editchnl(payload);\r\n        }\r\n        return CommonService.main(payload);\r\n    },\r\n    types: {\r\n        loading: actionTypes.EDIT_CHANNEL,\r\n        failure: actionTypes.EDIT_CHANNEL_FAILURE,\r\n        success: actionTypes.EDIT_CHANNEL_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetEditChannel = () => ({ type: actionTypes.EDIT_CHANNEL_RESET });\r\n\r\nexport const getFacebookPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.FACEBOOK_PAGES,\r\n        success: actionTypes.FACEBOOK_PAGES_SUCCESS,\r\n        failure: actionTypes.FACEBOOK_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetFacebookPages = () => ({ type: actionTypes.FACEBOOK_PAGES_RESET });\r\n\r\nexport const getMessengerPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.MESSENGER_PAGES,\r\n        success: actionTypes.MESSENGER_PAGES_SUCCESS,\r\n        failure: actionTypes.MESSENGER_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetMessengerPages = () => ({ type: actionTypes.MESSENGER_PAGES_RESET });\r\n\r\nexport const getInstagramPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.INSTAGRAM_PAGES,\r\n        success: actionTypes.INSTAGRAM_PAGES_SUCCESS,\r\n        failure: actionTypes.INSTAGRAM_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetInstagramPages = () => ({ type: actionTypes.INSTAGRAM_PAGES_RESET });\r\n\r\nexport const getInstagramDMPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.INSTAGRAMDM_PAGES,\r\n        success: actionTypes.INSTAGRAMDM_PAGES_SUCCESS,\r\n        failure: actionTypes.INSTAGRAMDM_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetInstagramDMPages = () => ({ type: actionTypes.INSTAGRAMDM_PAGES_RESET });\r\n\r\nexport const synchronizeTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.synchronizeTemplate(request),\r\n    types: {\r\n        failure: actionTypes.SYNCHRONIZE_TEMPLATE_FAILURE,\r\n        loading: actionTypes.SYNCHRONIZE_TEMPLATE,\r\n        success: actionTypes.SYNCHRONIZE_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetSynchronizeTemplate = (): IActionCall => ({ type: actionTypes.SYNCHRONIZE_TEMPLATE_RESET });\r\n\r\nexport const addTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.addTemplate(request),\r\n    types: {\r\n        failure: actionTypes.ADD_TEMPLATE_FAILURE,\r\n        loading: actionTypes.ADD_TEMPLATE,\r\n        success: actionTypes.ADD_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetAddTemplate = (): IActionCall => ({ type: actionTypes.ADD_TEMPLATE_RESET });\r\n\r\nexport const deleteTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.deleteTemplate(request),\r\n    types: {\r\n        failure: actionTypes.DELETE_TEMPLATE_FAILURE,\r\n        loading: actionTypes.DELETE_TEMPLATE,\r\n        success: actionTypes.DELETE_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetDeleteTemplate = (): IActionCall => ({ type: actionTypes.DELETE_TEMPLATE_RESET });\r\n\r\nexport const getPhoneList = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPhoneList(request),\r\n    types: {\r\n        loading: actionTypes.PHONE_LIST,\r\n        success: actionTypes.PHONE_LIST_SUCCESS,\r\n        failure: actionTypes.PHONE_LIST_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetPhoneList = (): IActionCall => ({ type: actionTypes.PHONE_LIST_RESET });","import React, { useState, useRef, useEffect, createContext, useMemo, useContext, useCallback } from 'react';\n\nfunction useLoadGsiScript(options = {}) {\r\n    const { onScriptLoadSuccess, onScriptLoadError } = options;\r\n    const [scriptLoadedSuccessfully, setScriptLoadedSuccessfully] = useState(false);\r\n    const onScriptLoadSuccessRef = useRef(onScriptLoadSuccess);\r\n    onScriptLoadSuccessRef.current = onScriptLoadSuccess;\r\n    const onScriptLoadErrorRef = useRef(onScriptLoadError);\r\n    onScriptLoadErrorRef.current = onScriptLoadError;\r\n    useEffect(() => {\r\n        const scriptTag = document.createElement('script');\r\n        scriptTag.src = 'https://accounts.google.com/gsi/client';\r\n        scriptTag.async = true;\r\n        scriptTag.defer = true;\r\n        scriptTag.onload = () => {\r\n            var _a;\r\n            setScriptLoadedSuccessfully(true);\r\n            (_a = onScriptLoadSuccessRef.current) === null || _a === void 0 ? void 0 : _a.call(onScriptLoadSuccessRef);\r\n        };\r\n        scriptTag.onerror = () => {\r\n            var _a;\r\n            setScriptLoadedSuccessfully(false);\r\n            (_a = onScriptLoadErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onScriptLoadErrorRef);\r\n        };\r\n        document.body.appendChild(scriptTag);\r\n        return () => {\r\n            document.body.removeChild(scriptTag);\r\n        };\r\n    }, []);\r\n    return scriptLoadedSuccessfully;\r\n}\n\nconst GoogleOAuthContext = createContext(null);\r\nfunction GoogleOAuthProvider({ clientId, onScriptLoadSuccess, onScriptLoadError, children, }) {\r\n    const scriptLoadedSuccessfully = useLoadGsiScript({\r\n        onScriptLoadSuccess,\r\n        onScriptLoadError,\r\n    });\r\n    const contextValue = useMemo(() => ({\r\n        clientId,\r\n        scriptLoadedSuccessfully,\r\n    }), [clientId, scriptLoadedSuccessfully]);\r\n    return (React.createElement(GoogleOAuthContext.Provider, { value: contextValue }, children));\r\n}\r\nfunction useGoogleOAuth() {\r\n    const context = useContext(GoogleOAuthContext);\r\n    if (!context) {\r\n        throw new Error('Google OAuth components must be used within GoogleOAuthProvider');\r\n    }\r\n    return context;\r\n}\n\nconst containerHeightMap = { large: 40, medium: 32, small: 20 };\r\nfunction GoogleLogin({ onSuccess, onError, useOneTap, promptMomentNotification, type = 'standard', theme = 'outline', size = 'large', text, shape, logo_alignment, width, locale, ...props }) {\r\n    const btnContainerRef = useRef(null);\r\n    const { clientId, scriptLoadedSuccessfully } = useGoogleOAuth();\r\n    const onSuccessRef = useRef(onSuccess);\r\n    onSuccessRef.current = onSuccess;\r\n    const onErrorRef = useRef(onError);\r\n    onErrorRef.current = onError;\r\n    const promptMomentNotificationRef = useRef(promptMomentNotification);\r\n    promptMomentNotificationRef.current = promptMomentNotification;\r\n    useEffect(() => {\r\n        var _a, _b, _c;\r\n        if (!scriptLoadedSuccessfully)\r\n            return;\r\n        (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.initialize({\r\n            client_id: clientId,\r\n            callback: (credentialResponse) => {\r\n                var _a;\r\n                if (!credentialResponse.clientId || !credentialResponse.credential) {\r\n                    return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef);\r\n                }\r\n                onSuccessRef.current(credentialResponse);\r\n            },\r\n            ...props,\r\n        });\r\n        (_b = window.google) === null || _b === void 0 ? void 0 : _b.accounts.id.renderButton(btnContainerRef.current, {\r\n            type,\r\n            theme,\r\n            size,\r\n            text,\r\n            shape,\r\n            logo_alignment,\r\n            width,\r\n            locale,\r\n        });\r\n        if (useOneTap)\r\n            (_c = window.google) === null || _c === void 0 ? void 0 : _c.accounts.id.prompt(promptMomentNotificationRef.current);\r\n        return () => {\r\n            var _a;\r\n            if (useOneTap)\r\n                (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.cancel();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [\r\n        clientId,\r\n        scriptLoadedSuccessfully,\r\n        useOneTap,\r\n        type,\r\n        theme,\r\n        size,\r\n        text,\r\n        shape,\r\n        logo_alignment,\r\n        width,\r\n        locale,\r\n    ]);\r\n    return (React.createElement(\"div\", { ref: btnContainerRef, style: { height: containerHeightMap[size] } }));\r\n}\n\nfunction googleLogout() {\r\n    var _a;\r\n    (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.disableAutoSelect();\r\n}\n\n/* eslint-disable import/export */\r\nfunction useGoogleLogin({ flow = 'implicit', scope = '', onSuccess, onError, ...props }) {\r\n    const { clientId, scriptLoadedSuccessfully } = useGoogleOAuth();\r\n    const clientRef = useRef();\r\n    const onSuccessRef = useRef(onSuccess);\r\n    onSuccessRef.current = onSuccess;\r\n    const onErrorRef = useRef(onError);\r\n    onErrorRef.current = onError;\r\n    useEffect(() => {\r\n        var _a;\r\n        if (!scriptLoadedSuccessfully)\r\n            return;\r\n        const clientMethod = flow === 'implicit' ? 'initTokenClient' : 'initCodeClient';\r\n        const client = (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.oauth2[clientMethod]({\r\n            client_id: clientId,\r\n            scope: `openid profile email ${scope}`,\r\n            callback: (response) => {\r\n                var _a, _b;\r\n                if (response.error)\r\n                    return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef, response);\r\n                (_b = onSuccessRef.current) === null || _b === void 0 ? void 0 : _b.call(onSuccessRef, response);\r\n            },\r\n            ...props,\r\n        });\r\n        clientRef.current = client;\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [clientId, scriptLoadedSuccessfully, flow, scope]);\r\n    const loginImplicitFlow = useCallback((overrideConfig) => clientRef.current.requestAccessToken(overrideConfig), []);\r\n    const loginAuthCodeFlow = useCallback(() => clientRef.current.requestCode(), []);\r\n    return flow === 'implicit' ? loginImplicitFlow : loginAuthCodeFlow;\r\n}\n\nfunction useGoogleOneTapLogin({ onSuccess, onError, promptMomentNotification, cancel_on_tap_outside, hosted_domain, }) {\r\n    const { clientId, scriptLoadedSuccessfully } = useGoogleOAuth();\r\n    const onSuccessRef = useRef(onSuccess);\r\n    onSuccessRef.current = onSuccess;\r\n    const onErrorRef = useRef(onError);\r\n    onErrorRef.current = onError;\r\n    const promptMomentNotificationRef = useRef(promptMomentNotification);\r\n    promptMomentNotificationRef.current = promptMomentNotification;\r\n    useEffect(() => {\r\n        var _a, _b;\r\n        if (!scriptLoadedSuccessfully)\r\n            return;\r\n        (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.initialize({\r\n            client_id: clientId,\r\n            callback: (credentialResponse) => {\r\n                var _a;\r\n                if (!credentialResponse.clientId || !credentialResponse.credential) {\r\n                    return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef);\r\n                }\r\n                onSuccessRef.current(credentialResponse);\r\n            },\r\n            hosted_domain,\r\n            cancel_on_tap_outside,\r\n        });\r\n        (_b = window.google) === null || _b === void 0 ? void 0 : _b.accounts.id.prompt(promptMomentNotificationRef.current);\r\n        return () => {\r\n            var _a;\r\n            (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.cancel();\r\n        };\r\n    }, [\r\n        clientId,\r\n        scriptLoadedSuccessfully,\r\n        cancel_on_tap_outside,\r\n        hosted_domain,\r\n    ]);\r\n}\n\n/**\r\n * Checks if the user granted all the specified scope or scopes\r\n * @returns True if all the scopes are granted\r\n */\r\nfunction hasGrantedAllScopesGoogle(tokenResponse, firstScope, ...restScopes) {\r\n    if (!window.google)\r\n        return false;\r\n    return window.google.accounts.oauth2.hasGrantedAllScopes(tokenResponse, firstScope, ...restScopes);\r\n}\n\n/**\r\n * Checks if the user granted any of the specified scope or scopes.\r\n * @returns True if any of the scopes are granted\r\n */\r\nfunction hasGrantedAnyScopeGoogle(tokenResponse, firstScope, ...restScopes) {\r\n    if (!window.google)\r\n        return false;\r\n    return window.google.accounts.oauth2.hasGrantedAnyScope(tokenResponse, firstScope, ...restScopes);\r\n}\n\nexport { GoogleLogin, GoogleOAuthProvider, googleLogout, hasGrantedAllScopesGoogle, hasGrantedAnyScopeGoogle, useGoogleLogin, useGoogleOneTapLogin };\n","import { IActionCall } from \"@types\";\r\nimport { GoogleService } from \"network\";\r\n\r\nimport actionTypes from \"./actionTypes\";\r\n\r\nexport const exchangeCode = (request: any): IActionCall => ({\r\n    callAPI: () => GoogleService.exchangeCode(request),\r\n    types: {\r\n        loading: actionTypes.EXCHANGE_CODE,\r\n        success: actionTypes.EXCHANGE_CODE_SUCCESS,\r\n        failure: actionTypes.EXCHANGE_CODE_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetExchangeCode = (): IActionCall => ({ type: actionTypes.EXCHANGE_CODE_RESET });\r\n\r\nexport const listBlogger = (request: any): IActionCall => ({\r\n    callAPI: () => GoogleService.listBlogger(request),\r\n    types: {\r\n        loading: actionTypes.LIST_BLOGGER,\r\n        success: actionTypes.LIST_BLOGGER_SUCCESS,\r\n        failure: actionTypes.LIST_BLOGGER_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetListBlogger = (): IActionCall => ({ type: actionTypes.LIST_BLOGGER_RESET });\r\n\r\nexport const listYouTube = (request: any): IActionCall => ({\r\n    callAPI: () => GoogleService.listYouTube(request),\r\n    types: {\r\n        loading: actionTypes.LIST_YOUTUBE,\r\n        success: actionTypes.LIST_YOUTUBE_SUCCESS,\r\n        failure: actionTypes.LIST_YOUTUBE_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetListYouTube = (): IActionCall => ({ type: actionTypes.LIST_YOUTUBE_RESET });","import { FC } from \"react\";\r\nimport { Button, makeStyles } from '@material-ui/core';\r\nimport { langKeys } from \"lang/keys\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { exchangeCode } from \"store/google/actions\";\r\nimport { showBackdrop } from 'store/popus/actions';\r\nimport { useGoogleLogin } from '@react-oauth/google';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n        padding: 12,\r\n        fontWeight: 500,\r\n        fontSize: '14px',\r\n        textTransform: 'initial',\r\n        width: \"180px\"\r\n    },\r\n}));\r\n\r\ninterface GoogleLogInFrameProps {\r\n    setWaitExchange: (value: boolean) => void;\r\n}\r\n\r\nexport const GoogleLogInFrame: FC<GoogleLogInFrameProps> = ({ setWaitExchange }) => {\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    \r\n    const login = useGoogleLogin({\r\n        onSuccess: tokenResponse => onGoogleLoginSucess(tokenResponse),\r\n        onError: error => onGoogleLoginFailure(error),\r\n        flow: 'auth-code',\r\n        scope: 'https://www.googleapis.com/auth/gmail.compose \\\r\n        https://www.googleapis.com/auth/youtube.readonly \\\r\n        https://www.googleapis.com/auth/youtube.upload \\\r\n        https://www.googleapis.com/auth/youtube.force-ssl \\\r\n        https://www.googleapis.com/auth/drive.file \\\r\n        https://www.googleapis.com/auth/gmail.readonly \\\r\n        https://www.googleapis.com/auth/blogger \\\r\n        https://www.googleapis.com/auth/blogger.readonly \\\r\n        https://www.googleapis.com/auth/drive.readonly',\r\n    });\r\n\r\n    const onGoogleLoginSucess = (event: any) => {\r\n        if (event) {\r\n            if (event.code) {\r\n                dispatch(exchangeCode({ googlecode: event.code }));\r\n                dispatch(showBackdrop(true));\r\n                setWaitExchange(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onGoogleLoginFailure = (event: any) => {\r\n        console.log('GOOGLE LOGIN FAILURE: ' + JSON.stringify(event));\r\n    }\r\n\r\n    return <Button\r\n        onClick={() => { login() }}\r\n        className={classes.button}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n    >\r\n        {t(langKeys.login_with_google)}\r\n    </Button>\r\n};\r\n\r\nexport default GoogleLogInFrame"],"sourceRoot":""}