{"version":3,"sources":["pages/BotDesigner.tsx","pages/assistant/Intentions.tsx","pages/assistant/Entities.tsx","pages/assistant/Dialog.tsx","pages/assistant/Assistant.tsx","../node_modules/@material-ui/icons/Clear.js","../node_modules/@material-ui/icons/Save.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@material-ui/icons/Add.js","store/botdesigner/actions.ts"],"names":["origin","URL","apiUrls","CHATFLOW","pathname","url","BotDesigner","dispatch","useDispatch","history","useHistory","useEffect","window","addEventListener","event","data","chatblock","chatblock_set","push","paths","VARIABLECONFIGURATION","receiveCrossDomainMessage","useState","frame","setFrame","msg","win","document","getElementById","contentWindow","postMessage","postCrossDomainMessage","localStorage","getItem","style","width","height","position","zIndex","color","open","id","title","src","border","onLoad","useStyles","makeStyles","theme","labellink","textDecoration","cursor","button","padding","fontWeight","fontSize","textTransform","containerDetail","marginTop","spacing","background","VariableHandler","show","item","inputkey","inputvalue","range","top","left","changer","this","DetailIntentions","row","edit","fetchData","setViewSelected","classes","waitSave","setWaitSave","disableSave","setDisableSave","disableCreate","setDisableCreate","selectedRows","setSelectedRows","dataEntities","setdataEntities","variableHandler","setVariableHandler","name","datajson","text","traits","entities","intent","newIntention","setnewIntention","examples","setexamples","mainResult","useSelector","state","main","mainAux","mainResultAux","mainAux2","executeRes","execute","t","useTranslation","useForm","defaultValues","type","description","operation","status","register","handleSubmit","setValue","getValues","errors","formState","getCollectionAux","selUtterance","loading","error","map","e","keywords","x","keyword","entity","reduce","acc","React","validate","value","length","langKeys","field_required","errormessage","code","module","whitelist","toLocaleLowerCase","showSnackbar","severity","message","showBackdrop","successful_edit","successful_register","onSubmit","manageConfirmation","visible","question","confirmation_save","callback","tempexamples","forEach","updatedate","insertutterance","JSON","stringify","utterance_datajson","columns","useMemo","Header","userexample","accessor","NoFilter","added","toggleVariableSelect","changefunc","filter","elem","target","selectionStart","lines","substr","split","column","startIndex","slice","lastIndexOf","partialText","indexOf","rightText","selectionEnd","endIndex","param","filterPipe","display","justifyContent","newintention","gap","alignItems","Button","variant","startIcon","backgroundColor","onClick","back","className","disabled","save","label","onChange","valueDefault","tempint","create","adduserexample","rows","inputProps","onInput","datakey","onClickSelection","substring","selectionVariableSelect","onClickAway","paddingTop","paddingBottom","uniqueexamplesuser","holdingpos","cleanedstring","tempnewintention","includes","entityfound","role","body","start","end","add","filterGeneral","useSelection","selectionKey","ButtonsElement","Object","keys","delete","download","pageSizeDefault","initialPageIndex","Intentions","rowSelected","setRowSelected","viewSelected","getCollection","selIntent","getCollectionAux2","selEntities","resetAllMain","messagingcost","successful_delete","intentions","Cell","props","cell","original","lastUpdate","handleDelete","confirmation_delete","utterancedelete","table","Fragment","mainData","handleRegister","field","minHeight","palette","primary","DetailEntities","setkeywords","insertentity","lookups","roles","newentity","flexWrap","flex","TableContainer","Table","size","TableHead","TableRow","TableCell","IconButton","a","synonyms","TableBody","i","splice","tempkeywords","sinonims","join","optionDesc","optionValue","Entities","value_plural","entitydelete","Dialog","Assistant","user","login","validateToken","roledesc","pageSelected","setPageSelected","Tabs","indicatorColor","borderBottom","textColor","_","dialog","_interopRequireDefault","require","_interopRequireWildcard","defineProperty","exports","default","_default","createElement","d","_classCallCheck","instance","Constructor","TypeError","payload","actionTypes","CHATBLOCK_SET","chatblock_reset","CHATBLOCK_RESET"],"mappings":"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","file":"static/js/48.e03a973f.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { FC, useEffect, useState } from 'react'; // we need this to make JSX compile\r\nimport { useDispatch } from 'react-redux';\r\nimport { chatblock_set } from 'store/botdesigner/actions';\r\nimport { useHistory } from 'react-router-dom'\r\nimport paths from 'common/constants/paths';\r\nimport { apiUrls } from 'common/constants';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst origin = new URL(apiUrls.CHATFLOW).origin;\r\nconst pathname = new URL(apiUrls.CHATFLOW).pathname\r\nconst url = `${origin}${pathname}`;\r\n\r\nconst BotDesigner: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const receiveCrossDomainMessage = (event: any) => {\r\n        if (event?.origin === origin) {\r\n            if (event?.data?.chatblock) {\r\n                dispatch(chatblock_set(event.data.chatblock));\r\n                history.push(paths.VARIABLECONFIGURATION);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('message', (event) => receiveCrossDomainMessage(event));\r\n    }, [])\r\n\r\n    const postCrossDomainMessage = (msg: any) => {\r\n        var win: any = document?.getElementById('ifr');\r\n        win?.contentWindow.postMessage({ 'jwt': msg }, origin);\r\n        return undefined;\r\n    }\r\n\r\n    const [frame, setFrame] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (frame) {\r\n            postCrossDomainMessage(localStorage.getItem('accessToken'));\r\n        }\r\n    }, [frame])\r\n\r\n    return (\r\n        <div style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n            <Backdrop style={{ zIndex: 999999999, color: '#fff', position: 'absolute' }} open={!frame}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n            <iframe\r\n                id=\"ifr\"\r\n                title='botdesigner'\r\n                src={url}\r\n                style={{ height: '100%', width: '100%', border: 'none' }}\r\n                onLoad={() => {\r\n                    setFrame(true);\r\n                }}\r\n            >\r\n            </iframe>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BotDesigner;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { FC, useEffect, useState } from 'react'; // we need this to make JSX compile\r\nimport { useSelector } from 'hooks';\r\nimport { FieldEdit, FieldEditWithSelect, TitleDetail } from 'components';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { langKeys } from 'lang/keys';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\nimport TableZyx from 'components/fields/table-simple';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { Dictionary } from '@types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { manageConfirmation, showBackdrop, showSnackbar } from 'store/popus/actions';\r\nimport { execute, getCollection, getCollectionAux, getCollectionAux2, resetAllMain } from 'store/main/actions';\r\nimport { insertutterance, selEntities, selIntent, selUtterance, utterancedelete } from 'common/helpers/requestBodies';\r\nimport { filterPipe } from 'common/helpers';\r\n\r\n\r\ninterface RowSelected {\r\n    row: Dictionary | null,\r\n    edit: Boolean\r\n}\r\n\r\ninterface DetailProps {\r\n    data: RowSelected;\r\n    fetchData?: () => void;\r\n    setViewSelected: (view: string) => void;\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    labellink: {\r\n        color: '#7721ad',\r\n        textDecoration: 'underline',\r\n        cursor: 'pointer'\r\n    },\r\n    button: {\r\n        padding: 12,\r\n        fontWeight: 500,\r\n        fontSize: '14px',\r\n        textTransform: 'initial'\r\n    },\r\n    containerDetail: {\r\n        marginTop: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n        background: '#fff',\r\n    },\r\n}));\r\n\r\n/*{\r\n    name: \"Quiero comprar un Samsung\",\r\n    datajson: {\r\n        text: \"Quiero comprar un Samsung\",\r\n        intent: {\r\n            id: \"525288882688594\",\r\n            \"name\": \"saludo\"\r\n        },\r\n        traits: [],\r\n        entities: [\r\n            {\r\n                id: \"1136777953889025\",\r\n                end: 25,\r\n                body: \"comprar un Samsung\",\r\n                name: \"marca\",\r\n                role: \"marca\",\r\n                start: 7,\r\n                entities: [\r\n                    {\r\n                        id: \"1767365776940765\",\r\n                        end: 18,\r\n                        body: \"Samsung\",\r\n                        name: \"documento\",\r\n                        role: \"documento\",\r\n                        start: 11,\r\n                        entities: []\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}*/\r\n\r\n\r\nclass VariableHandler {\r\n    show: boolean;\r\n    item: any;\r\n    inputkey: string;\r\n    inputvalue: string;\r\n    range: number[];\r\n    top: number;\r\n    left: number;\r\n    changer: ({ ...param }) => any;\r\n    constructor() {\r\n        this.show = false;\r\n        this.item = null;\r\n        this.inputkey = '';\r\n        this.inputvalue = '';\r\n        this.range = [-1, -1];\r\n        this.changer = ({ ...param }) => null;\r\n        this.top = 0;\r\n        this.left = 0;\r\n    }\r\n}\r\n\r\nconst DetailIntentions: React.FC<DetailProps> = ({ data: { row, edit }, fetchData,setViewSelected }) => {\r\n    const classes = useStyles();\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const [disableSave, setDisableSave] = useState(!row);\r\n    const [disableCreate, setDisableCreate] = useState(true);\r\n    const [selectedRows, setSelectedRows] = useState<Dictionary>({});\r\n    const [dataEntities, setdataEntities] = useState<any>([]);\r\n    const [variableHandler, setVariableHandler] = useState<VariableHandler>(new VariableHandler());\r\n    const [newIntention, setnewIntention] = useState<Dictionary>({\r\n        name: \"\",\r\n        datajson: {\r\n            text: \"\",\r\n            traits: [],\r\n            entities: [],        \r\n            intent: {\r\n                name:row?.name || '',\r\n            },\r\n        }\r\n    });\r\n    const [examples, setexamples] = useState<any>([]);\r\n    const mainResult = useSelector(state => state.main.mainAux);\r\n    const mainResultAux = useSelector(state => state.main.mainAux2);\r\n    const executeRes = useSelector(state => state.main.execute);\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n    const selectionKey= \"name\"\r\n\r\n    const { register, handleSubmit, setValue, getValues, formState: { errors } } = useForm({\r\n        defaultValues: {\r\n            type: 'NINGUNO',\r\n            id: row ? row.id : 0,\r\n            name: row?.name || '',\r\n            description: row?.description || '',\r\n            operation: row ? \"EDIT\" : \"INSERT\",\r\n            status: \"ACTIVO\",\r\n        }\r\n    });\r\n\r\n    const fetchutterance = () => {dispatch(getCollectionAux(selUtterance(row?.name||\"\")))};\r\n    \r\n    useEffect(() => {\r\n        if(row){\r\n            fetchutterance();\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if(!mainResultAux.loading && !mainResultAux.error){\r\n            setdataEntities(mainResultAux.data.map((e)=>e.datajson.keywords.map((x:any)=>({name: e.name + '.' + x.keyword, entity: e}))).reduce((acc,item)=>[...acc,...item],[]))\r\n        }\r\n    }, [mainResultAux]);\r\n\r\n    useEffect(() => {\r\n        if(!mainResult.loading && !mainResult.error){            \r\n            setexamples(mainResult.data);\r\n        }\r\n    }, [mainResult]);\r\n\r\n    React.useEffect(() => {\r\n        register('type');\r\n        register('id');\r\n        register('status');\r\n        register('operation');\r\n        register('name', { validate: (value) => (value && value.length) || t(langKeys.field_required) });\r\n        register('description'//, { validate: (value) => (value && value.length) || t(langKeys.field_required) }\r\n        );\r\n    }, [edit, register]);\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeRes.loading && !executeRes.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(row ? langKeys.successful_edit : langKeys.successful_register) }))\r\n                fetchData && fetchData();\r\n                dispatch(showBackdrop(false));\r\n                setViewSelected(\"view-1\")\r\n            } else if (executeRes.error) {\r\n                const errormessage = t(executeRes.code || \"error_unexpected_error\", { module: t(langKeys.whitelist).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                setWaitSave(false);\r\n                dispatch(showBackdrop(false));\r\n            }\r\n        }\r\n    }, [executeRes, waitSave])\r\n    \r\n    const onSubmit = handleSubmit((data) => {\r\n        const callback = () => {\r\n            let tempexamples = examples\r\n            tempexamples.forEach((e:any)=>delete e.updatedate)\r\n            dispatch(execute(insertutterance({...data, datajson: JSON.stringify({name: data.name}), utterance_datajson: JSON.stringify(tempexamples)})));\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true)\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_save),\r\n            callback\r\n        }))\r\n    });\r\n\r\n    \r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: t(langKeys.userexample),\r\n                accessor: 'name',\r\n                NoFilter: true,\r\n                width: \"auto\",\r\n            },\r\n            {\r\n                Header: t(langKeys.added),\r\n                accessor: 'updatedate',\r\n                NoFilter: true,\r\n                width: \"auto\",\r\n            },\r\n        ],\r\n        []\r\n    );\r\n    const selectionVariableSelect = (e: React.ChangeEvent<any>, value: string) => {\r\n        const { item, inputkey, inputvalue, range, changer } = variableHandler;\r\n        if (range[1] !== -1 && (range[1] > range[0] || range[0] !== -1)) {\r\n            changer({\r\n                ...item,\r\n                [inputkey]: inputvalue.substring(0, range[0] + 2)\r\n                    + value\r\n                    + (inputvalue[range[1] - 2] !== '}' ? '}}' : '')\r\n                    + inputvalue.substring(range[1] - 2)\r\n            });\r\n            setVariableHandler(new VariableHandler());\r\n        }\r\n    }\r\n\r\n    const toggleVariableSelect = (e: React.ChangeEvent<any>, item: any, inputkey: string, changefunc: (data:any) => void, filter = true) => {\r\n        let elem = e.target;\r\n        if (elem) {\r\n            let selectionStart = elem.selectionStart || 0;\r\n            let lines = (elem.value || '').substr(0, selectionStart).split('\\n');\r\n            let row = lines.length - 1;\r\n            let column = lines[row].length * 3;\r\n            let startIndex = (elem.value || '').slice(0, selectionStart || 0)?.lastIndexOf('{{');\r\n            let partialText = '';\r\n            if (startIndex !== -1) {\r\n                if (elem.value.slice(startIndex, selectionStart).indexOf(' ') === -1\r\n                    && elem.value.slice(startIndex, selectionStart).indexOf('}}') === -1\r\n                    && elem.value[selectionStart - 1] !== '}') {\r\n                    partialText = elem.value.slice(startIndex + 2, selectionStart);\r\n                    let rightText = (elem.value || '').slice(selectionStart, elem.value.length);\r\n                    let selectionEnd = rightText.indexOf('}}') !== -1 ? rightText.indexOf('}}') : 0;\r\n                    let endIndex = startIndex + partialText.length + selectionEnd + 4;\r\n                    setVariableHandler({\r\n                        show: true,\r\n                        item: item,\r\n                        inputkey: inputkey,\r\n                        inputvalue: elem.value,\r\n                        range: [startIndex, endIndex],\r\n                        changer: ({ ...param }) => changefunc({ ...param }),\r\n                        top: 24 + row * 21,\r\n                        left: column\r\n                    })\r\n                    if (filter) {\r\n                        setdataEntities(filterPipe(mainResultAux.data.map((e)=>e.datajson.keywords.map((x:any)=>({name: e.name + '.' + x.keyword, entity: e}))).reduce((acc,item)=>[...acc,...item],[]), 'name', partialText, '%'));\r\n                    }\r\n                    else {\r\n                        setdataEntities(dataEntities);\r\n                    }\r\n                }else {\r\n                    setVariableHandler(new VariableHandler());\r\n                }\r\n            }\r\n            else {\r\n                setVariableHandler(new VariableHandler());\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{width: '100%'}}>\r\n            <form onSubmit={onSubmit}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <div>\r\n                        <TitleDetail\r\n                            title={row ? `${row.name}` : t(langKeys.newintention)}\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center'  }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            type=\"button\"\r\n                            color=\"primary\"\r\n                            startIcon={<ClearIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: \"#FB5F5F\" }}\r\n                            onClick={() => setViewSelected(\"view-1\")}\r\n                        >{t(langKeys.back)}</Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            disabled={disableSave}\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            startIcon={<SaveIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: disableSave?\"#dbdbdc\":\"#55BD84\" }}\r\n                        >{t(langKeys.save)}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.containerDetail}>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldEdit\r\n                            label={t(langKeys.name)} \r\n                            disabled={!disableSave}\r\n                            className=\"col-12\"\r\n                            onChange={(value) => {\r\n                                setValue('name', value)\r\n                                setDisableCreate(getValues(\"description\")===\"\"||value===\"\")\r\n                            }}\r\n                            valueDefault={row?.name || \"\"}\r\n                            error={errors?.name?.message}\r\n                        />\r\n                        <FieldEdit\r\n                            label={t(langKeys.description)} \r\n                            disabled={!disableSave}\r\n                            className=\"col-12\"\r\n                            onChange={(value) => {\r\n                                setValue('description', value)\r\n                                setDisableCreate(getValues(\"name\")===\"\"||value===\"\")\r\n                            }}\r\n                            valueDefault={row?.description || \"\"}\r\n                            error={errors?.description?.message}\r\n                        />\r\n                    </div>\r\n                    {!row &&\r\n                        <div className=\"row-zyx\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                type=\"button\"\r\n                                className='col-3'\r\n                                disabled={disableCreate}\r\n                                color=\"primary\"\r\n                                style={{ backgroundColor: disableCreate?\"#dbdbdc\":\"#0078f6\" }}\r\n                                onClick={() => {\r\n                                    let tempint =newIntention\r\n                                    tempint.datajson.intent.name = getValues(\"name\")\r\n                                    setnewIntention(tempint)\r\n                                    setDisableCreate(true);\r\n                                    setDisableSave(false)\r\n                                }}\r\n                            >{t(langKeys.create)}</Button>\r\n                        </div>\r\n                    }\r\n                    \r\n                </div>\r\n                {!disableSave && (\r\n                    \r\n                    <div className={classes.containerDetail}>\r\n                        <FieldEditWithSelect\r\n                            label={t(langKeys.adduserexample)}\r\n                            className=\"col-12\"\r\n                            rows={1}\r\n                            valueDefault={newIntention.name}\r\n                            onChange={(value) => setnewIntention({ ...newIntention, name: value })}\r\n                            inputProps={{\r\n                                onClick: (e: any) => toggleVariableSelect(e, newIntention, 'name', setnewIntention),\r\n                                onInput: (e: any) => toggleVariableSelect(e, newIntention, 'name', setnewIntention),\r\n                            }}\r\n                            show={variableHandler.show}\r\n                            data={dataEntities}\r\n                            datakey=\"name\"\r\n                            top={variableHandler.top}\r\n                            left={variableHandler.left}\r\n                            onClickSelection={(e, value) => selectionVariableSelect(e, value)}\r\n                            onClickAway={(variableHandler) => setVariableHandler({ ...variableHandler, show: false })}\r\n                        />\r\n                        <div style={{paddingTop:\"8px\", paddingBottom:\"8px\"}}>{t(langKeys.uniqueexamplesuser)}</div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            type=\"button\"\r\n                            className='col-3'\r\n                            disabled={newIntention.name===\"\"}\r\n                            color=\"primary\"\r\n                            style={{ backgroundColor: newIntention.name===\"\"?\"#dbdbdc\":\"#0078f6\" }}\r\n                            onClick={() => {\r\n                                let holdingpos=0\r\n                                let cleanedstring=\"\"\r\n                                let tempnewintention = newIntention\r\n                                newIntention.name.split(\"{{\").forEach((e:any) => {\r\n                                    if(e.includes(\"}}\")){\r\n                                        let entityfound = dataEntities.filter((x:any)=>x.name===e.split(\"}}\")[0])[0]\r\n                                        tempnewintention.datajson.entities =[...tempnewintention.datajson.entities, \r\n                                            {\r\n                                                name: entityfound.entity.name,\r\n                                                role: entityfound.entity.name,\r\n                                                body: e.split(\"}}\")[0].split(\".\")[1], \r\n                                                start:holdingpos,\r\n                                                end:holdingpos + e.split(\"}}\")[0].split(\".\")[1].length,\r\n                                                entities:[] \r\n                                            }\r\n                                        ]\r\n                                        holdingpos+=e.split(\"}}\")[0].split(\".\")[1].length\r\n                                        cleanedstring+=e.split(\"}}\")[0].split(\".\")[1]\r\n                                    }else{\r\n                                        holdingpos+=e.length\r\n                                        cleanedstring+=e\r\n                                    }\r\n                                });\r\n                                tempnewintention.name = cleanedstring\r\n                                tempnewintention.datajson.text = cleanedstring\r\n                                setexamples([...examples,tempnewintention]);\r\n                                setnewIntention({\r\n                                    name: \"\",\r\n                                    datajson: {\r\n                                        text: \"\",\r\n                                        traits: [],\r\n                                        entities: [],\r\n                                        intent: getValues(\"name\"),\r\n                                    }\r\n                                })      \r\n                            }}\r\n                        >{t(langKeys.add)}</Button>\r\n                        \r\n                        <div style={{ width: '100%' }}>\r\n                            <TableZyx\r\n                                columns={columns}\r\n                                data={examples}\r\n                                filterGeneral={false}\r\n                                useSelection={true}\r\n                                selectionKey={selectionKey}\r\n                                setSelectedRows={setSelectedRows}\r\n                                ButtonsElement={() => (\r\n                                    <div style={{display: \"flex\", justifyContent: \"end\", width: \"100%\"}}>\r\n                                        <Button\r\n                                            disabled={Object.keys(selectedRows).length===0}\r\n                                            variant=\"contained\"\r\n                                            type=\"button\"\r\n                                            color=\"primary\"\r\n                                            startIcon={<ClearIcon color=\"secondary\" />}\r\n                                            style={{ backgroundColor: Object.keys(selectedRows).length===0?\"#dbdbdc\":\"#FB5F5F\" }}\r\n                                            onClick={() => {setexamples(examples.filter((x:any)=>!Object.keys(selectedRows).includes(x.name)))}}\r\n                                        >{t(langKeys.delete)}</Button>\r\n                                    </div>\r\n                                )}\r\n                                loading={mainResult.loading}\r\n                                register={false}\r\n                                download={false}\r\n                                pageSizeDefault={20}\r\n                                initialPageIndex={0}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                )}\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Intentions: FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { t } = useTranslation();\r\n    const classes = useStyles();\r\n    const mainResult = useSelector(state => state.main);\r\n    const [selectedRows, setSelectedRows] = useState<any>({});\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const executeRes = useSelector(state => state.main.execute);\r\n    const [rowSelected, setRowSelected] = useState<RowSelected>({ row: null, edit: false });\r\n\r\n    const [viewSelected, setViewSelected] = useState(\"view-1\");\r\n\r\n    const fetchData = () => {dispatch(getCollection(selIntent()))};\r\n    const selectionKey = 'name';\r\n    \r\n    useEffect(() => {\r\n        fetchData();\r\n        dispatch(getCollectionAux2(selEntities()))\r\n        return () => {\r\n            dispatch(resetAllMain());\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeRes.loading && !executeRes.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_delete) }))\r\n                fetchData();\r\n                dispatch(showBackdrop(false));\r\n                setViewSelected(\"view-1\")\r\n            } else if (executeRes.error) {\r\n                const errormessage = t(executeRes.code || \"error_unexpected_error\", { module: t(langKeys.messagingcost).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                setWaitSave(false);\r\n                dispatch(showBackdrop(false));\r\n            }\r\n        }\r\n    }, [executeRes, waitSave])\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: t(langKeys.intentions),\r\n                accessor: 'name',\r\n                width: \"auto\",\r\n                NoFilter: true,\r\n                Cell: (props: any) => {\r\n                    const row = props.cell.row.original;\r\n                    return (\r\n                        <label\r\n                            className={classes.labellink}\r\n                            onClick={() => {      \r\n                                dispatch(getCollectionAux(selUtterance(row?.name||\"\")))                  \r\n                                setViewSelected(\"view-2\");\r\n                                setRowSelected({ row: row, edit: true })\r\n                            }}\r\n                        >\r\n                            {row.name}\r\n                        </label>\r\n                    )\r\n                }\r\n                \r\n            },\r\n            {\r\n                Header: t(langKeys.description),\r\n                accessor: 'description',\r\n                width: \"auto\",\r\n                NoFilter: true,\r\n            },\r\n            {\r\n                Header: \"ID\",\r\n                accessor: 'id',\r\n                width: \"auto\",\r\n                NoFilter: true,\r\n            },\r\n            {\r\n                Header: t(langKeys.examples),\r\n                accessor: 'utteranceqty',\r\n                width: \"auto\",\r\n                NoFilter: true,\r\n            },\r\n            {\r\n                Header: t(langKeys.lastUpdate),\r\n                accessor: 'updatedate',\r\n                width: \"auto\",\r\n                NoFilter: true,\r\n            },\r\n        ],\r\n        []\r\n    );\r\n    const handleRegister = () => {\r\n        dispatch(getCollectionAux(selUtterance(\"\")))    \r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row: null, edit: true })\r\n    }\r\n    const handleDelete = () => {\r\n        const callback = () => {\r\n            dispatch(execute(utterancedelete({table:JSON.stringify(Object.keys(selectedRows).map(x=>({name:x})))})))\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true);\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_delete),\r\n            callback\r\n        }))\r\n    }\r\n    if (viewSelected===\"view-1\"){\r\n        return (\r\n            <React.Fragment>\r\n                <div style={{ height: 10 }}></div>\r\n                <div style={{ width: \"100%\" }}>\r\n                    <TableZyx\r\n                        columns={columns}\r\n                        data={mainResult.mainData.data}\r\n                        filterGeneral={false}\r\n                        useSelection={true}\r\n                        selectionKey={selectionKey}\r\n                        setSelectedRows={setSelectedRows}\r\n                        ButtonsElement={() => (\r\n                            <div style={{display: \"flex\", justifyContent: \"end\", width: \"100%\"}}>\r\n                                <Button\r\n                                    disabled={Object.keys(selectedRows).length===0}\r\n                                    variant=\"contained\"\r\n                                    type=\"button\"\r\n                                    color=\"primary\"\r\n                                    startIcon={<ClearIcon color=\"secondary\" />}\r\n                                    style={{ backgroundColor: Object.keys(selectedRows).length===0?\"#dbdbdc\":\"#FB5F5F\" }}\r\n                                    onClick={handleDelete}\r\n                                >{t(langKeys.delete)}</Button>\r\n                            </div>\r\n                        )}\r\n                        loading={mainResult.mainData.loading}\r\n                        register={true}\r\n                        download={false}\r\n                        handleRegister={handleRegister}\r\n                        pageSizeDefault={20}\r\n                        initialPageIndex={0}\r\n                    />\r\n                </div>\r\n            </React.Fragment>\r\n            );\r\n    }else if (viewSelected===\"view-2\"){\r\n        return (\r\n            <div style={{ width: '100%' }}>\r\n                <DetailIntentions\r\n                    data={rowSelected}\r\n                    fetchData={fetchData}\r\n                    setViewSelected={setViewSelected}\r\n                />\r\n            </div>\r\n        );\r\n    }else\r\n        return null;\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { FC, useEffect, useState } from 'react'; // we need this to make JSX compile\r\nimport { useSelector } from 'hooks';\r\nimport {  FieldEdit, FieldEditArray, FieldMultiSelectFreeSolo } from 'components';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { langKeys } from 'lang/keys';\r\nimport { Button, IconButton, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport TableZyx from 'components/fields/table-simple';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { Dictionary } from '@types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { manageConfirmation, showBackdrop, showSnackbar } from 'store/popus/actions';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { execute, getCollection, resetAllMain } from 'store/main/actions';\r\nimport { entitydelete, insertentity, selEntities } from 'common/helpers/requestBodies';\r\n\r\n\r\ninterface RowSelected {\r\n    row: Dictionary | null,\r\n    edit: Boolean\r\n}\r\n\r\ninterface DetailProps {\r\n    data: RowSelected;\r\n    fetchData?: () => void;\r\n    setViewSelected: (view: string) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    labellink: {\r\n        color: '#7721ad',\r\n        textDecoration: 'underline',\r\n        cursor: 'pointer'\r\n    },\r\n    button: {\r\n        padding: 12,\r\n        fontWeight: 500,\r\n        fontSize: '14px',\r\n        textTransform: 'initial'\r\n    },\r\n    containerDetail: {\r\n        marginTop: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n        background: '#fff',\r\n    },\r\n    field: {\r\n        minHeight: 38,\r\n    },\r\n    title: {\r\n        fontSize: '22px',\r\n        fontWeight: 'bold',\r\n        color: theme.palette.text.primary,\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst DetailEntities: React.FC<DetailProps> = ({ data: { row, edit }, fetchData,setViewSelected }) => {\r\n    const classes = useStyles();\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const [keywords, setkeywords] = useState<any>(row?.datajson?.keywords || []);\r\n    const executeRes = useSelector(state => state.main.execute);\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n\r\n    const { register, handleSubmit, setValue, formState: { errors } } = useForm({\r\n        defaultValues: {\r\n            type: 'NINGUNO',\r\n            id: row ? row.id : 0,\r\n            name: row?.name || '',\r\n            operation: row ? \"EDIT\" : \"INSERT\",\r\n            status: \"ACTIVO\",\r\n        }\r\n    });\r\n    \r\n    React.useEffect(() => {\r\n        register('type');\r\n        register('id');\r\n        register('status');\r\n        register('operation');\r\n        register('name', { validate: (value) => (value && value.length) || t(langKeys.field_required) });\r\n    }, [edit, register]);\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeRes.loading && !executeRes.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(row ? langKeys.successful_edit : langKeys.successful_register) }))\r\n                fetchData && fetchData();\r\n                dispatch(showBackdrop(false));\r\n                setViewSelected(\"view-1\")\r\n            } else if (executeRes.error) {\r\n                const errormessage = t(executeRes.code || \"error_unexpected_error\", { module: t(langKeys.whitelist).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                setWaitSave(false);\r\n                dispatch(showBackdrop(false));\r\n            }\r\n        }\r\n    }, [executeRes, waitSave])\r\n    \r\n    const onSubmit = handleSubmit((data) => {\r\n        const callback = () => {\r\n            dispatch(execute(insertentity({...data, datajson:JSON.stringify({...row?.datajson,\r\n                keywords:keywords,\r\n                lookups: [\"keywords\"],\r\n                name:data.name,\r\n                roles: [row?.datajson?.roles? (row?.datajson?.roles[0]):data.name]\r\n            })})));\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true)\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_save),\r\n            callback\r\n        }))\r\n    });\r\n\r\n    return (\r\n        <div style={{width: '100%'}}>\r\n            <form onSubmit={onSubmit}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <div>\r\n                    </div>\r\n                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center'  }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            type=\"button\"\r\n                            color=\"primary\"\r\n                            startIcon={<ClearIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: \"#FB5F5F\" }}\r\n                            onClick={() => setViewSelected(\"view-1\")}\r\n                        >{t(langKeys.back)}</Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            startIcon={<SaveIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: \"#55BD84\" }}\r\n                        >{t(langKeys.save)}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.containerDetail}>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldEdit\r\n                            label={t(langKeys.newentity)} \r\n                            className=\"col-12\"\r\n                            onChange={(value) => {\r\n                                setValue('name', value)\r\n                            }}\r\n                            valueDefault={row?.name || \"\"}\r\n                            error={errors?.name?.message}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={classes.containerDetail}>\r\n                <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>\r\n                        <div style={{ flex: .55 }} className={classes.containerDetail}>\r\n                            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                <div className={classes.title}>{t(langKeys.keywords)}</div>\r\n                            </div>\r\n                            <div>\r\n                                <TableContainer>\r\n                                    <Table size=\"small\">\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell>\r\n                                                    <IconButton\r\n                                                        size=\"small\"\r\n                                                        onClick={async () => {\r\n                                                            setkeywords([...keywords,{ keyword: '', synonyms: [] }])\r\n                                                        }}\r\n                                                    >\r\n                                                        <AddIcon />\r\n                                                    </IconButton>\r\n                                                </TableCell>\r\n                                                <TableCell>{t(langKeys.keywords)}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody style={{ marginTop: 5 }}>\r\n                                            {keywords.map((item: any, i: number) =>\r\n                                                <TableRow key={i}>\r\n                                                    <TableCell width={30}>\r\n                                                        <div style={{ display: 'flex' }}>\r\n                                                            <IconButton\r\n                                                                size=\"small\"\r\n                                                                onClick={() => { setkeywords(keywords.splice(i,1)) }}\r\n                                                            >\r\n                                                                <DeleteIcon style={{ color: '#777777' }} />\r\n                                                            </IconButton>\r\n                                                        </div>\r\n                                                    </TableCell>\r\n                                                    <TableCell style={{ width: 200 }}>\r\n                                                        <FieldEditArray\r\n                                                            valueDefault={keywords[i].keyword}\r\n                                                            onChange={(value) => {\r\n                                                                let tempkeywords = keywords\r\n                                                                tempkeywords[i].keyword = value\r\n                                                                setkeywords(tempkeywords)\r\n                                                            }}\r\n                                                        />\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            )}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style={{ flex: .45 }} className={classes.containerDetail}>\r\n                            <div style={{ display: 'flex', justifyContent: 'space-between', paddingBottom: \"45px\" }}>\r\n                                <div className={classes.title}>{t(langKeys.sinonims)}</div>\r\n                            </div>\r\n                            <div>\r\n                                \r\n                                {keywords.map((item: any, i: number) =>\r\n                                \r\n                                    <FieldMultiSelectFreeSolo\r\n                                        valueDefault={keywords[i].synonyms.join()||\"\"}\r\n                                        className={classes.field}\r\n                                        key={i}\r\n                                        onChange={(value) => {\r\n                                            let tempkeywords = keywords\r\n                                            tempkeywords[i].synonyms = value\r\n                                            setkeywords(tempkeywords)\r\n                                        }}\r\n                                        loading={false}\r\n                                        data={keywords[i].synonyms.map((x:any) => ({ value: x }))}\r\n                                        optionDesc=\"value\"\r\n                                        optionValue=\"value\"\r\n                                    />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>                 \r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Entities: FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { t } = useTranslation();\r\n    const classes = useStyles();\r\n    const mainResult = useSelector(state => state.main);\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const [selectedRows, setSelectedRows] = useState<Dictionary>({});\r\n    const [rowSelected, setRowSelected] = useState<RowSelected>({ row: null, edit: false });\r\n\r\n    const [viewSelected, setViewSelected] = useState(\"view-1\");\r\n    const selectionKey= \"name\"\r\n    const executeRes = useSelector(state => state.main.execute);\r\n\r\n    const fetchData = () => {dispatch(getCollection(selEntities()))};\r\n    \r\n    useEffect(() => {\r\n        fetchData();\r\n\r\n        return () => {\r\n            dispatch(resetAllMain());\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeRes.loading && !executeRes.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_delete) }))\r\n                fetchData();\r\n                dispatch(showBackdrop(false));\r\n                setViewSelected(\"view-1\")\r\n            } else if (executeRes.error) {\r\n                const errormessage = t(executeRes.code || \"error_unexpected_error\", { module: t(langKeys.messagingcost).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                setWaitSave(false);\r\n                dispatch(showBackdrop(false));\r\n            }\r\n        }\r\n    }, [executeRes, waitSave])\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: t(langKeys.entities),\r\n                accessor: 'name',\r\n                NoFilter: true,\r\n                width: \"auto\",\r\n                Cell: (props: any) => {\r\n                    const row = props.cell.row.original;\r\n                    return (\r\n                        <label\r\n                            className={classes.labellink}\r\n                            onClick={() => {                        \r\n                                setViewSelected(\"view-2\");\r\n                                setRowSelected({ row: row, edit: true })\r\n                            }}\r\n                        >\r\n                            {row.name}\r\n                        </label>\r\n                    )\r\n                }\r\n                \r\n            },\r\n            {\r\n                Header: t(langKeys.value_plural),\r\n                accessor: 'description',\r\n                NoFilter: true,\r\n                width: \"auto\",\r\n                Cell: (props: any) => {\r\n                    const row = props.cell.row.original;\r\n                    return (\r\n\r\n                        <label>\r\n                            {row?.datajson?.keywords?.reduce((acc:string,item:any)=>acc + item.keyword + \", \",\"\").slice(0,-2)}\r\n                        </label>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                Header: \"ID\",\r\n                accessor: 'id',\r\n                width: \"auto\",\r\n                NoFilter: true,\r\n            },\r\n            {\r\n                Header: t(langKeys.lastUpdate),\r\n                accessor: 'updatedate',\r\n                width: \"auto\",\r\n                NoFilter: true,\r\n            },\r\n        ],\r\n        []\r\n    );\r\n    const handleRegister = () => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row: null, edit: true })\r\n    }\r\n    const handleDelete = () => {\r\n        const callback = () => {\r\n            dispatch(execute(entitydelete({table:JSON.stringify(Object.keys(selectedRows).map(x=>({name:x})))})))\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true);\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_delete),\r\n            callback\r\n        }))\r\n    }\r\n\r\n    if (viewSelected===\"view-1\"){\r\n        return (\r\n            <React.Fragment>\r\n                <div style={{ height: 10 }}></div>\r\n                <TableZyx\r\n                    columns={columns}\r\n                    data={mainResult.mainData.data}\r\n                    filterGeneral={false}\r\n                    useSelection={true}\r\n                    selectionKey={selectionKey}\r\n                    setSelectedRows={setSelectedRows}\r\n                    ButtonsElement={() => (\r\n                        <div style={{display: \"flex\", justifyContent: \"end\", width: \"100%\"}}>\r\n                            <Button\r\n                                disabled={Object.keys(selectedRows).length===0}\r\n                                variant=\"contained\"\r\n                                type=\"button\"\r\n                                color=\"primary\"\r\n                                startIcon={<ClearIcon color=\"secondary\" />}\r\n                                style={{ backgroundColor: Object.keys(selectedRows).length===0?\"#dbdbdc\":\"#FB5F5F\" }}\r\n                                onClick={handleDelete}\r\n                            >{t(langKeys.delete)}</Button>\r\n                        </div>\r\n                    )}\r\n                    loading={mainResult.mainData.loading}\r\n                    register={true}\r\n                    download={false}\r\n                    handleRegister={handleRegister}\r\n                    pageSizeDefault={20}\r\n                    initialPageIndex={0}\r\n                />\r\n            </React.Fragment>\r\n            );\r\n    }else if (viewSelected===\"view-2\"){\r\n        return (\r\n            <div style={{ width: '100%' }}>\r\n                <DetailEntities\r\n                    data={rowSelected}\r\n                    fetchData={fetchData}\r\n                    setViewSelected={setViewSelected}\r\n                />\r\n            </div>\r\n        );\r\n    }else\r\n        return null;\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { FC } from 'react';\r\nimport BotDesigner from 'pages/BotDesigner';\r\n\r\n\r\nexport const Dialog: FC = () => {\r\n\r\n\r\n    return (\r\n        <div style={{ width: '100%',height:\"100%\" }}>\r\n            <BotDesigner />\r\n        </div>\r\n    );\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { FC, useState } from 'react'; // we need this to make JSX compile\r\nimport { useSelector } from 'hooks';\r\nimport { AntTab } from 'components';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { langKeys } from 'lang/keys';\r\nimport { Tabs } from '@material-ui/core';\r\nimport { Intentions } from './Intentions';\r\nimport { Entities } from './Entities';\r\nimport { Dialog } from './Dialog';\r\n\r\n\r\nexport const Assistant: FC = () => {\r\n\r\n    const { t } = useTranslation();\r\n    const user = useSelector(state => state.login.validateToken.user);\r\n\r\n    const [pageSelected, setPageSelected] = useState(user?.roledesc === \"SUPERADMIN\" ? 0 : 6);\r\n\r\n\r\n    return (\r\n        <div style={{ width: '100%' }}>\r\n            <Tabs\r\n                value={pageSelected}\r\n                indicatorColor=\"primary\"\r\n                variant=\"fullWidth\"\r\n                style={{ borderBottom: '1px solid #EBEAED', backgroundColor: '#FFF', marginTop: 8 }}\r\n                textColor=\"primary\"\r\n                onChange={(_, value) => setPageSelected(value)}\r\n            >\r\n                {user?.roledesc === \"SUPERADMIN\" &&\r\n                    <AntTab label={t(langKeys.intentions)} />\r\n                }\r\n                {user?.roledesc === \"SUPERADMIN\" &&\r\n                    <AntTab label={t(langKeys.entities)} />\r\n                }\r\n                {user?.roledesc === \"SUPERADMIN\" &&\r\n                    <AntTab label={t(langKeys.dialog)} />\r\n                }\r\n            </Tabs>\r\n            {pageSelected === 0 &&\r\n                <div style={{ marginTop: 16 }}>\r\n                    <Intentions />\r\n                </div>\r\n            }\r\n            {pageSelected === 1 &&\r\n                <div style={{ marginTop: 16 }}>\r\n                    <Entities />\r\n                </div>\r\n            }\r\n            {pageSelected === 2 &&\r\n                <div style={{ marginTop: 16, height:\"100%\" }}>\r\n                    <Dialog />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Assistant;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');\n\nexports.default = _default;","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","import { IActionCall } from \"@types\";\r\nimport actionTypes from \"./actionTypes\";\r\n\r\nexport const chatblock_set = (data: any): IActionCall => ({\r\n    payload: data,\r\n    type: actionTypes.CHATBLOCK_SET\r\n});\r\n\r\nexport const chatblock_reset = (): IActionCall => ({type: actionTypes.CHATBLOCK_RESET});"],"sourceRoot":""}