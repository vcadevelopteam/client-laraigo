{"version":3,"sources":["pages/Tipifications.tsx"],"names":["useStyles","makeStyles","theme","containerDetail","marginTop","spacing","padding","background","button","fontWeight","fontSize","textTransform","title","lineHeight","height","color","palette","text","primary","halfplace","width","dataaction","paddingBottom","treeviewroot","flexGrow","maxWidth","dataTypeAction","dat","TreeItemsFromData","dataClassTotal","parents","children","loadchildren","id","map","x","father","nodeId","String","label","key","forEach","parent","item","classificationid","toString","description","haschildren","push","DetailTipification","data","row","edit","setViewSelected","multiData","fetchData","externalUse","externalType","externalSaveHandler","externalCancelHandler","arrayBread","classes","useState","waitSave","setWaitSave","setDescription","order","setOrder","type","seType","communicationchannel","tags","parentid","auxVariables","seauxVariables","jobplan","showAddAction","setShowAddAction","JSON","parse","setjobplan","executeRes","useSelector","state","main","execute","dispatch","useDispatch","t","useTranslation","dataStatus","success","dataParent","filter","console","log","datachannels","datamastercatalog","useForm","defaultValues","status","operation","path","metacatalogid","register","handleSubmit","setValue","getValues","errors","formState","setValueAction","field","value","i","p","index","React","useEffect","validate","noempty","length","langKeys","field_required","limit","limit20char","typeclassification","loading","error","errormessage","code","module","classification","toLocaleLowerCase","showSnackbar","show","severity","message","showBackdrop","successful_edit","successful_register","onSubmit","manageConfirmation","visible","question","confirmation_save","callback","insClassification","stringify","style","display","justifyContent","breadcrumbs","name","tipification","detail","handleClick","gap","alignItems","variant","startIcon","backgroundColor","onClick","back","className","save","onChange","valueDefault","position","bottom","top","right","onSelect","e","native","optionDesc","optionValue","disabled","domainvalue","uset","prefixTranslation","desc","category","channel_plural","o","join","tag","InputProps","inputProps","min","step","catalogmaster","marginBottom","actionplan","hasactionplan","default_organization","bydefault","affirmative","negative","endIcon","action","paddingTop","deleteitem","variable","endpoint","maxLength","Tipifications","history","useHistory","mainResult","executeResult","openDialog","setOpenDialog","insertexcel","setinsertexcel","viewSelected","rowSelected","setRowSelected","configuration_plural","classification_plural","redirectFunc","view","paths","CONFIGURATION","columns","useMemo","accessor","NoFilter","isComponent","minWidth","Cell","props","cell","original","viewFunction","handleView","deleteFunction","handleDelete","editFunction","handleEdit","Header","toUpperCase","channel","toLowerCase","getCollection","getClassificationSel","getMultiCollection","getValuesFromDomain","getParentSel","getValuesForTree","getCatalogMasterList","resetAllMain","successful_delete","confirmation_delete","importCSV","files","file","uploadExcel","undefined","d","includes","channels","Object","keys","reduce","a","header","oder","error_invaliddata","mainData","titlemodule","count","download","onClickRow","handleTemplate","domaindesc","exportExcel","template","templateMaker","handleRegister","ButtonsElement","opendrilldown","open","organizationclass","buttonText1","close","handleClickButton1","handleClickButton2","defaultCollapseIcon","defaultExpandIcon"],"mappings":"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","file":"static/js/109.17895ff2.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { FC, Fragment, useEffect, useState } from 'react'; // we need this to make JSX compile\r\nimport { useSelector } from 'hooks';\r\nimport { useDispatch } from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport { TemplateIcons, TemplateBreadcrumbs, TitleDetail, FieldView, FieldEdit, FieldSelect, FieldMultiSelect, TemplateSwitch, FieldEditMulti, DialogZyx, FieldEditWithSelect } from 'components';\r\nimport { getParentSel, getValuesFromDomain, getClassificationSel, insClassification, uploadExcel, getValuesForTree, exportExcel, templateMaker, getCatalogMasterList } from 'common/helpers';\r\nimport { Dictionary, MultiData } from \"@types\";\r\nimport TableZyx from '../components/fields/table-simple';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { langKeys } from 'lang/keys';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { useForm } from 'react-hook-form';\r\nimport { getCollection, resetAllMain, getMultiCollection, execute } from 'store/main/actions';\r\nimport { showSnackbar, showBackdrop, manageConfirmation } from 'store/popus/actions';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { IconButton } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\r\nimport { TreeItem, TreeView } from '@material-ui/lab';\r\nimport { useHistory } from 'react-router-dom';\r\nimport paths from 'common/constants/paths';\r\nimport { EmojiPickerZyx } from 'components'\r\n\r\ninterface RowSelected {\r\n    row: Dictionary | null,\r\n    edit: boolean\r\n}\r\ninterface DetailTipificationProps {\r\n    data: RowSelected;\r\n    setViewSelected: (view: string) => void;\r\n    multiData: MultiData[];\r\n    fetchData: () => void;\r\n    externalUse?: boolean;\r\n    externalType?: string;\r\n    externalSaveHandler?: ({...param}?: any) => void;\r\n    externalCancelHandler?: ({...param}?: any) => void;\r\n    arrayBread?:any;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    containerDetail: {\r\n        marginTop: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n        background: '#fff',\r\n    },\r\n    button: {\r\n        padding: 12,\r\n        fontWeight: 500,\r\n        fontSize: '14px',\r\n        textTransform: 'initial'\r\n    },\r\n    title: {\r\n        fontSize: '22px',\r\n        lineHeight: '48px',\r\n        // fontWeight: 'bold',\r\n        height: '48px',\r\n        color: theme.palette.text.primary,\r\n    },\r\n    halfplace: {\r\n        width: \"50%\",\r\n    },\r\n    dataaction: {\r\n        width: \"100%\",\r\n        paddingBottom: \"20px\",\r\n    },\r\n    treeviewroot: {\r\n        height: 240,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    }\r\n}));\r\nconst dataTypeAction = [\r\n    { dat: \"Simple\" },\r\n    { dat: \"Variable\" },\r\n    { dat: \"Request\" }\r\n]\r\nconst TreeItemsFromData: React.FC<{ dataClassTotal: Dictionary}> = ({ dataClassTotal }) => {\r\n    const parents: any[] = []\r\n    const children: any[] = []\r\n\r\n    dataClassTotal.forEach((x: Dictionary) => {\r\n        if (x.parent === 0) {\r\n            let item = {\r\n                key: x.classificationid,\r\n                nodeId: x.classificationid.toString(),\r\n                label: x.description.toString(),\r\n                children: x.haschildren\r\n            }\r\n            parents.push(item)// = [...parents, item])\r\n        } else {\r\n            let item = {\r\n                key: x.classificationid,\r\n                nodeId: x.classificationid?.toString(),\r\n                label: x.description?.toString(),\r\n                children: x.haschildren,\r\n                father: x.parent\r\n            }\r\n            children.push(item)\r\n        }\r\n    })\r\n\r\n    function loadchildren(id: number) {\r\n        return children.map(x => {\r\n            if (x.father === id) {\r\n                return (\r\n                    <TreeItem\r\n                        key={x.key}\r\n                        nodeId={String(x.nodeId)}\r\n                        label={x.label}\r\n                    >\r\n                        {x.children ? loadchildren(x.key) : null}\r\n                    </TreeItem>\r\n                )\r\n            }\r\n            return null;\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            {parents.map(x =>\r\n                <TreeItem\r\n                    key={x.key}\r\n                    nodeId={String(x.nodeId)}\r\n                    label={x.label}\r\n                >\r\n                    {x.children ? loadchildren(x.key) : null}\r\n                </TreeItem>)}\r\n        </>\r\n    )\r\n};\r\n\r\nexport const DetailTipification: React.FC<DetailTipificationProps> = ({ data: { row, edit }, setViewSelected, multiData, fetchData, externalUse = false, externalType, externalSaveHandler, externalCancelHandler,arrayBread }) => {\r\n    const classes = useStyles();\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const [description, setDescription] = useState(row?.description||\"\");\r\n    const [order, setOrder] = useState(row?.order||\"\");\r\n    const [type, seType] = useState(externalUse ? externalType : (row?.type || \"TIPIFICACION\"));\r\n    const [auxVariables, seauxVariables] = useState({\r\n        communicationchannel: row?.communicationchannel || \"\",\r\n        tags: row?.tags || \"\",\r\n        order: row?.order || \"\",\r\n        parent: row?.parentid || 0,\r\n    });\r\n    const [showAddAction, setShowAddAction] = useState(!!row?.jobplan || false);\r\n    const [jobplan, setjobplan] = useState<Dictionary[]>(row && row.jobplan ? JSON.parse(row.jobplan) : [])\r\n\r\n    const executeRes = useSelector(state => state.main.execute);\r\n    // const user = useSelector(state => state.login.validateToken.user);\r\n\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n\r\n    const dataStatus = multiData[0] && multiData[0].success ? multiData[0].data : [];\r\n    const dataParent = multiData[3] && multiData[3].success ? multiData[3].data.filter(x=>x.type===type) : [];\r\n    console.log(dataParent)\r\n\r\n    const datachannels = multiData[2] && multiData[2].success ? multiData[2].data : [];\r\n    const datamastercatalog = multiData[4] && multiData[4].success ? multiData[4].data : [];\r\n    const { register, handleSubmit, setValue, getValues, formState: { errors } } = useForm({\r\n        defaultValues: {\r\n            type: externalUse ? externalType : (row?.type || \"TIPIFICACION\"),\r\n            id: row?.classificationid || 0,\r\n            description: edit? (row?.description) : '',\r\n            title: row?.title || '',\r\n            parent: row?.parentid || 0,\r\n            communicationchannel: row?.communicationchannel || '',\r\n            status: row?.status || 'ACTIVO',\r\n            operation: row ? \"EDIT\" : \"INSERT\",\r\n            path: row?.path || '',\r\n            tags: row?.tags || '',\r\n            order: row?.order || '',\r\n            metacatalogid: row?.metacatalogid || 0,\r\n        }\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        register('id');\r\n        register('title', { validate: {\r\n            noempty: (value) => (value && value.length) || t(langKeys.field_required),\r\n            limit: (value) => (getValues(\"type\") === \"CATEGORIA\")? ((value && value.length && value.length<= 20) || t(langKeys.limit20char)): true,\r\n        }});\r\n        register('description', { validate: {\r\n            noempty: (value) => (value && value.length) || t(langKeys.field_required),\r\n            limit: (value) => (getValues(\"type\") === \"CATEGORIA\")? ((value && value.length && value.length <= 75) || t(langKeys.limit20char)): true,\r\n        }});\r\n        register('parent');\r\n        register('communicationchannel', { validate: {\r\n            typeclassification: (value) => (getValues(\"type\") !== \"CATEGORIA\")? ((value && value.length) || t(langKeys.field_required)): true,\r\n        }});\r\n        register('status', { validate: (value) => (value && value.length) || t(langKeys.field_required) });\r\n        register('type', { validate: (value) => (value && value.length) || t(langKeys.field_required) });\r\n        register('path');\r\n        register('tags');\r\n        register('order');\r\n        register('metacatalogid');\r\n    }, [edit, register]);\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeRes.loading && !executeRes.error) {\r\n                if (externalUse) {\r\n                    dispatch(showSnackbar({ show: true, severity: \"success\", message: t(row ? langKeys.successful_edit : langKeys.successful_register) }))\r\n                    dispatch(showBackdrop(false));\r\n                    externalSaveHandler && externalSaveHandler();\r\n                }\r\n                else {\r\n                    dispatch(showSnackbar({ show: true, severity: \"success\", message: t(row ? langKeys.successful_edit : langKeys.successful_register) }))\r\n                    fetchData();\r\n                    dispatch(showBackdrop(false));\r\n                    setViewSelected(\"view-1\")\r\n                }\r\n            } else if (executeRes.error) {\r\n                const errormessage = t(executeRes.code || \"error_unexpected_error\", { module: t(langKeys.classification).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            }\r\n        }\r\n    }, [executeRes, waitSave])\r\n    function addaction() {\r\n        setjobplan((p) => [...p, { action: \"\", type: \"Simple\" }])\r\n    }\r\n    function deleteitem(i: number) {\r\n        setjobplan(jobplan.filter((e, index) => index !== i))\r\n\r\n    }\r\n    function setValueAction(field: string, value: string, i: number) {\r\n        setjobplan((p: Dictionary[]) => p.map((x, index) => index === i ? { ...x, [field]: value } : x))\r\n    }\r\n    const onSubmit = handleSubmit((data) => {\r\n        const callback = () => {\r\n            dispatch(execute(insClassification({ ...data, jobplan: JSON.stringify(jobplan), order: order||\"1\" })));\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true)\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_save),\r\n            callback\r\n        }))\r\n    });\r\n\r\n    return (\r\n        <div style={{ width: '100%' }}>\r\n            <form onSubmit={onSubmit}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    {!externalUse ?\r\n                    <div>\r\n                        <TemplateBreadcrumbs\r\n                            breadcrumbs={[...arrayBread,{ id: \"view-2\", name: `${t(langKeys.tipification)} ${t(langKeys.detail)}` }]}\r\n                            handleClick={setViewSelected}\r\n                        />\r\n                        <TitleDetail\r\n                            title={row ? `${row.title}` : t(langKeys.tipification)}\r\n                        />\r\n                    </div>\r\n                    : <div></div>}\r\n                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            type=\"button\"\r\n                            color=\"primary\"\r\n                            startIcon={<ClearIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: \"#FB5F5F\" }}\r\n                            onClick={() => {\r\n                                if (externalUse)\r\n                                    externalCancelHandler && externalCancelHandler();\r\n                                else\r\n                                    setViewSelected(\"view-1\")\r\n                            }}\r\n                        >{t(langKeys.back)}</Button>\r\n                        {edit &&\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                startIcon={<SaveIcon color=\"secondary\" />}\r\n                                style={{ backgroundColor: \"#55BD84\" }}\r\n                            >{t(langKeys.save)}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className={classes.containerDetail}>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldEdit\r\n                            label={t(langKeys.classification)}\r\n                            className=\"col-6\"\r\n                            onChange={(value) => setValue('title', value)}\r\n                            valueDefault={row?.title || \"\"}\r\n                            error={errors?.title?.message}\r\n                        />\r\n                        <div className='col-6' style={{ position: 'relative' }}>\r\n                            <>        \r\n                                <FieldEdit\r\n                                    label={t(langKeys.description)}\r\n                                    onChange={(value) => {setDescription(value);setValue('description', value)}}\r\n                                    valueDefault={description}\r\n                                    error={errors?.description?.message}\r\n                                />        \r\n                                <EmojiPickerZyx\r\n                                    bottom={-370}\r\n                                    style={{ position: \"absolute\", top: \"25px\", display: 'flex', justifyContent: 'end', right: 16 }}\r\n                                    onSelect={e => {setDescription(description + e.native);setValue('description', description + e.native)}} />\r\n    \r\n                            </>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldSelect\r\n                            label={t(langKeys.parent)}\r\n                            className=\"col-6\"\r\n                            valueDefault={auxVariables.parent}\r\n                            onChange={(value) => {\r\n                                setValue('parent', value?.classificationid || 0)\r\n                                seauxVariables({...auxVariables, parent: value?.classificationid || 0})\r\n                            }}\r\n                            error={errors?.parent?.message}\r\n                            data={dataParent}\r\n                            optionDesc=\"description\"\r\n                            optionValue=\"classificationid\"\r\n                        />\r\n                        <FieldEdit\r\n                            label={t(langKeys.path)}\r\n                            className=\"col-6\"\r\n                            valueDefault={row?.path || \"\"}\r\n                            onChange={(value) => setValue('path', value)}\r\n                            error={errors?.path?.message}\r\n                            disabled={true}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldSelect\r\n                            label={t(langKeys.status)}\r\n                            className=\"col-6\"\r\n                            valueDefault={row?.status || \"ACTIVO\"}\r\n                            onChange={(value) => setValue('status', value?.domainvalue || '')}\r\n                            error={errors?.status?.message}\r\n                            data={dataStatus}\r\n                            uset={true}\r\n                            prefixTranslation=\"status_\"\r\n                            optionDesc=\"domaindesc\"\r\n                            optionValue=\"domainvalue\"\r\n                        />\r\n                        {!externalUse && <FieldSelect\r\n                                label={t(langKeys.type)}\r\n                                className=\"col-6\"\r\n                                valueDefault={type}\r\n                                onChange={(value) => {\r\n                                    setValue('communicationchannel', \"\")\r\n                                    setValue('tags', \"\")\r\n                                    setValue('order', \"\")\r\n                                    setValue('parent', 0)\r\n                                    seauxVariables({\r\n                                        communicationchannel: \"\",\r\n                                        tags: \"\",\r\n                                        order: \"\",\r\n                                        parent: 0,\r\n                                    })\r\n                                    setValue('type', value?.value || ''); \r\n                                    seType(value?.value || '')\r\n                                }}\r\n                                error={errors?.type?.message}\r\n                                data={[\r\n                                    {value: \"CATEGORIA\", desc: t(langKeys.category)},\r\n                                    {value: \"TIPIFICACION\", desc: t(langKeys.tipification)},\r\n                                ]}\r\n                                uset={true}\r\n                                optionDesc=\"desc\"\r\n                                optionValue=\"value\"\r\n                            />\r\n                        }\r\n                    </div>\r\n                    {(type === \"TIPIFICACION\"|| externalUse) &&\r\n                    <div className=\"row-zyx\">\r\n                        <FieldMultiSelect\r\n                            label={t(langKeys.channel_plural)}\r\n                            className=\"col-6\"\r\n                            onChange={(value) => {\r\n                                setValue('communicationchannel', value.map((o: Dictionary) => o.domainvalue).join())\r\n                                seauxVariables({...auxVariables, communicationchannel: value.map((o: Dictionary) => o.domainvalue).join()})\r\n                            }}\r\n                            valueDefault={auxVariables.communicationchannel}\r\n                            error={errors?.communicationchannel?.message}\r\n                            data={datachannels}\r\n                            optionDesc=\"domaindesc\"\r\n                            optionValue=\"domainvalue\"\r\n                        />\r\n                        <FieldEdit\r\n                            label={t(langKeys.tag)}\r\n                            className=\"col-6\"\r\n                            valueDefault={row?.tags || \"\"}\r\n                            onChange={(value) => setValue('tags', value)}\r\n                            error={errors?.tags?.message}\r\n                        />\r\n                    </div>}\r\n                    {type === \"CATEGORIA\" &&\r\n                    <>\r\n                        <div className=\"row-zyx\">\r\n                            <FieldEdit\r\n                                label={t(langKeys.order)}\r\n                                className=\"col-6\"\r\n                                type=\"number\"\r\n                                valueDefault={order}\r\n                                error={errors?.order?.message}\r\n                                onChange={(value) => {\r\n                                    setOrder(value)\r\n                                    setValue('order', value)\r\n                                }}\r\n                                InputProps={{\r\n                                    inputProps: { min: 1,step: \"1\" }\r\n                                }}\r\n                            />\r\n                            <FieldSelect\r\n                                label={t(langKeys.catalogmaster)}\r\n                                className=\"col-6\"\r\n                                valueDefault={row?.metacatalogid || 0}\r\n                                onChange={(value) => {\r\n                                    setValue('metacatalogid', value?.metacatalogid || 0); \r\n                                }}\r\n                                data={datamastercatalog} //falta llenar la lista de maestro de catalogos\r\n                                optionDesc=\"catalogname\"\r\n                                optionValue=\"metacatalogid\"\r\n                            />\r\n                        </div>                        \r\n                    </>\r\n                    }                    \r\n                    {(type === \"TIPIFICACION\"|| externalUse) &&\r\n                    <>\r\n                        <div style={{ marginBottom: '16px' }}>\r\n                            <div className={classes.title}>{t(langKeys.actionplan)}</div>\r\n                            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                {edit ?\r\n                                    <TemplateSwitch\r\n                                        // className={classes.halfplace}\r\n                                        label={t(langKeys.hasactionplan)}\r\n                                        valueDefault={showAddAction ? \"x\" : \"\"}\r\n                                        onChange={(value) => setShowAddAction(value)}\r\n                                    /> :\r\n                                    <FieldView\r\n                                        label={t(langKeys.default_organization)}\r\n                                        value={row ? (row.bydefault ? t(langKeys.affirmative) : t(langKeys.negative)) : t(langKeys.negative)}\r\n                                    />\r\n                                }\r\n                                {(edit && showAddAction) &&\r\n                                    <div>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            type=\"button\"\r\n                                            color=\"primary\"\r\n                                            endIcon={<AddIcon style={{ color: \"#deac32\" }} />}\r\n                                            style={{ backgroundColor: \"#6c757d\" }}\r\n                                            onClick={() => addaction()}\r\n                                        >{t(langKeys.action)}\r\n                                        </Button>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n\r\n                            {\r\n                                (edit && showAddAction) && jobplan.map((e: any, i: number) => (\r\n                                    <div className=\"row-zyx\" key={i}>\r\n                                        <FieldEdit\r\n                                            label={t(langKeys.action)}\r\n                                            className=\"col-6\"\r\n                                            valueDefault={e.action ? e.action : \"\"}\r\n                                            onChange={(value) => setValueAction('action', value, i)}\r\n                                        />\r\n                                        <FieldSelect\r\n                                            label={t(langKeys.type)}\r\n                                            className=\"col-5\"\r\n                                            valueDefault={e.type ? e.type : \"Simple\"}\r\n                                            //onChange={(value) => setValue('status', value ? value.domainvalue : '')}\r\n                                            error={errors?.status?.message}\r\n                                            data={dataTypeAction}\r\n                                            optionDesc=\"dat\"\r\n                                            optionValue=\"dat\"\r\n                                            onChange={(value) => setValueAction('type', value.dat, i)}\r\n                                        />\r\n                                        <div className=\"col-1\" style={{ paddingTop: \"15px\" }}>\r\n                                            <IconButton aria-label=\"delete\" onClick={() => deleteitem(i)}>\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        </div>\r\n                                        {e.type === \"Variable\" ?\r\n                                            <FieldEdit\r\n                                                label={t(langKeys.variable)}\r\n                                                className={classes.dataaction}\r\n                                                valueDefault={e.variable ? e.variable : \"\"}\r\n                                                onChange={(value) => setValueAction('variable', value, i)}\r\n                                            />\r\n\r\n                                            : null}\r\n                                        {e.type === \"Request\" ?\r\n                                            <div>\r\n                                                <FieldEdit\r\n                                                    label={t(langKeys.endpoint)}\r\n                                                    className={classes.dataaction}\r\n                                                    valueDefault={e.endpoint ? e.endpoint : \"\"}\r\n                                                    onChange={(value) => setValueAction('endpoint', value, i)}\r\n                                                />\r\n                                                <FieldEditMulti\r\n                                                    label={t(langKeys.data)}\r\n                                                    className={classes.dataaction}\r\n                                                    valueDefault={e.data ? e.data : \"\"}\r\n                                                    onChange={(value) => setValueAction('data', value, i)}\r\n                                                    maxLength={2048}\r\n                                                />\r\n\r\n                                            </div>\r\n                                            : null}\r\n                                        <hr></hr>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n\r\n                        </div>\r\n                        <div style={{ display: 'flex', gap: '10px', justifyContent: 'flex-end' }}>\r\n\r\n                        </div>\r\n                    </>}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Tipifications: FC = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n    const mainResult = useSelector(state => state.main);\r\n    const executeResult = useSelector(state => state.main.execute);\r\n    const classes = useStyles();\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [insertexcel, setinsertexcel] = useState(false);\r\n    const [viewSelected, setViewSelected] = useState(\"view-1\");\r\n    const [rowSelected, setRowSelected] = useState<RowSelected>({ row: null, edit: false });\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const arrayBread = [\r\n        { id: \"view-0\", name: t(langKeys.configuration_plural) },\r\n        { id: \"view-1\", name: t(langKeys.classification_plural) },\r\n    ];\r\n    function redirectFunc(view:string){\r\n        if(view ===\"view-0\"){\r\n            history.push(paths.CONFIGURATION)\r\n            return;\r\n        }\r\n        setViewSelected(view)\r\n    }\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n\r\n            {\r\n                accessor: 'classificationid',\r\n                NoFilter: true,\r\n                isComponent: true,\r\n                minWidth: 60,\r\n                width: '1%',\r\n                Cell: (props: any) => {\r\n                    const row = props.cell.row.original;\r\n                    return (\r\n                        <TemplateIcons\r\n                            viewFunction={() => handleView(row)}\r\n                            deleteFunction={() => handleDelete(row)}\r\n                            editFunction={() => handleEdit(row)}\r\n                        />\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                Header: t(langKeys.title),\r\n                accessor: 'title',\r\n                NoFilter: true\r\n            },\r\n            {\r\n                Header: t(langKeys.description),\r\n                accessor: 'description',\r\n                NoFilter: true\r\n            },\r\n            {\r\n                Header: t(langKeys.type),\r\n                accessor: 'type',\r\n                prefixTranslation: 'type_',\r\n                NoFilter: true,\r\n                Cell: (props: any) => {\r\n                    const { type } = props.cell.row.original;\r\n                    return (t(`type_${type}`) || \"\").toUpperCase()\r\n                }\r\n            },\r\n            {\r\n                Header: t(langKeys.parent),\r\n                accessor: 'parentdesc',\r\n                NoFilter: true\r\n            },\r\n            {\r\n                Header: t(langKeys.order),\r\n                accessor: 'order',\r\n                NoFilter: true\r\n            },\r\n            {\r\n                Header: t(langKeys.tag),\r\n                accessor: 'tags',\r\n                NoFilter: true\r\n            },\r\n\r\n            {\r\n                Header: t(langKeys.channel),\r\n                accessor: 'communicationchanneldesc',\r\n                NoFilter: true\r\n            },\r\n            {\r\n                Header: t(langKeys.status),\r\n                accessor: 'statusdesc',\r\n                NoFilter: true,\r\n                prefixTranslation: 'status_',\r\n                Cell: (props: any) => {\r\n                    const { status } = props.cell.row.original;\r\n                    return (t(`status_${status}`.toLowerCase()) || \"\").toUpperCase()\r\n                }\r\n            }\r\n        ],\r\n        []\r\n    );\r\n    const fetchData = () => {\r\n        dispatch(getCollection(getClassificationSel(0)));\r\n        dispatch(getMultiCollection([\r\n            getValuesFromDomain(\"ESTADOGENERICO\"),\r\n            getParentSel(),\r\n            getValuesFromDomain(\"TIPOCANAL\"),\r\n            getValuesForTree(\"TIPIFICACION\"),\r\n            getCatalogMasterList(),\r\n        ]));\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n        \r\n        return () => {\r\n            dispatch(resetAllMain());\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeResult.loading && !executeResult.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(insertexcel?langKeys.successful_edit: langKeys.successful_delete) }))\r\n                setinsertexcel(false)\r\n                fetchData();\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            } else if (executeResult.error) {\r\n                const errormessage = t(executeResult.code || \"error_unexpected_error\", { module: t(langKeys.tipification).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            }\r\n        }\r\n    }, [executeResult, waitSave])\r\n\r\n    const handleRegister = () => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row: null, edit: true });\r\n    }\r\n\r\n    const handleView = (row: Dictionary) => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row, edit: false });\r\n    }\r\n\r\n    const handleEdit = (row: Dictionary) => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row, edit: true });\r\n    }\r\n\r\n    const handleDelete = (row: Dictionary) => {\r\n        const callback = () => {\r\n            dispatch(execute(insClassification({ ...row, operation: 'DELETE', status: 'ELIMINADO', id: row.classificationid, parent: row.parentid })));\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true);\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_delete),\r\n            callback\r\n        }))\r\n    }\r\n\r\n\r\n    const importCSV = async (files: any[]) => {\r\n        const file = files[0];\r\n        if (file) {\r\n            let data: any = (await uploadExcel(file, undefined) as any[])\r\n            data=data.filter((d: any) => !['', null, undefined].includes(d.classification)\r\n                    && !['', null, undefined].includes(d.channels)    \r\n                    && (['', null, undefined].includes(d.parent) || Object.keys(mainResult.multiData.data[1].data.reduce((a,d) => ({...a, [d.classificationid]: d.title}), {0: ''})).includes('' + d.parent))\r\n                );\r\n                \r\n            if (data.length > 0) {\r\n                dispatch(showBackdrop(true));\r\n                dispatch(execute({\r\n                    header: null,\r\n                    detail: data.map((x: any) => insClassification({\r\n                        ...x,\r\n                        title: x.classification,\r\n                        description: x.description,\r\n                        communicationchannel: x.channels,\r\n                        tags: x.tag || '',\r\n                        parent: x.parent || 0,\r\n                        operation: \"INSERT\",\r\n                        type: 'TIPIFICACION',\r\n                        oder: '1',\r\n                        status: x.status || \"ACTIVO\",\r\n                        id: 0,\r\n                    }))\r\n                }, true));\r\n                setinsertexcel(true)\r\n                setWaitSave(true)\r\n            }else{\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: t(langKeys.error_invaliddata) }))\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleTemplate = () => {\r\n        const data = [\r\n            {},\r\n            {},\r\n            mainResult.multiData.data[2].data.reduce((a,d) => ({...a, [d.domainvalue]: d.domaindesc}), {}),\r\n            {},\r\n            mainResult.multiData.data[3].data.reduce((a,d) => ({...a, [d.classificationid]: d.description}), {0: ''}),\r\n            mainResult.multiData.data[0].data.reduce((a,d) => ({...a, [d.domainvalue]: d.domainvalue}), {})\r\n        ];\r\n        const header = ['classification', 'description', 'channels', 'tag', 'parent', 'status'];\r\n        exportExcel(t(langKeys.template), templateMaker(data, header));\r\n    }\r\n\r\n    if (viewSelected === \"view-1\") {\r\n\r\n        if (mainResult.mainData.error) {\r\n            return <h1>ERROR</h1>;\r\n        }\r\n\r\n        return (\r\n            \r\n            <div style={{width:\"100%\"}}>\r\n                <div style={{ display: 'flex',  justifyContent: 'space-between',  alignItems: 'center'}}>\r\n                    <TemplateBreadcrumbs\r\n                        breadcrumbs={arrayBread}\r\n                        handleClick={redirectFunc}\r\n                    />\r\n                </div>\r\n                <Fragment>\r\n                    <TableZyx\r\n                        columns={columns}\r\n                        titlemodule={t(langKeys.tipification, { count: 2 })}\r\n                        data={mainResult.mainData.data}\r\n                        loading={mainResult.mainData.loading}\r\n                        download={true}\r\n                        register={true}\r\n                        onClickRow={handleEdit}\r\n                        importCSV={importCSV}\r\n                        handleTemplate={handleTemplate}\r\n                        handleRegister={handleRegister}\r\n                        ButtonsElement={()=>\r\n                            <>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    type=\"button\"\r\n                                    color=\"primary\"\r\n                                    startIcon={<ClearIcon color=\"secondary\" />}\r\n                                    style={{ backgroundColor: \"#FB5F5F\" }}\r\n                                    onClick={() => history.push(paths.CONFIGURATION)}\r\n                                >{t(langKeys.back)}</Button>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    type=\"button\"\r\n                                    color=\"primary\"\r\n                                    style={{ backgroundColor: \"#7721ad\" }}\r\n                                    onClick={() => setOpenDialog(true)}\r\n                                    startIcon={<AccountTreeIcon color=\"secondary\" />}\r\n                                >{t(langKeys.opendrilldown)}\r\n                                </Button>\r\n                            </>\r\n                        }\r\n                    />\r\n                    <DialogZyx\r\n                        open={openDialog}\r\n                        title={t(langKeys.organizationclass)}\r\n                        buttonText1={t(langKeys.close)}\r\n                        //buttonText2={t(langKeys.select)}\r\n                        handleClickButton1={() => setOpenDialog(false)}\r\n                        handleClickButton2={() => setOpenDialog(false)}\r\n                    >   \r\n                    <TreeView\r\n                        className={classes.treeviewroot}\r\n                        defaultCollapseIcon={<ExpandMoreIcon />}\r\n                        defaultExpandIcon={<ChevronRightIcon />}\r\n                    >\r\n                            <TreeItemsFromData\r\n                                dataClassTotal={mainResult.multiData.data[3] && mainResult.multiData.data[3].success ? mainResult.multiData.data[3].data : []}\r\n                            />\r\n                        </TreeView>\r\n                        <div className=\"row-zyx\">\r\n                        </div>\r\n                    </DialogZyx>\r\n                </Fragment>\r\n            </div>\r\n        )\r\n    }\r\n    else if (viewSelected === \"view-2\") {\r\n        return (\r\n            <DetailTipification\r\n                data={rowSelected}\r\n                setViewSelected={redirectFunc}\r\n                multiData={mainResult.multiData.data}\r\n                fetchData={fetchData}\r\n                arrayBread={arrayBread}\r\n            />\r\n        )\r\n    } else\r\n        return null;\r\n\r\n}\r\n\r\nexport default Tipifications;"],"sourceRoot":""}