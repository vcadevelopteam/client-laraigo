{"version":3,"sources":["../node_modules/360dialog-connect-button/dist/index.js","../../src/open-popup.js","../../src/ConnectButton.tsx","pages/channels/ChannelAddWhatsAppOnboarding.tsx","store/channel/actions.ts"],"names":["module","exports","require","windowObjectReference","previousUrl","receiveMessage","event","baseUrl","origin","window","location","search","data","className","partnerId","callback","requestedNumber","label","f","env","queryParameters","props","permissionUrl","values","Object","keys","forEach","k","idx","getUrlParameter","params","name","replace","results","RegExp","exec","decodeURIComponent","useEffect","client","channels","revokedChannels","callbackObj","substring","length","split","revokedChannelsArray","opener","postMessage","close","React","onClick","url","removeEventListener","strWindowFeatures","closed","open","focus","addEventListener","useChannelAddStyles","makeStyles","theme","button","fontSize","fontWeight","padding","textTransform","width","ChannelAddWhatsAppOnboarding","dispatch","useDispatch","t","useTranslation","classes","executeResult","useSelector","state","channel","successinsert","history","useHistory","useLocation","mainResult","channelList","numberResult","requestGetNumberList","whatsAppData","useState","channelRegister","setChannelRegister","colorIcon","setColorIcon","dialogClient","setDialogClient","dialogChannels","setDialogChannels","apiUrls","DIALOG360PARTNERID","fields","setFields","allowInsert","setAllowInsert","showLastStep","setShowLastStep","numberList","setNumberList","waitSave","setWaitSave","waitList","setWaitList","a","insertChannel","push","paths","CHANNELS","query","URLSearchParams","get","loading","showSnackbar","show","severity","message","langKeys","successful_register","showBackdrop","goBack","errormessage","code","property","toLocaleLowerCase","success","getPhoneList","join","style","color","href","e","preventDefault","CHANNELS_ADD","previoustext","textAlign","connect_yourwhatsappnumber","marginLeft","marginRight","maxWidth","marginBottom","connect_yourwhatsappnumberdetail","callbackEvent","margin","backgroundColor","border","borderRadius","display","justifyItems","alignItems","justifyContent","cursor","connect_whatsappnumber","redirect_url","select_whatsappnumber","onChange","value","partialFields","parameters","communicationchannelsite","phone","communicationchannelowner","channelId","service","channelid","setValueField","linked_whatsappnumber","valueDefault","optionDesc","optionValue","commchannelfinishreg","description","setNameField","givechannelname","lineHeight","mb","givechannelcolor","fill","hex","coloricon","prev","paddingLeft","finishRegister","disabled","variant","finishreg","getChannelsList","accessToken","appId","callAPI","ChannelsService","getPagelist","types","actionTypes","CHANNELS_SUCCESS","failure","CHANNELS_FAILURE","type","requestBody","insertchnl","CHANNELS_INSERTSUCCESS","activateChannel","ACTIVATECHANNEL","ACTIVATECHANNEL_SUCCESS","ACTIVATECHANNEL_FAILURE","deleteChannel","deletechnl","checkPaymentPlan","CHECK_PAYMENTPLAN","CHECK_PAYMENTPLAN_SUCCESS","CHECK_PAYMENTPLAN_FAILURE","insertChannel2","payload","chatIconFile","interface","iconbutton","headerIconFile","iconheader","botIconFile","iconbot","bubbleIconFile","bubble","iconbubble","chatIcon","headerIcon","botIcon","bubbleIcon","fd","FormData","append","CommonService","uploadFile","INSERT_CHANNEL","INSERT_CHANNEL_FAILURE","INSERT_CHANNEL_SUCCESS","resetInsertChannel","INSERT_CHANNEL_RESET","editChannel","channelType","editchnl","main","EDIT_CHANNEL","EDIT_CHANNEL_FAILURE","EDIT_CHANNEL_SUCCESS","resetEditChannel","EDIT_CHANNEL_RESET","getFacebookPages","getPagelistSub","FACEBOOK_PAGES","FACEBOOK_PAGES_SUCCESS","FACEBOOK_PAGES_FAILURE","resetGetFacebookPages","FACEBOOK_PAGES_RESET","getMessengerPages","MESSENGER_PAGES","MESSENGER_PAGES_SUCCESS","MESSENGER_PAGES_FAILURE","resetGetMessengerPages","MESSENGER_PAGES_RESET","getInstagramPages","INSTAGRAM_PAGES","INSTAGRAM_PAGES_SUCCESS","INSTAGRAM_PAGES_FAILURE","resetGetInstagramPages","INSTAGRAM_PAGES_RESET","getInstagramDMPages","INSTAGRAMDM_PAGES","INSTAGRAMDM_PAGES_SUCCESS","INSTAGRAMDM_PAGES_FAILURE","resetGetInstagramDMPages","INSTAGRAMDM_PAGES_RESET","synchronizeTemplate","request","SYNCHRONIZE_TEMPLATE_FAILURE","SYNCHRONIZE_TEMPLATE","SYNCHRONIZE_TEMPLATE_SUCCESS","addTemplate","ADD_TEMPLATE_FAILURE","ADD_TEMPLATE","ADD_TEMPLATE_SUCCESS","deleteTemplate","DELETE_TEMPLATE_FAILURE","DELETE_TEMPLATE","DELETE_TEMPLATE_SUCCESS","PHONE_LIST","PHONE_LIST_SUCCESS","PHONE_LIST_FAILURE"],"mappings":"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","file":"static/js/74.e9759b84.chunk.js","sourcesContent":["\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dialog-connect-button.cjs.production.min.js')\n} else {\n  module.exports = require('./dialog-connect-button.cjs.development.js')\n}\n","let windowObjectReference = null;\nlet previousUrl = null;\n\nexport const openSignInWindow = (url, name, baseUrl) => {\n  // remove any existing event listeners\n  window.removeEventListener(\"message\", receiveMessage);\n\n  // window features\n  const strWindowFeatures =\n    \"toolbar=no, menubar=no, width=600, height=900, top=100, left=100\";\n\n  if (windowObjectReference === null || windowObjectReference.closed) {\n    /* if the pointer to the window object in memory does not exist\n      or if such pointer exists but the window was closed */\n    windowObjectReference = window.open(url, name, strWindowFeatures);\n  } else if (previousUrl !== url) {\n    /* if the resource to load is different,\n      then we load it in the already opened secondary window and then\n      we bring such window back on top/in front of its parent window. */\n    windowObjectReference = window.open(url, name, strWindowFeatures);\n    windowObjectReference.focus();\n  } else {\n    /* else the window reference must exist and the window\n      is not closed; therefore, we can bring it back on top of any other\n      window with the focus() method. There would be no need to re-create\n      the window or to reload the referenced resource. */\n    windowObjectReference.focus();\n  }\n\n  // add the listener for receiving a message from the popup\n  window.addEventListener(\n    \"message\",\n    (event) => receiveMessage(event, baseUrl),\n    false\n  );\n  // assign the previous URL\n  previousUrl = url;\n};\n\n\nconst receiveMessage = (event, baseUrl) => {\n  if (event.origin != baseUrl) {\n    return;\n  }\n\n  const { data } = event;\n  const redirectUrl = `${data}`;\n  window.location.search = redirectUrl;\n  // window.history.replaceState({}, \"\", redirectUrl);\n};","import React, {useEffect} from \"react\"\nimport { openSignInWindow } from \"./open-popup\";\n\n\ntype CallbackObject = {\n    client: string\n    channels: string[]\n    revokedChannels?: string[]\n}\n\ntype QueryParameters = {\n  email?: string\n  name?: string\n  state?: string\n  redirect_url?: string\n  partner?: string\n}\n\n\ninterface IConnectButton extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  className?: string;\n  partnerId: string;\n  callback: (v: CallbackObject) => void;\n  requestedNumber?: string;\n  label?: React.ReactNode;\n  env?: \"local\" | \"staging\" | \"rc\" | \"prod\";\n  queryParameters?: QueryParameters\n}\n\nconst ConnectButton = ({\n  className,\n  partnerId,\n  callback,\n  requestedNumber,\n  label = \"Connect 360dialog\",\n  env=\"prod\",\n  queryParameters,\n  ...props\n}\n: IConnectButton) => {\n\n  const baseUrl =\n    (env === 'local' && 'http://0.0.0.0:8082') ||\n    (env === 'staging' && 'https://staging-admin.360dialog.io') ||\n    (env === 'rc' && 'https://rc-admin.360dialog.io') ||\n    'https://hub.360dialog.com';\n    \n\n  let permissionUrl = requestedNumber\n    ? `${baseUrl}/dashboard/app/${partnerId}/permissions?number=${requestedNumber}`\n    : `${baseUrl}/dashboard/app/${partnerId}/permissions`;\n\n  if (queryParameters) {\n    let values = Object.values(queryParameters)\n    Object.keys(queryParameters).forEach((k, idx) => {\n      if (idx === 0 && !requestedNumber) {\n        permissionUrl = permissionUrl + `?${k}=${values[idx]}`;\n      } else {\n        permissionUrl = permissionUrl + `&${k}=${values[idx]}`;\n      }\n    })\n  }\n\n\n  const getUrlParameter = (params: string, name: string) => {\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n    var results = regex.exec(params);\n    return results === null\n      ? \"\"\n      : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n  };\n\n  useEffect(() => {\n    const params = window.location.search;\n    const client = getUrlParameter(params, \"client\");\n    const channels = getUrlParameter(params, \"channels\");\n    const revokedChannels = getUrlParameter(params, 'revoked');\n\n    if (client && channels) {\n      const channelsArray = channels\n        .substring(1, channels.length - 1)\n        .split(\",\");\n      \n        let callbackObj: CallbackObject = {\n          client: client,\n          channels: channelsArray,\n        };\n\n        if (revokedChannels) {\n          const revokedChannelsArray = revokedChannels\n            .substring(1, revokedChannels.length - 1)\n            .split(',');\n          callbackObj['revokedChannels'] = revokedChannelsArray;\n        }\n        callback(callbackObj);\n\n      // remove search parameters from URL after fetching them\n      // window.history.replaceState(null, \"\", window.location.pathname);\n    }\n\n    // send to parent (opener) window and close small window\n    if (window.opener) {\n      window.opener.postMessage(params);\n      window.close();\n    }\n  }, []);\n\n  return (\n    <button\n      className={className ? className : '360dialog-connect-button'}\n      onClick={() =>\n        openSignInWindow(\n          permissionUrl,\n          'connect-360dialog',\n          window.location.origin\n        )\n      }\n      {...props}\n    >\n      {label}\n    </button>\n  );\n};\n\nexport default ConnectButton","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { apiUrls } from \"common/constants\";\r\nimport { ColorInput, FieldEdit, FieldSelect } from \"components\";\r\nimport { ConnectButton } from \"360dialog-connect-button\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { insertChannel, getPhoneList } from \"store/channel/actions\";\r\nimport { langKeys } from \"lang/keys\";\r\nimport { makeStyles, Breadcrumbs, Button, Box } from '@material-ui/core';\r\nimport { showBackdrop, showSnackbar } from 'store/popus/actions';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport { useSelector } from \"hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { WhatsappIcon } from \"icons\";\r\n\r\nimport Link from '@material-ui/core/Link';\r\nimport paths from \"common/constants/paths\";\r\n\r\nconst useChannelAddStyles = makeStyles(theme => ({\r\n    button: {\r\n        fontSize: '14px',\r\n        fontWeight: 500,\r\n        padding: 12,\r\n        textTransform: 'initial',\r\n        width: \"180px\",\r\n    },\r\n}));\r\n\r\ninterface whatsAppData {\r\n    row?: any;\r\n    typeWhatsApp?: string;\r\n\r\n}\r\n\r\nexport const ChannelAddWhatsAppOnboarding: FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const classes = useChannelAddStyles();\r\n    const executeResult = useSelector(state => state.channel.successinsert);\r\n    const history = useHistory();\r\n    const location = useLocation<whatsAppData>();\r\n    const mainResult = useSelector(state => state.channel.channelList);\r\n    const numberResult = useSelector(state => state.channel.requestGetNumberList);\r\n    const whatsAppData = location.state as whatsAppData | null;\r\n\r\n    const [channelRegister, setChannelRegister] = useState(true);\r\n    const [colorIcon, setColorIcon] = useState(\"#4AC959\");\r\n    const [dialogClient, setDialogClient] = useState<string | null>(null);\r\n    const [dialogChannels, setDialogChannels] = useState<string | null>(null);\r\n    const [fields, setFields] = useState({\r\n        \"method\": \"UFN_COMMUNICATIONCHANNEL_INS\",\r\n        \"parameters\": {\r\n            \"apikey\": \"\",\r\n            \"chatflowenabled\": true,\r\n            \"color\": \"\",\r\n            \"coloricon\": \"#4AC959\",\r\n            \"communicationchannelowner\": \"\",\r\n            \"communicationchannelsite\": \"\",\r\n            \"description\": \"\",\r\n            \"form\": \"\",\r\n            \"icons\": \"\",\r\n            \"id\": 0,\r\n            \"integrationid\": \"\",\r\n            \"other\": \"\",\r\n            \"type\": \"\",\r\n            \"voximplantcallsupervision\": false\r\n        },\r\n        \"service\": {\r\n            \"channelid\": \"\",\r\n            \"partnerid\": apiUrls.DIALOG360PARTNERID\r\n        },\r\n        \"type\": \"WHATSAPP\",\r\n    });\r\n    const [allowInsert, setAllowInsert] = useState(false);\r\n    const [showLastStep, setShowLastStep] = useState(false);\r\n    const [numberList, setNumberList] = useState<any>([]);\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const [waitList, setWaitList] = useState(false);\r\n\r\n    async function finishRegister() {\r\n        setAllowInsert(true);\r\n        setWaitSave(true);\r\n        dispatch(insertChannel(fields));\r\n    }\r\n\r\n    async function goBack() {\r\n        history.push(paths.CHANNELS);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const query = new URLSearchParams(location.search);\r\n        if (query.get('client')) {\r\n            setDialogClient(query.get('client') || null);\r\n        }\r\n        else {\r\n            setDialogClient(null);\r\n        }\r\n        if (query.get('channels')) {\r\n            setDialogChannels(query.get('channels') || null);\r\n        }\r\n        else {\r\n            setDialogChannels(null);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!mainResult.loading && allowInsert) {\r\n            if (executeResult) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_register) }))\r\n                dispatch(showBackdrop(false));\r\n                setAllowInsert(false);\r\n                setWaitSave(false);\r\n                goBack();\r\n            } else if (!executeResult) {\r\n                const errormessage = t(mainResult.code || \"error_unexpected_error\", { module: t(langKeys.property).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setAllowInsert(false);\r\n                setWaitSave(false);\r\n            }\r\n        }\r\n    }, [mainResult])\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            dispatch(showBackdrop(false));\r\n            setWaitSave(false);\r\n        }\r\n    }, [mainResult])\r\n\r\n    useEffect(() => {\r\n        if (waitList) {\r\n            if (!numberResult.loading) {\r\n                if (numberResult.data) {\r\n                    dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.success) }))\r\n                    dispatch(showBackdrop(false));\r\n                    setWaitList(false);\r\n\r\n                    if (numberResult.data) {\r\n                        setNumberList(numberResult.data || []);\r\n                    }\r\n                    else {\r\n                        setNumberList([]);\r\n                    }\r\n                } else {\r\n                    dispatch(showSnackbar({ show: true, severity: \"error\", message: t(numberResult.code || \"error_unexpected_error\", { module: t(langKeys.property).toLocaleLowerCase() }) }))\r\n                    dispatch(showBackdrop(false));\r\n                    setWaitList(false);\r\n                }\r\n            }\r\n        }\r\n    }, [numberResult, waitList])\r\n\r\n    useEffect(() => {\r\n        if (dialogClient && dialogChannels) {\r\n            dispatch(getPhoneList({ partnerId: apiUrls.DIALOG360PARTNERID, channelList: ((dialogChannels || '').split(\"[\").join(\"\").split(\"]\").join(\"\")).split(',') }));\r\n            dispatch(showBackdrop(true));\r\n            setWaitList(true);\r\n            setNumberList([]);\r\n        }\r\n    }, [dialogClient, dialogChannels])\r\n\r\n    function setNameField(value: any) {\r\n        setChannelRegister(value === \"\");\r\n        let partialFields = fields;\r\n        partialFields.parameters.description = value;\r\n        setFields(partialFields);\r\n    }\r\n\r\n    function setValueField(value: any) {\r\n        if (value) {\r\n            let partialFields = fields;\r\n            partialFields.parameters.communicationchannelsite = value?.phone || \"\";\r\n            partialFields.parameters.communicationchannelowner = value?.channelId || \"\";\r\n            partialFields.service.channelid = value?.channelId || \"\";\r\n            setFields(partialFields);\r\n\r\n            setShowLastStep(true);\r\n        }\r\n        else {\r\n            let partialFields = fields;\r\n            partialFields.parameters.communicationchannelsite = \"\";\r\n            partialFields.parameters.communicationchannelowner = \"\";\r\n            partialFields.service.channelid = \"\";\r\n            setFields(partialFields);\r\n\r\n            setShowLastStep(false);\r\n        }\r\n    }\r\n\r\n    const handleCallback = (callbackEvent: any) => {\r\n        setDialogClient(null);\r\n        setDialogChannels(null);\r\n\r\n        if (callbackEvent) {\r\n            if (callbackEvent.client) {\r\n                setDialogClient(callbackEvent.client || null);\r\n            }\r\n            if (callbackEvent.channels) {\r\n                setDialogChannels(callbackEvent.channels || null);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ width: '100%' }}>\r\n            <Breadcrumbs aria-label=\"breadcrumb\">\r\n                <Link color=\"textSecondary\" key={\"mainview\"} href=\"/\" onClick={(e) => { e.preventDefault(); history.push(paths.CHANNELS_ADD, whatsAppData) }}>\r\n                    {t(langKeys.previoustext)}\r\n                </Link>\r\n            </Breadcrumbs>\r\n            <div>\r\n                <div>\r\n                    <div style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"2em\", color: \"#7721ad\", padding: \"16px\" }}>{t(langKeys.connect_yourwhatsappnumber)}</div>\r\n                    <div style={{ textAlign: \"center\", fontSize: \"1.1em\", color: \"#969ea5\", padding: \"16px\", marginLeft: \"auto\", marginRight: \"auto\", maxWidth: \"1200px\", marginBottom: \"10px\" }}>{t(langKeys.connect_yourwhatsappnumberdetail)}</div>\r\n                    <ConnectButton\r\n                        callback={handleCallback}\r\n                        partnerId={apiUrls.DIALOG360PARTNERID}\r\n                        style={{ margin: \"auto\", backgroundColor: \"#7721ad\", color: \"#fff\", border: \"1px solid #7721ad\", borderRadius: \"4px\", padding: \"10px\", textTransform: \"none\", display: \"flex\", textAlign: \"center\", justifyItems: \"center\", alignItems: \"center\", justifyContent: \"center\", cursor: \"pointer\" }}\r\n                        label={t(langKeys.connect_whatsappnumber)}\r\n                        queryParameters={{\r\n                            redirect_url: `${window.location.origin}/channels/:id/add/ChannelAddWhatsAppOnboarding`\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <div style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"2em\", color: \"#7721ad\", padding: \"20px\" }}>{t(langKeys.select_whatsappnumber)}</div>\r\n                    <div className=\"row-zyx\">\r\n                        <div className=\"col-3\"></div>\r\n                        <FieldSelect\r\n                            onChange={(value) => setValueField(value)}\r\n                            label={t(langKeys.linked_whatsappnumber)}\r\n                            className=\"col-6\"\r\n                            valueDefault={fields.parameters.communicationchannelowner}\r\n                            data={numberList}\r\n                            optionDesc=\"phone\"\r\n                            optionValue=\"channelId\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {showLastStep && <>\r\n                    <div style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"2em\", color: \"#7721ad\", padding: \"16px\", marginLeft: \"auto\", marginRight: \"auto\", maxWidth: \"800px\" }}>{t(langKeys.commchannelfinishreg)}</div>\r\n                    <div className=\"row-zyx\">\r\n                        <div className=\"col-3\"></div>\r\n                        <FieldEdit\r\n                            onChange={(value) => setNameField(value)}\r\n                            label={t(langKeys.givechannelname)}\r\n                            className=\"col-6\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <div className=\"col-3\"></div>\r\n                        <div className=\"col-6\">\r\n                            <Box fontWeight={500} lineHeight=\"18px\" fontSize={14} mb={1} color=\"textPrimary\">\r\n                                {t(langKeys.givechannelcolor)}\r\n                            </Box>\r\n                            <div style={{ display: \"flex\", justifyContent: \"space-around\", alignItems: \"center\" }}>\r\n                                <WhatsappIcon style={{ fill: `${colorIcon}`, width: \"100px\" }} />\r\n                                <ColorInput\r\n                                    hex={fields.parameters.coloricon}\r\n                                    onChange={e => {\r\n                                        setFields(prev => ({\r\n                                            ...prev,\r\n                                            parameters: { ...prev.parameters, coloricon: e.hex, color: e.hex },\r\n                                        }));\r\n                                        setColorIcon(e.hex)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ paddingLeft: \"80%\" }}>\r\n                        <Button\r\n                            onClick={() => { finishRegister() }}\r\n                            className={classes.button}\r\n                            disabled={channelRegister || mainResult.loading}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >{t(langKeys.finishreg)}\r\n                        </Button>\r\n                    </div>\r\n                </>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelAddWhatsAppOnboarding","import { IActionCall, IChannel, IChatWebAdd, IRequestBody } from \"@types\";\r\nimport { ChannelsService, CommonService } from \"network\";\r\nimport actionTypes from \"./actionTypes\";\r\n\r\nexport const getChannelsList = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelist(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_SUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const getChannelsListSub = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_SUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const insertChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.insertchnl(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_INSERTSUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const activateChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.activateChannel(requestBody),\r\n    types: {\r\n        loading: actionTypes.ACTIVATECHANNEL,\r\n        success: actionTypes.ACTIVATECHANNEL_SUCCESS,\r\n        failure: actionTypes.ACTIVATECHANNEL_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const deleteChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.deletechnl(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_INSERTSUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const checkPaymentPlan = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.checkPaymentPlan(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHECK_PAYMENTPLAN,\r\n        success: actionTypes.CHECK_PAYMENTPLAN_SUCCESS,\r\n        failure: actionTypes.CHECK_PAYMENTPLAN_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetChannelsList = (): IActionCall => ({ type: actionTypes.CHANNELS_RESET });\r\n\r\nexport const resetGetChannelsSubList = (): IActionCall => ({ type: actionTypes.CHANNELS_RESET });\r\n\r\nexport const resetChannelInsert = (): IActionCall => ({ type: actionTypes.CHANNELS_INSERTSUCCESS_RESET });\r\n\r\nexport const insertChannel2 = (payload: IRequestBody<IChatWebAdd>): IActionCall => ({\r\n    callAPI: async () => {\r\n        const chatIconFile = payload.service!.interface.iconbutton as File | null;\r\n        const headerIconFile = payload.service!.interface.iconheader as File | null;\r\n        const botIconFile = payload.service!.interface.iconbot as File | null;\r\n        const bubbleIconFile = payload.service!.bubble.iconbubble as File | null;\r\n\r\n        let chatIcon = \"\";\r\n        let headerIcon = \"\";\r\n        let botIcon = \"\";\r\n        let bubbleIcon = \"\";\r\n\r\n        if (chatIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', chatIconFile, chatIconFile.name);\r\n            chatIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (headerIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', headerIconFile, headerIconFile.name);\r\n            headerIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (botIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', botIconFile, botIconFile.name);\r\n            botIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (bubbleIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', bubbleIconFile, bubbleIconFile.name);\r\n            bubbleIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        payload.service!.interface.iconbutton = chatIcon;\r\n        payload.service!.interface.iconheader = headerIcon;\r\n        payload.service!.interface.iconbot = botIcon;\r\n        payload.service!.bubble.iconbubble = bubbleIcon;\r\n\r\n        return ChannelsService.insertchnl(payload);\r\n    },\r\n    types: {\r\n        loading: actionTypes.INSERT_CHANNEL,\r\n        failure: actionTypes.INSERT_CHANNEL_FAILURE,\r\n        success: actionTypes.INSERT_CHANNEL_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetInsertChannel = () => ({ type: actionTypes.INSERT_CHANNEL_RESET });\r\n\r\nexport const editChannel = (payload: IRequestBody<IChannel | IChatWebAdd>, channelType?: string): IActionCall => ({\r\n    callAPI: async () => {\r\n        if (channelType === \"CHAZ\" || channelType === \"SMOOCHANDROID\") {\r\n            const service = payload.service as IChatWebAdd;\r\n            let chatIcon = service.interface.iconbutton as File | string | null;\r\n            let headerIcon = service.interface.iconheader as File | string | null;\r\n            let botIcon = service.interface.iconbot as File | string | null;\r\n            let bubbleIcon = service.bubble.iconbubble as File | string | null;\r\n\r\n            if (chatIcon && typeof chatIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', chatIcon, chatIcon.name);\r\n                chatIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (headerIcon && typeof headerIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', headerIcon, headerIcon.name);\r\n                headerIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (botIcon && typeof botIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', botIcon, botIcon.name);\r\n                botIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (bubbleIcon && typeof bubbleIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', bubbleIcon, bubbleIcon.name);\r\n                bubbleIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            (payload.service as IChatWebAdd).interface.iconbutton = chatIcon;\r\n            (payload.service as IChatWebAdd).interface.iconheader = headerIcon;\r\n            (payload.service as IChatWebAdd).interface.iconbot = botIcon;\r\n            (payload.service as IChatWebAdd).bubble.iconbubble = bubbleIcon;\r\n\r\n            return ChannelsService.editchnl(payload);\r\n        }\r\n        return CommonService.main(payload);\r\n    },\r\n    types: {\r\n        loading: actionTypes.EDIT_CHANNEL,\r\n        failure: actionTypes.EDIT_CHANNEL_FAILURE,\r\n        success: actionTypes.EDIT_CHANNEL_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetEditChannel = () => ({ type: actionTypes.EDIT_CHANNEL_RESET });\r\n\r\nexport const getFacebookPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.FACEBOOK_PAGES,\r\n        success: actionTypes.FACEBOOK_PAGES_SUCCESS,\r\n        failure: actionTypes.FACEBOOK_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetFacebookPages = () => ({ type: actionTypes.FACEBOOK_PAGES_RESET });\r\n\r\nexport const getMessengerPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.MESSENGER_PAGES,\r\n        success: actionTypes.MESSENGER_PAGES_SUCCESS,\r\n        failure: actionTypes.MESSENGER_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetMessengerPages = () => ({ type: actionTypes.MESSENGER_PAGES_RESET });\r\n\r\nexport const getInstagramPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.INSTAGRAM_PAGES,\r\n        success: actionTypes.INSTAGRAM_PAGES_SUCCESS,\r\n        failure: actionTypes.INSTAGRAM_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetInstagramPages = () => ({ type: actionTypes.INSTAGRAM_PAGES_RESET });\r\n\r\nexport const getInstagramDMPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.INSTAGRAMDM_PAGES,\r\n        success: actionTypes.INSTAGRAMDM_PAGES_SUCCESS,\r\n        failure: actionTypes.INSTAGRAMDM_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetInstagramDMPages = () => ({ type: actionTypes.INSTAGRAMDM_PAGES_RESET });\r\n\r\nexport const synchronizeTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.synchronizeTemplate(request),\r\n    types: {\r\n        failure: actionTypes.SYNCHRONIZE_TEMPLATE_FAILURE,\r\n        loading: actionTypes.SYNCHRONIZE_TEMPLATE,\r\n        success: actionTypes.SYNCHRONIZE_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetSynchronizeTemplate = (): IActionCall => ({ type: actionTypes.SYNCHRONIZE_TEMPLATE_RESET });\r\n\r\nexport const addTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.addTemplate(request),\r\n    types: {\r\n        failure: actionTypes.ADD_TEMPLATE_FAILURE,\r\n        loading: actionTypes.ADD_TEMPLATE,\r\n        success: actionTypes.ADD_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetAddTemplate = (): IActionCall => ({ type: actionTypes.ADD_TEMPLATE_RESET });\r\n\r\nexport const deleteTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.deleteTemplate(request),\r\n    types: {\r\n        failure: actionTypes.DELETE_TEMPLATE_FAILURE,\r\n        loading: actionTypes.DELETE_TEMPLATE,\r\n        success: actionTypes.DELETE_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetDeleteTemplate = (): IActionCall => ({ type: actionTypes.DELETE_TEMPLATE_RESET });\r\n\r\nexport const getPhoneList = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPhoneList(request),\r\n    types: {\r\n        loading: actionTypes.PHONE_LIST,\r\n        success: actionTypes.PHONE_LIST_SUCCESS,\r\n        failure: actionTypes.PHONE_LIST_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetPhoneList = (): IActionCall => ({ type: actionTypes.PHONE_LIST_RESET });"],"sourceRoot":""}