{"version":3,"sources":["pages/AutomatizationRules.tsx","../node_modules/@material-ui/icons/Clear.js","../node_modules/@material-ui/icons/Save.js","store/lead/actions.ts"],"names":["useStyles","makeStyles","theme","containerDetail","marginTop","spacing","padding","background","button","marginRight","field","margin","minHeight","DetailAutomatizationRules","data","row","edit","domainname","setViewSelected","multiData","fetchData","arrayBread","t","useTranslation","variables","map","x","key","value","dispatch","useDispatch","user","useSelector","state","login","validateToken","useradmin","includes","roledesc","classes","useState","waitSave","setWaitSave","executeRes","main","execute","shippingtype","setshippingtype","templates","lead","leadTemplates","find","id","messagetemplateid","body","bodyMessage","setBodyMessage","dataDomainStatus","success","dataProducts","filter","domainvalue","dataCommChannels","dataLeads","dataTags","useForm","defaultValues","leadautomatizationrulesid","operation","description","communicationchannelid","columnid","columnname","xdays","status","type","schedule","tags","products","hsmtemplatename","messagetemplateparameters","register","handleSubmit","setValue","control","getValues","trigger","errors","formState","fields","useFieldArray","name","useEffect","loading","error","errormessage","code","module","langKeys","domain","toLocaleLowerCase","showSnackbar","show","severity","message","showBackdrop","successful_edit","successful_register","React","validate","Boolean","length","String","field_required","Number","onSubmit","manageConfirmation","visible","question","confirmation_save","callback","insAutomatizationRules","JSON","stringify","style","width","display","justifyContent","breadcrumbs","automatizationrules","detail","handleClick","title","new","automatizationrule","gap","alignItems","variant","color","startIcon","backgroundColor","onClick","back","className","save","label","valueDefault","onChange","shippingchannel","optionDesc","optionValue","uset","prefixTranslation","whensettingstate","val","desc","inmediately","day","shippingschedule","o","domaindesc","join","product_plural","productid","hsm_template","varaiblesCleaned","match","substring","indexOf","text","item","i","fregister","variable","AutomatizationRules","mainResult","executeResult","viewSelected","filerchanneltype","setfilerchanneltype","rowSelected","setRowSelected","superadmin","dataGrid","setDataGrid","mainData","columnamefilter","toLowerCase","toUpperCase","columns","useMemo","accessor","NoFilter","isComponent","minWidth","Cell","props","cell","original","viewFunction","handleView","deleteFunction","handleDelete","editFunction","handleEdit","Header","conditional","templatetosend","getCollection","getAutomatizationRulesSel","getMultiCollection","getValuesFromDomain","getProductCatalogSel","getCommChannelLst","getColumnsSel","getLeadTemplates","resetAllMain","successful_delete","confirmation_delete","titlemodule","count","download","onClickRow","ButtonsElement","size","maxWidth","handleRegister","view","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","_default","createElement","d","getLead","callAPI","CommonService","types","actionTypes","GET_LEAD","GET_LEAD_SUCCESS","failure","GET_LEAD_FAILURE","resetGetLead","GET_LEAD_RESET","saveLead","transaction","Array","isArray","console","multiMain","SAVE_LEAD","SAVE_LEAD_SUCCESS","SAVE_LEAD_FAILURE","saveLeadWithFiles","build","uploadCb","mediaFile","fd","FormData","append","uploadFile","uploadResult","a","requestBody","resetSaveLead","SAVE_LEAD_RESET","getAdvisers","GET_ADVISERS","GET_ADVISERS_SUCCESS","GET_ADVISERS_FAILURE","getLeadLogNotes","GET_LEADNOTES","GET_LEADNOTES_SUCCESS","GET_LEADNOTES_FAILURE","resetGetLeadLogNotes","GET_LEADNOTES_RESET","getLeadActivities","GET_LEADACTIVITIES","GET_LEADACTIVITIES_SUCCESS","GET_LEADACTIVITIES_FAILURE","resetGetLeadActivities","GET_LEADACTIVITIES_RESET","saveLeadActivity","SAVE_LEADACTIVITY","SAVE_LEADACTIVITY_SUCCESS","SAVE_LEADACTIVITY_FAILURE","resetSaveLeadActivity","SAVE_LEADACTIVITY_RESET","saveLeadLogNote","mediaFiles","parameters","media","urls","fileToUpload","url","push","SAVE_LEADNOIE","SAVE_LEADNOIE_SUCCESS","SAVE_LEADNOIE_FAILURE","resetSaveLeadLogNote","SAVE_LEADNOIE_RESET","getLeadPhases","GET_PHASES","GET_PHASES_SUCCESS","GET_PHASES_FAILURE","resetGetLeadPhases","GET_PHASES_RESET","archiveLead","ARCHIVE_LEAD","ARCHIVE_LEAD_SUCCESS","ARCHIVE_LEAD_FAILURE","resetArchiveLead","ARCHIVE_LEAD_RESET","markDoneActivity","MARK_DONE_ACTIVITY","MARK_DONE_ACTIVITY_SUCCESS","MARK_DONE_ACTIVITY_FAILURE","resetMarkDoneActivity","MARK_DONE_ACTIVITY_RESET","getLeadHistory","GET_LEAD_HISTORY","GET_LEAD_HISTORY_SUCCESS","GET_LEAD_HISTORY_FAILURE","resetGetLeadHistory","GET_LEAD_HISTORY_RESET","getLeadProductsDomain","GET_LEAD_PRODUCTS_DOMAIN","GET_LEAD_PRODUCTS_DOMAIN_SUCCESS","GET_LEAD_PRODUCTS_DOMAIN_FAILURE","resetGetLeadProductsDomain","GET_LEAD_PRODUCTS_DOMAIN_RESET","getLeadTagsDomain","GET_LEAD_TAGS_DOMAIN","GET_LEAD_TAGS_DOMAIN_SUCCESS","GET_LEAD_TAGS_DOMAIN_FAILURE","resetGetLeadTagsDomain","GET_LEAD_TAGS_DOMAIN_RESET","getPersonType","GET_PERSON_TYPE","GET_PERSON_TYPE_SUCCESS","GET_PERSON_TYPE_FAILURE","resetGetPersonType","GET_PERSON_TYPE_RESET","getMessageTemplateLst","GET_LEAD_TEMPLATES","GET_LEAD_TEMPLATES_SUCCESS","GET_LEAD_TEMPLATES_FAILURE","getLeadChannels","GET_LEAD_CHANNELS","GET_LEAD_CHANNELS_SUCCESS","GET_LEAD_CHANNELS_FAILURE","resetGetLeadChannels","GET_LEAD_CHANNELS_RESET"],"mappings":"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","file":"static/js/63.612a643f.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TableZyx from '../components/fields/table-simple';\r\nimport { useSelector } from 'hooks';\r\nimport { useDispatch } from 'react-redux';\r\nimport { TemplateIcons, TemplateBreadcrumbs, FieldView, FieldEdit, FieldSelect, TitleDetail, FieldMultiSelectFreeSolo, FieldEditArray } from 'components';\r\nimport { getProductCatalogSel, getValuesFromDomain , getAutomatizationRulesSel, getCommChannelLst, getColumnsSel, insAutomatizationRules} from 'common/helpers';\r\nimport { AutomatizationRuleSave, Dictionary, MultiData } from \"@types\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { langKeys } from 'lang/keys';\r\nimport { useFieldArray, useForm } from 'react-hook-form';\r\nimport { getCollection, getMultiCollection, execute, resetAllMain } from 'store/main/actions';\r\nimport { showSnackbar, showBackdrop, manageConfirmation } from 'store/popus/actions';\r\nimport { getLeadTemplates } from 'store/lead/actions';\r\n\r\n\r\ninterface RowSelected {\r\n    row: Dictionary | null;\r\n    domainname: string | \"\";\r\n    edit: boolean;\r\n}\r\n\r\ninterface DetailProps {\r\n    data: RowSelected;\r\n    setViewSelected: (view: string) => void;\r\n    multiData: MultiData[];\r\n    fetchData?: () => void;\r\n    arrayBread: any;\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    containerDetail: {\r\n        marginTop: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n        background: '#fff',\r\n    },\r\n    button: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    field: {\r\n        margin: theme.spacing(1),\r\n        minHeight: 58,\r\n    },\r\n}));\r\n\r\nconst DetailAutomatizationRules: React.FC<DetailProps> = ({ data: { row, domainname, edit }, setViewSelected, multiData, fetchData,arrayBread }) => {\r\n    const { t } = useTranslation();\r\n    const variables = ['firstname', 'lastname', 'displayname', 'email', 'phone', 'documenttype', 'documentnumber', 'custom'].map(x => ({ key: x, value: t(x) }))\r\n    const dispatch = useDispatch();\r\n    const user = useSelector(state => state.login.validateToken.user);\r\n    const useradmin = [\"ADMINISTRADOR\",\"ADMINISTRADOR P\"].includes(user?.roledesc || '');\r\n    const classes = useStyles();\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const executeRes = useSelector(state => state.main.execute);\r\n    const [shippingtype, setshippingtype] = useState(row?.shippingtype || \"\");\r\n    const templates = useSelector(state => state.lead.leadTemplates);\r\n    const [bodyMessage, setBodyMessage] = useState(templates.data.find(x=>x.id===row?.messagetemplateid)?.body||\"\");\r\n    const dataDomainStatus = multiData[0] && multiData[0].success ? multiData[0].data : [];\r\n    const dataProducts = multiData[0] && multiData[1].success ? (useradmin?multiData[1].data.filter(x=>x.domainvalue === \"BOT\"):multiData[1].data) : [];\r\n    const dataCommChannels = multiData[2] && multiData[2].success ? multiData[2].data : [];\r\n    const dataLeads = multiData[3] && multiData[3].success ? multiData[3].data : [];\r\n    const dataTags = multiData[4] && multiData[4].success ? multiData[4].data : [];\r\n\r\n    const { register, handleSubmit, setValue,control, getValues,trigger, formState: { errors } } = useForm<AutomatizationRuleSave>({\r\n        defaultValues: {\r\n            id: row?.leadautomatizationrulesid || 0,\r\n            operation: row ? \"EDIT\" : \"INSERT\",\r\n            description: row?.description || '',\r\n            communicationchannelid: row?.communicationchannelid || 0,\r\n            columnid: row?.columnid|| 0,\r\n            columnname: row?.columnname|| 0,\r\n            shippingtype: row?.shippingtype || \"\",\r\n            xdays: row?.xdays || 0,\r\n            status: row?.status || 'ACTIVO',\r\n            type: \"NINGUNO\",\r\n            schedule: row?.schedule || \"\",\r\n            tags: row?.tags || \"\",\r\n            products: row?.products || \"\",\r\n            messagetemplateid: row?.messagetemplateid||0,\r\n            hsmtemplatename: row?.hsmtemplatename||\"\",\r\n            variables: row?.messagetemplateparameters||[],\r\n        }\r\n    });\r\n    const { fields } = useFieldArray({\r\n        control,\r\n        name: 'variables',\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeRes.loading && !executeRes.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(row ? langKeys.successful_edit : langKeys.successful_register) }))\r\n                fetchData && fetchData();\r\n                dispatch(showBackdrop(false));\r\n                setViewSelected(\"view-1\");\r\n            } else if (executeRes.error) {\r\n                const errormessage = t(executeRes.code || \"error_unexpected_error\", { module: t(langKeys.domain).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                setWaitSave(false);\r\n                dispatch(showBackdrop(false));\r\n            }\r\n        }\r\n    }, [executeRes, waitSave])\r\n\r\n    React.useEffect(() => {\r\n        register('id');\r\n        register('description', { validate: (value:any) => Boolean(value && value.length) || String(t(langKeys.field_required)) });\r\n        register('communicationchannelid', { validate: (value:any) => Boolean(value && value>0) || String(t(langKeys.field_required)) });\r\n        register('columnid');\r\n        register('columnname', { validate: (value:any) => Boolean(value && value.length) || String(t(langKeys.field_required)) });\r\n        register('shippingtype', { validate: (value:any) => Boolean(value && value.length) || String(t(langKeys.field_required)) });\r\n        register('schedule', { validate: (value:any) => Boolean(value && value.length) || String(t(langKeys.field_required)) });\r\n        register('tags');\r\n        register('products');\r\n        register('messagetemplateid', { validate: (value) => Boolean(value && value>0) || String(t(langKeys.field_required)) });\r\n        register('hsmtemplatename');\r\n        register('variables');\r\n        if(shippingtype === \"DAY\"){\r\n            register('xdays', { validate: (value) => Boolean(value && Number(value)>0) || String(t(langKeys.field_required)) });\r\n        }\r\n    }, [register]);\r\n    const onSelectTemplate = (value: Dictionary) => {\r\n        if (value) {\r\n            setBodyMessage(value.body);\r\n            setValue('messagetemplateid', value ? value.id : 0);\r\n            setValue('hsmtemplatename', value ? value.name : '');\r\n            const variablesList = value.body.match(/({{)(.*?)(}})/g) || [];\r\n            const varaiblesCleaned = variablesList.map((x: string) => x.substring(x.indexOf(\"{{\") + 2, x.indexOf(\"}}\")))\r\n            setValue('variables', varaiblesCleaned.map((x: string) => ({ name: x, text: '', type: 'text' })));\r\n        } else {\r\n            setValue('hsmtemplatename', '');\r\n            setValue('variables', []);\r\n            setBodyMessage('');\r\n            setValue('messagetemplateid', 0);\r\n        }\r\n    }\r\n\r\n    const onSubmit = handleSubmit((data) => {\r\n        const callback = () => {\r\n            dispatch(showBackdrop(true));\r\n            dispatch(execute(insAutomatizationRules({...data, messagetemplateparameters: JSON.stringify(data.variables)})));\r\n\r\n            setWaitSave(true);\r\n        }\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_save),\r\n            callback\r\n        }))\r\n    });\r\n    return (\r\n        <div style={{width: \"100%\"}}>\r\n            <form onSubmit={onSubmit}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <div>\r\n                        <TemplateBreadcrumbs\r\n                            breadcrumbs={[...arrayBread,{ id: \"view-2\", name: `${t(langKeys.automatizationrules)} ${t(langKeys.detail)}` }]}\r\n                            handleClick={setViewSelected}\r\n                        />\r\n                        <TitleDetail\r\n                            title={row ? `${row.description}` : `${t(langKeys.new)} ${t(langKeys.automatizationrule)}`}\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            type=\"button\"\r\n                            color=\"primary\"\r\n                            startIcon={<ClearIcon color=\"secondary\" />}\r\n                            style={{ backgroundColor: \"#FB5F5F\" }}\r\n                            onClick={() => setViewSelected(\"view-1\")}>\r\n                            {t(langKeys.back)}\r\n                        </Button>\r\n                        {edit &&\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                startIcon={<SaveIcon color=\"secondary\" />}\r\n                                style={{ backgroundColor: \"#55BD84\" }}>\r\n                                {t(langKeys.save)}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className={classes.containerDetail}>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldEdit\r\n                            label={t(langKeys.description)}\r\n                            className=\"col-6\"\r\n                            valueDefault={getValues('description')}\r\n                            onChange={(value) => setValue('description', value)}\r\n                            error={errors?.description?.message}\r\n                        />\r\n                        <FieldSelect\r\n                            label={t(langKeys.shippingchannel)}\r\n                            className=\"col-6\"\r\n                            onChange={(value) => setValue('communicationchannelid', value?.communicationchannelid||0)}\r\n                            valueDefault={getValues('communicationchannelid')}\r\n                            data={dataCommChannels}\r\n                            optionDesc=\"communicationchanneldesc\"\r\n                            optionValue=\"communicationchannelid\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldSelect\r\n                            label={t(langKeys.status)}\r\n                            className=\"col-6\"\r\n                            valueDefault={row?.status || \"ACTIVO\"}\r\n                            onChange={(value) => setValue('status', value ? value.domainvalue : '')}\r\n                            error={errors?.status?.message}\r\n                            data={dataDomainStatus}\r\n                            optionDesc=\"domaindesc\"\r\n                            uset={true}\r\n                            prefixTranslation=\"status_\"\r\n                            optionValue=\"domainvalue\"\r\n                        />\r\n                        <FieldSelect\r\n                            label={t(langKeys.whensettingstate)}\r\n                            className=\"col-6\"\r\n                            valueDefault={row?.columnname||\"\"}\r\n                            onChange={(value) => {\r\n                                setValue('columnname', value?.description || \"\")\r\n                                setValue('columnid', value?.columnid || 0)\r\n                            }}\r\n                            error={errors?.columnname?.message}\r\n                            data={dataLeads}\r\n                            prefixTranslation=\"\"\r\n                            optionDesc=\"description\"\r\n                            uset={true}\r\n                            optionValue=\"description\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldSelect\r\n                            label={t(langKeys.shippingtype)}\r\n                            className=\"col-6\"\r\n                            valueDefault={getValues('shippingtype')}\r\n                            onChange={(value) => {setshippingtype(value?.val || '');setValue('shippingtype', value?.val || '')}}\r\n                            error={errors?.shippingtype?.message}\r\n                            data={[{desc: t(langKeys.inmediately),val:\"INMEDIATELY\"}, {desc: t(langKeys.day),val:\"DAY\"}]}\r\n                            optionDesc=\"desc\"\r\n                            optionValue=\"val\"\r\n                        />\r\n                        {shippingtype === \"DAY\" && <FieldEdit\r\n                            label={`${t(langKeys.day)}s`}\r\n                            className=\"col-6\"\r\n                            type=\"number\"\r\n                            valueDefault={row?.xdays||0}\r\n                            onChange={(value) => setValue('xdays', value)}\r\n                            error={errors?.xdays?.message}\r\n                        />}\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldSelect\r\n                            label={t(langKeys.shippingschedule)}\r\n                            className=\"col-6\"\r\n                            valueDefault={getValues(\"schedule\")}\r\n                            onChange={(value) => setValue('schedule', value?.value || \"\")}\r\n                            error={errors?.schedule?.message}\r\n                            data={[\r\n                                {value: \"00:00:00\", desc: \"00:00\"},\r\n                                {value: \"01:00:00\", desc: \"01:00\"},\r\n                                {value: \"02:00:00\", desc: \"02:00\"},\r\n                                {value: \"03:00:00\", desc: \"03:00\"},\r\n                                {value: \"04:00:00\", desc: \"04:00\"},\r\n                                {value: \"05:00:00\", desc: \"05:00\"},\r\n                                {value: \"06:00:00\", desc: \"06:00\"},\r\n                                {value: \"07:00:00\", desc: \"07:00\"},\r\n                                {value: \"08:00:00\", desc: \"08:00\"},\r\n                                {value: \"09:00:00\", desc: \"09:00\"},\r\n                                {value: \"10:00:00\", desc: \"10:00\"},\r\n                                {value: \"11:00:00\", desc: \"11:00\"},\r\n                                {value: \"12:00:00\", desc: \"12:00\"},\r\n                                {value: \"13:00:00\", desc: \"13:00\"},\r\n                                {value: \"14:00:00\", desc: \"14:00\"},\r\n                                {value: \"15:00:00\", desc: \"15:00\"},\r\n                                {value: \"16:00:00\", desc: \"16:00\"},\r\n                                {value: \"17:00:00\", desc: \"17:00\"},\r\n                                {value: \"18:00:00\", desc: \"18:00\"},\r\n                                {value: \"19:00:00\", desc: \"19:00\"},\r\n                                {value: \"20:00:00\", desc: \"20:00\"},\r\n                                {value: \"21:00:00\", desc: \"21:00\"},\r\n                                {value: \"22:00:00\", desc: \"22:00\"},\r\n                                {value: \"23:00:00\", desc: \"23:00\"},\r\n                            ]}\r\n                            optionDesc=\"desc\"\r\n                            optionValue=\"value\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldMultiSelectFreeSolo\r\n                            label={t(langKeys.tags)}\r\n                            className=\"col-6\"\r\n                            valueDefault={getValues('tags')}\r\n                            onChange={(value: ({domaindesc: string} | string)[]) => {\r\n                                const tags = value.map((o: any) => o.domaindesc || o).join(',');\r\n                                setValue('tags', tags);\r\n                            }}\r\n                            error={errors?.tags?.message}\r\n                            loading={false}\r\n                            data={dataTags}\r\n                            optionDesc=\"domaindesc\"\r\n                            optionValue=\"domaindesc\"\r\n                        />\r\n                        <FieldMultiSelectFreeSolo\r\n                            label={t(langKeys.product_plural)}\r\n                            className=\"col-6\"\r\n                            valueDefault={getValues('products')}\r\n                            onChange={(value: ({title: string} | string)[]) => {\r\n                                const products = value.map((o: any) => o.productid || o).join(',');\r\n                                setValue('products', products);\r\n                            }}\r\n                            error={errors?.products?.message}\r\n                            loading={false}\r\n                            data={dataProducts}\r\n                            optionDesc=\"title\"\r\n                            optionValue=\"productid\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <FieldSelect\r\n                            label={t(langKeys.hsm_template)}\r\n                            className=\"col-6\"\r\n                            valueDefault={getValues('messagetemplateid')}\r\n                            onChange={onSelectTemplate}\r\n                            error={errors?.messagetemplateid?.message}\r\n                            data={templates.data}\r\n                            optionDesc=\"name\"\r\n                            optionValue=\"id\"\r\n                        />\r\n                        <FieldView\r\n                            className=\"col-6\"\r\n                            label={t(langKeys.message)}\r\n                            value={bodyMessage}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        {fields.map((item: Dictionary, i) => (\r\n                            <div key={item.id} style={{width:\"50%\"}}>\r\n                                <FieldSelect\r\n                                    key={\"var_\" + item.id}\r\n                                    fregister={{\r\n                                        ...register(`variables.${i}.variable`, {\r\n                                            validate: (value: any) => (value && value.length) || t(langKeys.field_required)\r\n                                        })\r\n                                    }}\r\n                                    className={classes.field}\r\n                                    label={item.name}\r\n                                    valueDefault={getValues(`variables.${i}.variable`)}\r\n                                    onChange={(value) => {\r\n                                        setValue(`variables.${i}.variable`, value.key)\r\n                                        trigger(`variables.${i}.variable`)\r\n                                    }}\r\n                                    error={errors?.variables?.[i]?.variable?.message}\r\n                                    data={variables}\r\n                                    optionDesc=\"value\"\r\n                                    optionValue=\"key\"\r\n                                />\r\n                                {getValues(`variables.${i}.variable`) === 'custom' &&\r\n                                    <FieldEditArray\r\n                                        key={\"custom_\" + item.id}\r\n                                        fregister={{\r\n                                            ...register(`variables.${i}.text`, {\r\n                                                validate: (value: any) => (value && value.length) || t(langKeys.field_required)\r\n                                            })\r\n                                        }}\r\n                                        prefixTranslation=\"\"\r\n                                        className={classes.field}\r\n                                        valueDefault={item.value}\r\n                                        error={errors?.variables?.[i]?.text?.message}\r\n                                        onChange={(value) => setValue(`variables.${i}.text`, \"\" + value)}\r\n                                    />\r\n                                }\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst AutomatizationRules: FC = () => {\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch();\r\n    const mainResult = useSelector(state => state.main);\r\n    const executeResult = useSelector(state => state.main.execute);\r\n    const [viewSelected, setViewSelected] = useState(\"view-1\");\r\n    const [filerchanneltype, setfilerchanneltype] = useState(0);\r\n    const [rowSelected, setRowSelected] = useState<RowSelected>({ row: null, domainname: \"\", edit: false });\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const user = useSelector(state => state.login.validateToken.user);\r\n    const superadmin = [\"SUPERADMIN\",\"ADMINISTRADOR\",\"ADMINISTRADOR P\"].includes(user?.roledesc || '');\r\n    const [dataGrid, setDataGrid] = useState<any[]>([]);\r\n\r\n    const arrayBread = [\r\n        { id: \"view-1\", name: t(langKeys.automatizationrules) },\r\n    ];\r\n    function redirectFunc(view:string){\r\n        setViewSelected(view)\r\n    }\r\n    useEffect(() => {\r\n        let data = mainResult.mainData.data\r\n        data = data.map(x=>({...x,columnamefilter: (t(`${x.columnname?.toLowerCase()}`.toLowerCase()) || \"\").toUpperCase()}))\r\n        setDataGrid(data)\r\n    }, [mainResult.mainData.data])\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                accessor: 'leadautomatizationrulesid ',\r\n                NoFilter: true,\r\n                isComponent: true,\r\n                minWidth: 60,\r\n                width: '1%',\r\n                Cell: (props: any) => {\r\n                    const row = props.cell.row.original;\r\n                    return (\r\n                        <TemplateIcons\r\n                            viewFunction={() => handleView(row)}\r\n                            deleteFunction={() => handleDelete(row)}\r\n                            editFunction={() => handleEdit(row)}\r\n                        />\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                Header: t(langKeys.shippingchannel),\r\n                accessor: 'communicationchanneldesc',\r\n                NoFilter: false\r\n            },\r\n            {\r\n                Header: t(langKeys.whensettingstate),\r\n                accessor: 'columnamefilter',\r\n                NoFilter: false,\r\n            },\r\n            {\r\n                Header: t(langKeys.conditional),\r\n                accessor: 'tags',\r\n                NoFilter: false,\r\n                Cell: (props: any) => {\r\n                    const { tags, products } = props.cell.row.original;\r\n                    return (\r\n                        <>\r\n                            <div><b>Tags:</b> {tags}</div>\r\n                            <div><b>{t(langKeys.product_plural)}:</b> {products}</div>\r\n                        </>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                Header: t(langKeys.templatetosend),\r\n                accessor: 'messagetemplatename',\r\n                NoFilter: false,\r\n            },\r\n            {\r\n                Header: t(langKeys.shippingtype),\r\n                accessor: 'shippingtype',\r\n                NoFilter: false,\r\n                prefixTranslation: 'xdays_',\r\n                Cell: (props: any) => {\r\n                    const { shippingtype } = props.cell.row.original;\r\n                    return (t(`xdays_${shippingtype}`.toLowerCase()) || \"\").toUpperCase()\r\n                }\r\n            },\r\n            {\r\n                Header: `X ${t(langKeys.day)}s`,\r\n                accessor: 'xdays',\r\n                NoFilter: false,\r\n            },\r\n            {\r\n                Header: t(langKeys.schedule),\r\n                accessor: 'schedule',\r\n                NoFilter: false\r\n            },\r\n            {\r\n                Header: t(langKeys.status),\r\n                accessor: 'status',\r\n                NoFilter: false,\r\n                prefixTranslation: 'status_',\r\n                Cell: (props: any) => {\r\n                    const { status } = props.cell.row.original;\r\n                    return (t(`status_${status}`.toLowerCase()) || \"\").toUpperCase()\r\n                }\r\n            },\r\n        ],\r\n        []\r\n    );\r\n\r\n    const fetchData = (communicationchannelid?:number) => dispatch(getCollection(getAutomatizationRulesSel({id:0,communicationchannelid:communicationchannelid||0})));\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n        dispatch(getMultiCollection([\r\n            getValuesFromDomain(\"ESTADOGENERICO\"),\r\n            getProductCatalogSel(),\r\n            getCommChannelLst(),\r\n            getColumnsSel(0, true),\r\n            getValuesFromDomain('OPORTUNIDADETIQUETAS'),\r\n        ]));\r\n        dispatch(getLeadTemplates());\r\n\r\n        return () => {\r\n            dispatch(resetAllMain());\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeResult.loading && !executeResult.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_delete) }))\r\n                fetchData();\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            } else if (executeResult.error) {\r\n                const errormessage = t(executeResult.code || \"error_unexpected_error\", { module: t(langKeys.domain).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            }\r\n        }\r\n    }, [executeResult, waitSave])\r\n\r\n    const handleRegister = () => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row: null, domainname: \"\", edit: true });\r\n    }\r\n\r\n    const handleView = (row: Dictionary) => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row, domainname: row.domainname, edit: false });\r\n    }\r\n\r\n    const handleEdit = (row: Dictionary) => {\r\n        setViewSelected(\"view-2\");\r\n        setRowSelected({ row, domainname: row.domainname, edit: true });\r\n    }\r\n\r\n    const handleDelete = (row: Dictionary) => {\r\n        const callback = () => {\r\n            dispatch(execute(insAutomatizationRules({ ...row,id: row?.leadautomatizationrulesid, operation: 'DELETE', status: 'ELIMINADO' })));\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true);\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_delete),\r\n            callback\r\n        }))\r\n    }\r\n\r\n    if (viewSelected === \"view-1\") {\r\n\r\n        if (mainResult.mainData.error) {\r\n            return <h1>ERROR</h1>;\r\n        }\r\n\r\n        return (\r\n            <div style={{width:\"100%\"}}>\r\n                <TableZyx\r\n                    columns={columns}\r\n                    titlemodule={t(langKeys.automatizationrules, { count: 2 })}\r\n                    data={dataGrid}\r\n                    download={false}\r\n                    //fetchData={fetchData}\r\n                    onClickRow={handleEdit}\r\n                    ButtonsElement={()=>(<>\r\n                        <FieldSelect\r\n                            onChange={(value) => {setfilerchanneltype(value?.communicationchannelid||0);fetchData(value?.communicationchannelid||0)}}\r\n                            size=\"small\"\r\n                            label={t(langKeys.shippingchannel)}\r\n                            style={{ maxWidth: 300, minWidth: 200 }}\r\n                            variant=\"outlined\"\r\n                            loading={mainResult.multiData.loading}\r\n                            data={mainResult.multiData?.data[2]?.data || []}\r\n                            optionValue=\"communicationchannelid\"\r\n                            optionDesc=\"communicationchanneldesc\"\r\n                            valueDefault={filerchanneltype}\r\n                        />\r\n                    </>)}\r\n                    loading={mainResult.mainData.loading}\r\n                    register={superadmin}\r\n                    handleRegister={handleRegister}\r\n                    \r\n            />\r\n            </div>\r\n        )\r\n    }\r\n    else\r\n        return (\r\n            <DetailAutomatizationRules\r\n                data={rowSelected}\r\n                setViewSelected={redirectFunc}\r\n                multiData={mainResult.multiData.data}\r\n                fetchData={fetchData}\r\n                arrayBread={arrayBread}\r\n            />\r\n        )\r\n}\r\n\r\nexport default AutomatizationRules;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');\n\nexports.default = _default;","import { IActionCall, ICrmLeadNoteSave, IRequestBody, ITransaction } from \"@types\";\r\nimport { getCommChannelLst, getMessageTemplateLst, getProductCatalogSel } from \"common/helpers\";\r\nimport { CommonService } from \"network\";\r\nimport actionTypes from \"./actionTypes\";\r\n\r\nexport const getLead = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.GET_LEAD,\r\n        success: actionTypes.GET_LEAD_SUCCESS,\r\n        failure: actionTypes.GET_LEAD_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetLead = (): IActionCall => ({ type: actionTypes.GET_LEAD_RESET });\r\n\r\nexport const saveLead = (body: IRequestBody | ITransaction | IRequestBody[], transaction: boolean = false): IActionCall => ({\r\n    callAPI: () => {\r\n        if (Array.isArray(body)) {\r\n            if (transaction) console.error('No puede ser un multiMain y transacción a la vez');\r\n            return CommonService.multiMain(body);\r\n        }\r\n        return CommonService.main(body, transaction);\r\n    },\r\n    types: {\r\n        loading: actionTypes.SAVE_LEAD,\r\n        success: actionTypes.SAVE_LEAD_SUCCESS,\r\n        failure: actionTypes.SAVE_LEAD_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\ntype Url = string;\r\nexport const saveLeadWithFiles = (\r\n    build: (uploader: (file: File) => Promise<Url>) => Promise<IRequestBody | ITransaction>,\r\n    transaction: boolean = false,\r\n): IActionCall => {\r\n    const uploadCb = async (mediaFile: File): Promise<Url> => {\r\n        const fd = new FormData();\r\n        fd.append('file', mediaFile, mediaFile.name);\r\n        const uploadResult = await CommonService.uploadFile(fd);\r\n        return (uploadResult.data[\"url\"] || '') as Url;\r\n    };\r\n\r\n    return {\r\n        callAPI: async () => {\r\n            const requestBody = await build(uploadCb);\r\n            return CommonService.main(requestBody, transaction);\r\n        },\r\n        types: {\r\n            loading: actionTypes.SAVE_LEAD,\r\n            success: actionTypes.SAVE_LEAD_SUCCESS,\r\n            failure: actionTypes.SAVE_LEAD_FAILURE,\r\n        },\r\n        type: null,\r\n    };\r\n}\r\n\r\nexport const resetSaveLead = (): IActionCall => ({ type: actionTypes.SAVE_LEAD_RESET });\r\n\r\nexport const getAdvisers = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.GET_ADVISERS,\r\n        success: actionTypes.GET_ADVISERS_SUCCESS,\r\n        failure: actionTypes.GET_ADVISERS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetAdvisers = (): IActionCall => ({ type: actionTypes.GET_ADVISERS_RESET });\r\n\r\nexport const getLeadLogNotes = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.GET_LEADNOTES,\r\n        success: actionTypes.GET_LEADNOTES_SUCCESS,\r\n        failure: actionTypes.GET_LEADNOTES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetLeadLogNotes = (): IActionCall => ({ type: actionTypes.GET_LEADNOTES_RESET });\r\n\r\nexport const getLeadActivities = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.GET_LEADACTIVITIES,\r\n        success: actionTypes.GET_LEADACTIVITIES_SUCCESS,\r\n        failure: actionTypes.GET_LEADACTIVITIES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetLeadActivities = (): IActionCall => ({ type: actionTypes.GET_LEADACTIVITIES_RESET });\r\n\r\nexport const saveLeadActivity = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.SAVE_LEADACTIVITY,\r\n        success: actionTypes.SAVE_LEADACTIVITY_SUCCESS,\r\n        failure: actionTypes.SAVE_LEADACTIVITY_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetSaveLeadActivity = (): IActionCall => ({ type: actionTypes.SAVE_LEADACTIVITY_RESET });\r\n\r\nexport const saveLeadLogNote = (body: IRequestBody): IActionCall => ({\r\n    callAPI: async () => {\r\n        const mediaFiles = (body.parameters as ICrmLeadNoteSave).media as File[] | null;\r\n        if (mediaFiles) {\r\n            const urls: String[] = [];\r\n            for (const fileToUpload of mediaFiles) {\r\n                const fd = new FormData();\r\n                fd.append('file', fileToUpload, fileToUpload.name);\r\n                const uploadResult = await CommonService.uploadFile(fd);\r\n                const url = uploadResult.data[\"url\"] as string;\r\n                urls.push(url);\r\n            }\r\n            (body.parameters as ICrmLeadNoteSave).media = urls.join(',');\r\n        }\r\n        return CommonService.main(body);\r\n    },\r\n    types: {\r\n        loading: actionTypes.SAVE_LEADNOIE,\r\n        success: actionTypes.SAVE_LEADNOIE_SUCCESS,\r\n        failure: actionTypes.SAVE_LEADNOIE_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetSaveLeadLogNote = (): IActionCall => ({ type: actionTypes.SAVE_LEADNOIE_RESET });\r\n\r\nexport const getLeadPhases = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.GET_PHASES,\r\n        success: actionTypes.GET_PHASES_SUCCESS,\r\n        failure: actionTypes.GET_PHASES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetLeadPhases = (): IActionCall => ({ type: actionTypes.GET_PHASES_RESET });\r\n\r\nexport const setDisplay = (display: string): IActionCall => ({\r\n    payload: display,\r\n    type: actionTypes.DISPLAY_LEAD,\r\n});\r\n\r\nexport const resetDisplay = (): IActionCall => ({ type: actionTypes.DISPLAY_LEAD_RESET });\r\n\r\n/**Close lead -> (status = \"CERRADO\") */\r\nexport const archiveLead = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.ARCHIVE_LEAD,\r\n        success: actionTypes.ARCHIVE_LEAD_SUCCESS,\r\n        failure: actionTypes.ARCHIVE_LEAD_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetArchiveLead = (): IActionCall => ({ type: actionTypes.ARCHIVE_LEAD_RESET });\r\n\r\n/**Done lead -> (status = \"REALIZADO\") */\r\nexport const markDoneActivity = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.MARK_DONE_ACTIVITY,\r\n        success: actionTypes.MARK_DONE_ACTIVITY_SUCCESS,\r\n        failure: actionTypes.MARK_DONE_ACTIVITY_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetMarkDoneActivity = (): IActionCall => ({ type: actionTypes.MARK_DONE_ACTIVITY_RESET });\r\n\r\nexport const getLeadHistory = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.GET_LEAD_HISTORY,\r\n        success: actionTypes.GET_LEAD_HISTORY_SUCCESS,\r\n        failure: actionTypes.GET_LEAD_HISTORY_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetLeadHistory = (): IActionCall => ({ type: actionTypes.GET_LEAD_HISTORY_RESET });\r\n\r\nexport const updateLeadTags = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.UPDATE_LEAD_TAGS,\r\n        success: actionTypes.UPDATE_LEAD_TAGS_SUCCESS,\r\n        failure: actionTypes.UPDATE_LEAD_TAGS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetUpdateLeadTags = (): IActionCall => ({ type: actionTypes.UPDATE_LEAD_TAGS_RESET });\r\n\r\nexport const getLeadProductsDomain = (): IActionCall => ({\r\n    callAPI: () => CommonService.main(getProductCatalogSel()),\r\n    types: {\r\n        loading: actionTypes.GET_LEAD_PRODUCTS_DOMAIN,\r\n        success: actionTypes.GET_LEAD_PRODUCTS_DOMAIN_SUCCESS,\r\n        failure: actionTypes.GET_LEAD_PRODUCTS_DOMAIN_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetLeadProductsDomain = (): IActionCall => ({ type: actionTypes.GET_LEAD_PRODUCTS_DOMAIN_RESET });\r\n\r\nexport const getLeadTagsDomain = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.GET_LEAD_TAGS_DOMAIN,\r\n        success: actionTypes.GET_LEAD_TAGS_DOMAIN_SUCCESS,\r\n        failure: actionTypes.GET_LEAD_TAGS_DOMAIN_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetLeadTagsDomain = (): IActionCall => ({ type: actionTypes.GET_LEAD_TAGS_DOMAIN_RESET });\r\n\r\nexport const getPersonType = (body: IRequestBody): IActionCall => ({\r\n    callAPI: () => CommonService.main(body),\r\n    types: {\r\n        loading: actionTypes.GET_PERSON_TYPE,\r\n        success: actionTypes.GET_PERSON_TYPE_SUCCESS,\r\n        failure: actionTypes.GET_PERSON_TYPE_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetPersonType = (): IActionCall => ({ type: actionTypes.GET_PERSON_TYPE_RESET });\r\n\r\nexport const getLeadTemplates = (): IActionCall => ({\r\n    callAPI: () => CommonService.main(getMessageTemplateLst('')),\r\n    types: {\r\n        loading: actionTypes.GET_LEAD_TEMPLATES,\r\n        success: actionTypes.GET_LEAD_TEMPLATES_SUCCESS,\r\n        failure: actionTypes.GET_LEAD_TEMPLATES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetLeadTemplates = (): IActionCall => ({ type: actionTypes.GET_LEAD_TEMPLATES_RESET });\r\n\r\n\r\nexport const getLeadChannels = (): IActionCall => ({\r\n    callAPI: () => CommonService.main(getCommChannelLst()),\r\n    types: {\r\n        loading: actionTypes.GET_LEAD_CHANNELS,\r\n        success: actionTypes.GET_LEAD_CHANNELS_SUCCESS,\r\n        failure: actionTypes.GET_LEAD_CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetLeadChannels = (): IActionCall => ({ type: actionTypes.GET_LEAD_CHANNELS_RESET });\r\n"],"sourceRoot":""}