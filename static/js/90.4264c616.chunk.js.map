{"version":3,"sources":["pages/channels/Channels.tsx","../node_modules/@material-ui/icons/Clear.js","store/channel/actions.ts"],"names":["Channels","dispatch","useDispatch","t","useTranslation","paymentPlanResult","useSelector","state","channel","checkPaymentPlan","executeResult","channelList","mainResult","main","user","login","validateToken","roledesc","useState","typeWhatsApp","setTypeWhatsApp","canRegister","setCanRegister","waitCheck","setWaitCheck","waitSave","setWaitSave","history","useHistory","arrayBread","id","name","langKeys","configuration_plural","channel_plural","fetchData","getCollection","getChannelSel","useEffect","loading","error","errormessage","code","module","property","toLocaleLowerCase","showSnackbar","show","severity","message","showBackdrop","successful_delete","handleEdit","row","type","status","whatsAppData","push","pathname","paths","CHANNELS_EDIT_WHATSAPP","resolve","communicationchannelid","CHANNELS_EDIT_CHATWEB","CHANNELS_EDIT","columns","React","useMemo","accessor","NoFilter","isComponent","minWidth","width","Cell","props","cell","original","viewFunction","deleteFunction","manageConfirmation","visible","question","confirmation_delete","callback","deleteChannel","method","parameters","description","communicationchanneldesc","operation","voximplantcallsupervision","handleDelete","editFunction","Header","corporation","organization","communicationchannel","prefixTranslation","toLowerCase","toUpperCase","resetAllMain","value","providerWhatsApp","createChannel","channellimit","restrictionInformation","CHANNELS_ADD","style","display","justifyContent","alignItems","breadcrumbs","handleClick","view","CONFIGURATION","titlemodule","count","ButtonsElement","disabled","mainData","variant","color","startIcon","backgroundColor","onClick","back","data","download","onClickRow","register","hoverShadow","handleRegister","corpid","orgid","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","_default","createElement","d","getChannelsList","accessToken","appId","callAPI","ChannelsService","getPagelist","types","actionTypes","CHANNELS","success","CHANNELS_SUCCESS","failure","CHANNELS_FAILURE","insertChannel","requestBody","insertchnl","CHANNELS_INSERTSUCCESS","activateChannel","ACTIVATECHANNEL","ACTIVATECHANNEL_SUCCESS","ACTIVATECHANNEL_FAILURE","deletechnl","CHECK_PAYMENTPLAN","CHECK_PAYMENTPLAN_SUCCESS","CHECK_PAYMENTPLAN_FAILURE","insertChannel2","payload","a","chatIconFile","service","interface","iconbutton","headerIconFile","iconheader","botIconFile","iconbot","bubbleIconFile","bubble","iconbubble","chatIcon","headerIcon","botIcon","bubbleIcon","fd","FormData","append","CommonService","uploadFile","INSERT_CHANNEL","INSERT_CHANNEL_FAILURE","INSERT_CHANNEL_SUCCESS","resetInsertChannel","INSERT_CHANNEL_RESET","editChannel","channelType","editchnl","EDIT_CHANNEL","EDIT_CHANNEL_FAILURE","EDIT_CHANNEL_SUCCESS","resetEditChannel","EDIT_CHANNEL_RESET","getFacebookPages","getPagelistSub","FACEBOOK_PAGES","FACEBOOK_PAGES_SUCCESS","FACEBOOK_PAGES_FAILURE","resetGetFacebookPages","FACEBOOK_PAGES_RESET","getMessengerPages","MESSENGER_PAGES","MESSENGER_PAGES_SUCCESS","MESSENGER_PAGES_FAILURE","resetGetMessengerPages","MESSENGER_PAGES_RESET","getInstagramPages","INSTAGRAM_PAGES","INSTAGRAM_PAGES_SUCCESS","INSTAGRAM_PAGES_FAILURE","resetGetInstagramPages","INSTAGRAM_PAGES_RESET","getInstagramDMPages","INSTAGRAMDM_PAGES","INSTAGRAMDM_PAGES_SUCCESS","INSTAGRAMDM_PAGES_FAILURE","resetGetInstagramDMPages","INSTAGRAMDM_PAGES_RESET","synchronizeTemplate","request","SYNCHRONIZE_TEMPLATE_FAILURE","SYNCHRONIZE_TEMPLATE","SYNCHRONIZE_TEMPLATE_SUCCESS","addTemplate","ADD_TEMPLATE_FAILURE","ADD_TEMPLATE","ADD_TEMPLATE_SUCCESS","deleteTemplate","DELETE_TEMPLATE_FAILURE","DELETE_TEMPLATE","DELETE_TEMPLATE_SUCCESS","getPhoneList","PHONE_LIST","PHONE_LIST_SUCCESS","PHONE_LIST_FAILURE"],"mappings":"iVAmBaA,EAAe,WACxB,IAAMC,EAAWC,cACTC,EAAMC,cAAND,EAEFE,EAAoBC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAQC,oBACvDC,EAAgBJ,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAQG,eACnDC,EAAaN,aAAY,SAAAC,GAAK,OAAIA,EAAMM,QACxCC,EAAOR,aAAY,SAAAC,GAAK,OAAIA,EAAMQ,MAAMC,cAAcF,QAEtDG,GAAe,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMG,WAAY,GAEnC,EAAwCC,mBAAS,UAAS,mBAAnDC,EAAY,KAAEC,EAAe,KACpC,EAAsCF,oBAAS,GAAM,mBAA9CG,EAAW,KAAEC,EAAc,KAClC,EAAkCJ,oBAAS,GAAM,mBAA1CK,EAAS,KAAEC,EAAY,KAC9B,EAAgCN,oBAAS,GAAM,mBAAxCO,EAAQ,KAAEC,EAAW,KACtBC,EAAUC,cACVC,EAAa,CACf,CAAEC,GAAI,SAAUC,KAAM5B,EAAE6B,IAASC,uBACjC,CAAEH,GAAI,SAAUC,KAAM5B,EAAE6B,IAASE,kBASrC,IAAMC,EAAY,WAAH,OAASlC,EAASmC,YAAcC,aAAc,MAE7DC,qBAAU,WACN,GAAIb,EACA,GAAKf,EAAc6B,SAAY7B,EAAc8B,OAOtC,GAAI9B,EAAc8B,MAAO,CAC5B,IAAMC,EAAetC,EAAEO,EAAcgC,MAAQ,yBAA0B,CAAEC,OAAQxC,EAAE6B,IAASY,UAAUC,sBACtG5C,EAAS6C,YAAa,CAAEC,MAAM,EAAMC,SAAU,QAASC,QAASR,KAChExC,EAASiD,aAAa,IACtBxB,GAAY,SAVZzB,EAAS6C,YAAa,CAAEC,MAAM,EAAMC,SAAU,UAAWC,QAAS9C,EAAE6B,IAASmB,sBAC7EhB,IAEAlC,EAASiD,aAAa,IACtBxB,GAAY,KASrB,CAAChB,EAAee,IAEnB,IAmBM2B,EAAa,SAACC,GAChB,GAAiB,SAAbA,EAAIC,MAAkC,cAAfD,EAAIE,QAAuC,eAAbtC,EAA2B,CAChF,IAAIuC,EAAe,CACfrC,aAAc,SACdkC,IAAKA,GAET1B,EAAQ8B,KAAK,CAAEC,SAAUC,IAAMC,uBAAuBC,QAAQR,EAAIS,wBAAyBvD,MAAOiD,QAEjG,CACD,IAAME,EAAwB,SAAbL,EAAIC,KACjBK,IAAMI,sBAAsBF,QAAQR,EAAIS,wBACxCH,IAAMK,cAAcH,QAAQR,EAAIS,wBAEpCnC,EAAQ8B,KAAK,CACTC,WACAnD,MAAO8C,MAgBbY,EAAUC,IAAMC,SAClB,iBAAM,CACF,CACIC,SAAU,yBACVC,UAAU,EACVC,aAAa,EACbC,SAAU,GACVC,MAAO,KACPC,KAAM,SAACC,GACH,IAAMrB,EAAMqB,EAAMC,KAAKtB,IAAIuB,SAC3B,OACI,cAAC,IAAa,CACVC,aAAc,aACdC,eAAgB,kBA/DnB,SAACzB,GAYlBpD,EAAS8E,YAAmB,CACxBC,SAAS,EACTC,SAAU9E,EAAE6B,IAASkD,qBACrBC,SAda,WACblF,EAASmF,YAAc,CACnBC,OAAQ,+BACRC,WAAW,2BACJjC,GAAG,IAAEvB,GAAIuB,EAAIS,uBAAwByB,YAAalC,EAAImC,yBAA0BC,UAAW,SAAUlC,OAAQ,YAAamC,2BAA2B,OAGhKzF,EAASiD,aAAa,IACtBxB,GAAY,OAsD0BiE,CAAatC,IACnCuC,aAAc,kBAAMxC,EAAWC,QAK/C,CACIwC,OAAQ1F,EAAE6B,IAAS8D,aACnB1B,SAAU,WACVC,UAAU,GAEd,CACIwB,OAAQ1F,EAAE6B,IAAS+D,cACnB3B,SAAU,UACVC,UAAU,GAEd,CACIwB,OAAQ1F,EAAE6B,IAASgE,sBACnB5B,SAAU,WACVC,UAAU,GAEd,CACIwB,OAAQ1F,EAAE6B,IAASwD,0BACnBpB,SAAU,2BACVC,UAAU,GAEd,CACIwB,OAAQ1F,EAAE6B,IAASuB,QACnBa,SAAU,SACVC,UAAU,EACV4B,kBAAmB,UACnBxB,KAAM,SAACC,GACH,IAAQnB,EAAWmB,EAAMC,KAAKtB,IAAIuB,SAA1BrB,OACR,OAAQpD,EAAE,iBAAUoD,GAAS2C,gBAAkB,IAAIC,mBAI/D,IA4CJ,OAzCA7D,qBAAU,WAEN,OADAH,IACO,WACHlC,EAASmG,kBAEd,IAEH9D,qBAAU,WACN,GAAIf,EACA,GAAKlB,EAAkBkC,SAAYlC,EAAkBmC,OAU9C,GAAInC,EAAkBmC,MAAO,CAChC,IAAMC,EAAetC,EAAEE,EAAkBqC,MAAQ,yBAA0B,CAAEC,OAAQxC,EAAE6B,IAASY,UAAUC,sBAC1G5C,EAAS6C,YAAa,CAAEC,MAAM,EAAMC,SAAU,QAASC,QAASR,KAChExC,EAASiD,aAAa,IACtB1B,GAAa,SAbTnB,EAAkBgG,QAClBjF,EAAgBf,EAAkBgG,MAAMC,kBACxChF,EAAejB,EAAkBgG,MAAME,eAClClG,EAAkBgG,MAAME,gBACzBtG,EAAS6C,YAAa,CAAEC,MAAM,EAAMC,SAAU,QAASC,QAAS9C,EAAE6B,IAASwE,iBAC3EvG,EAASiD,aAAa,IACtB1B,GAAa,OAU9B,CAACnB,EAAmBkB,IAEvBe,qBAAU,WACN,GAAIjB,EAAa,CACbC,GAAe,GAEf,IAAImF,EAAyB,CACzBtF,aAAcA,EACdkC,IAAK,MAGT1B,EAAQ8B,KAAKE,IAAM+C,aAAcD,MAEtC,CAACpF,IAGA,sBAAKsF,MAAO,CAAEnC,MAAO,QAAS,UAC1B,qBAAKmC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,UAAW,SACnF,cAAC,IAAmB,CAChBC,YAAalF,EACbmF,YAhLhB,SAAsBC,GACL,WAATA,GACAtF,EAAQ8B,KAAKE,IAAMuD,oBAiLnB,cAAC,IAAQ,CACLjD,QAASA,EACTkD,YAAahH,EAAE6B,IAASE,eAAgB,CAAEkF,MAAO,IACjDC,eAAgB,kBACZ,cAAC,IAAM,CACHC,SAAU1G,EAAW2G,SAAShF,QAC9BiF,QAAQ,YACRlE,KAAK,SACLmE,MAAM,UACNC,UAAW,cAAC,IAAS,CAACD,MAAM,cAC5Bd,MAAO,CAAEgB,gBAAiB,WAC1BC,QAAS,kBAAMjG,EAAQ8B,KAAKE,IAAMuD,gBAAe,SACnD/G,EAAE6B,IAAS6F,SAEjBC,KAAMlH,EAAW2G,SAASO,KAC1BC,UAAU,EACVC,WAAY5E,EACZb,QAAS3B,EAAW2G,SAAShF,QAC7B0F,UAAU,EACVC,aAAa,EACbC,eAAgB,kBApIxBlI,EAASQ,YAAiB,CACtB4E,OAAQ,6CACRC,WAAY,CACR8C,QAAa,OAAJtH,QAAI,IAAJA,OAAI,EAAJA,EAAMsH,SAAU,EACzBC,OAAY,OAAJvH,QAAI,IAAJA,OAAI,EAAJA,EAAMuH,QAAS,WAG/B7G,GAAa,UAmINxB,a,iCClPf,IAAIsI,EAAyBC,EAAQ,IAEjCC,EAA0BD,EAAQ,IAEtCE,OAAOC,eAAeC,EAAS,aAAc,CAC3CtC,OAAO,IAETsC,EAAQC,aAAU,EAElB,IAAI1E,EAAQsE,EAAwBD,EAAQ,IAIxCM,GAAW,EAFMP,EAAuBC,EAAQ,KAElBK,SAAuB1E,EAAM4E,cAAc,OAAQ,CACnFC,EAAG,0GACD,SAEJJ,EAAQC,QAAUC,G,wxBCfLG,EAAkB,SAACC,EAAqBC,GAAa,MAAmB,CACjFC,QAAS,kBAAMC,IAAgBC,YAAYJ,EAAaC,IACxDI,MAAO,CACH/G,QAASgH,IAAYC,SACrBC,QAASF,IAAYG,iBACrBC,QAASJ,IAAYK,kBAEzBtG,KAAM,OAaGuG,EAAgB,SAACC,GAAyB,MAAmB,CACtEX,QAAS,kBAAMC,IAAgBW,WAAWD,IAC1CR,MAAO,CACH/G,QAASgH,IAAYC,SACrBC,QAASF,IAAYS,uBACrBL,QAASJ,IAAYK,kBAEzBtG,KAAM,OAGG2G,EAAkB,SAACH,GAAyB,MAAmB,CACxEX,QAAS,kBAAMC,IAAgBa,gBAAgBH,IAC/CR,MAAO,CACH/G,QAASgH,IAAYW,gBACrBT,QAASF,IAAYY,wBACrBR,QAASJ,IAAYa,yBAEzB9G,KAAM,OAGG8B,EAAgB,SAAC0E,GAAyB,MAAmB,CACtEX,QAAS,kBAAMC,IAAgBiB,WAAWP,IAC1CR,MAAO,CACH/G,QAASgH,IAAYC,SACrBC,QAASF,IAAYS,uBACrBL,QAASJ,IAAYK,kBAEzBtG,KAAM,OAGG7C,EAAmB,SAACqJ,GAAyB,MAAmB,CACzEX,QAAS,kBAAMC,IAAgB3I,iBAAiBqJ,IAChDR,MAAO,CACH/G,QAASgH,IAAYe,kBACrBb,QAASF,IAAYgB,0BACrBZ,QAASJ,IAAYiB,2BAEzBlH,KAAM,OASGmH,EAAiB,SAACC,GAAkC,MAAmB,CAChFvB,QAAQ,WAAD,4BAAE,kDAAAwB,EAAA,sDASe,GARdC,EAAeF,EAAQG,QAASC,UAAUC,WAC1CC,EAAiBN,EAAQG,QAASC,UAAUG,WAC5CC,EAAcR,EAAQG,QAASC,UAAUK,QACzCC,EAAiBV,EAAQG,QAASQ,OAAOC,WAE3CC,EAAW,GACXC,EAAa,GACbC,EAAU,GACVC,EAAa,IAEbd,EAAa,CAAD,gBAEuC,OAD7Ce,EAAK,IAAIC,UACZC,OAAO,OAAQjB,EAAcA,EAAa7I,MAAM,UACjC+J,IAAcC,WAAWJ,GAAG,QAA9CJ,EAAQ,OAAwCzD,KAAU,IAAE,KAAF,OAG1DkD,EAAe,CAAD,gBAEyC,OADjDW,EAAK,IAAIC,UACZC,OAAO,OAAQb,EAAgBA,EAAejJ,MAAM,UACnC+J,IAAcC,WAAWJ,GAAG,QAAhDH,EAAU,OAAwC1D,KAAU,IAAE,KAAF,OAG5DoD,EAAY,CAAD,gBAEsC,OAD3CS,EAAK,IAAIC,UACZC,OAAO,OAAQX,EAAaA,EAAYnJ,MAAM,UAChC+J,IAAcC,WAAWJ,GAAG,QAA7CF,EAAO,OAAwC3D,KAAU,IAAE,KAAF,OAGzDsD,EAAe,CAAD,gBAEyC,OADjDO,EAAK,IAAIC,UACZC,OAAO,OAAQT,EAAgBA,EAAerJ,MAAM,UACnC+J,IAAcC,WAAWJ,GAAG,QAAhDD,EAAU,OAAwC5D,KAAU,IAAE,KAAF,GAMhB,OAHhD4C,EAAQG,QAASC,UAAUC,WAAaQ,EACxCb,EAAQG,QAASC,UAAUG,WAAaO,EACxCd,EAAQG,QAASC,UAAUK,QAAUM,EACrCf,EAAQG,QAASQ,OAAOC,WAAaI,EAAW,kBAEzCtC,IAAgBW,WAAWW,IAAQ,4CAC7C,kDAzCO,GA0CRpB,MAAO,CACH/G,QAASgH,IAAYyC,eACrBrC,QAASJ,IAAY0C,uBACrBxC,QAASF,IAAY2C,wBAEzB5I,KAAM,OAGG6I,EAAqB,WAAH,MAAU,CAAE7I,KAAMiG,IAAY6C,uBAEhDC,EAAc,SAAC3B,EAA+C4B,GAAoB,MAAmB,CAC9GnD,QAAQ,WAAD,4BAAE,4CAAAwB,EAAA,yDACe,SAAhB2B,GAA0C,kBAAhBA,EAA+B,iBAKf,GAJpCzB,EAAUH,EAAQG,QACpBU,EAAWV,EAAQC,UAAUC,WAC7BS,EAAaX,EAAQC,UAAUG,WAC/BQ,EAAUZ,EAAQC,UAAUK,QAC5BO,EAAab,EAAQQ,OAAOC,YAE5BC,GAAgC,kBAAbA,EAAqB,iBAEG,OADrCI,EAAK,IAAIC,UACZC,OAAO,OAAQN,EAAUA,EAASxJ,MAAM,UACzB+J,IAAcC,WAAWJ,GAAG,QAA9CJ,EAAQ,OAAwCzD,KAAU,gBAG1D0D,GAAoC,kBAAfA,EAAuB,iBAEG,OADzCG,EAAK,IAAIC,UACZC,OAAO,OAAQL,EAAYA,EAAWzJ,MAAM,UAC3B+J,IAAcC,WAAWJ,GAAG,QAAhDH,EAAU,OAAwC1D,KAAU,gBAG5D2D,GAA8B,kBAAZA,EAAoB,iBAEG,OADnCE,EAAK,IAAIC,UACZC,OAAO,OAAQJ,EAASA,EAAQ1J,MAAM,UACxB+J,IAAcC,WAAWJ,GAAG,QAA7CF,EAAO,OAAwC3D,KAAU,gBAGzD4D,GAAoC,kBAAfA,EAAuB,iBAEG,OADzCC,EAAK,IAAIC,UACZC,OAAO,OAAQH,EAAYA,EAAW3J,MAAM,UAC3B+J,IAAcC,WAAWJ,GAAG,QAAhDD,EAAU,OAAwC5D,KAAU,YAMA,OAH/D4C,EAAQG,QAAwBC,UAAUC,WAAaQ,EACvDb,EAAQG,QAAwBC,UAAUG,WAAaO,EACvDd,EAAQG,QAAwBC,UAAUK,QAAUM,EACpDf,EAAQG,QAAwBQ,OAAOC,WAAaI,EAAW,kBAEzDtC,IAAgBmD,SAAS7B,IAAQ,iCAErCoB,IAAcjL,KAAK6J,IAAQ,4CACrC,kDAxCO,GAyCRpB,MAAO,CACH/G,QAASgH,IAAYiD,aACrB7C,QAASJ,IAAYkD,qBACrBhD,QAASF,IAAYmD,sBAEzBpJ,KAAM,OAGGqJ,EAAmB,WAAH,MAAU,CAAErJ,KAAMiG,IAAYqD,qBAE9CC,EAAmB,SAAC5D,EAAqBC,GAAa,MAAmB,CAClFC,QAAS,kBAAMC,IAAgB0D,eAAe7D,EAAaC,IAC3DI,MAAO,CACH/G,QAASgH,IAAYwD,eACrBtD,QAASF,IAAYyD,uBACrBrD,QAASJ,IAAY0D,wBAEzB3J,KAAM,OAGG4J,EAAwB,WAAH,MAAU,CAAE5J,KAAMiG,IAAY4D,uBAEnDC,EAAoB,SAACnE,EAAqBC,GAAa,MAAmB,CACnFC,QAAS,kBAAMC,IAAgB0D,eAAe7D,EAAaC,IAC3DI,MAAO,CACH/G,QAASgH,IAAY8D,gBACrB5D,QAASF,IAAY+D,wBACrB3D,QAASJ,IAAYgE,yBAEzBjK,KAAM,OAGGkK,EAAyB,WAAH,MAAU,CAAElK,KAAMiG,IAAYkE,wBAEpDC,EAAoB,SAACzE,EAAqBC,GAAa,MAAmB,CACnFC,QAAS,kBAAMC,IAAgB0D,eAAe7D,EAAaC,IAC3DI,MAAO,CACH/G,QAASgH,IAAYoE,gBACrBlE,QAASF,IAAYqE,wBACrBjE,QAASJ,IAAYsE,yBAEzBvK,KAAM,OAGGwK,EAAyB,WAAH,MAAU,CAAExK,KAAMiG,IAAYwE,wBAEpDC,EAAsB,SAAC/E,EAAqBC,GAAa,MAAmB,CACrFC,QAAS,kBAAMC,IAAgB0D,eAAe7D,EAAaC,IAC3DI,MAAO,CACH/G,QAASgH,IAAY0E,kBACrBxE,QAASF,IAAY2E,0BACrBvE,QAASJ,IAAY4E,2BAEzB7K,KAAM,OAGG8K,EAA2B,WAAH,MAAU,CAAE9K,KAAMiG,IAAY8E,0BAEtDC,EAAsB,SAACC,GAAY,MAAmB,CAC/DpF,QAAS,kBAAMC,IAAgBkF,oBAAoBC,IACnDjF,MAAO,CACHK,QAASJ,IAAYiF,6BACrBjM,QAASgH,IAAYkF,qBACrBhF,QAASF,IAAYmF,8BAEzBpL,KAAM,OAKGqL,EAAc,SAACJ,GAAY,MAAmB,CACvDpF,QAAS,kBAAMC,IAAgBuF,YAAYJ,IAC3CjF,MAAO,CACHK,QAASJ,IAAYqF,qBACrBrM,QAASgH,IAAYsF,aACrBpF,QAASF,IAAYuF,sBAEzBxL,KAAM,OAKGyL,EAAiB,SAACR,GAAY,MAAmB,CAC1DpF,QAAS,kBAAMC,IAAgB2F,eAAeR,IAC9CjF,MAAO,CACHK,QAASJ,IAAYyF,wBACrBzM,QAASgH,IAAY0F,gBACrBxF,QAASF,IAAY2F,yBAEzB5L,KAAM,OAKG6L,EAAe,SAACZ,GAAY,MAAmB,CACxDpF,QAAS,kBAAMC,IAAgB+F,aAAaZ,IAC5CjF,MAAO,CACH/G,QAASgH,IAAY6F,WACrB3F,QAASF,IAAY8F,mBACrB1F,QAASJ,IAAY+F,oBAEzBhM,KAAM","file":"static/js/90.4264c616.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport TableZyx from 'components/fields/table-simple';\r\nimport { useHistory } from 'react-router-dom';\r\nimport paths from 'common/constants/paths';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'hooks';\r\nimport { FC, useEffect, useState } from 'react';\r\nimport { langKeys } from 'lang/keys';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { manageConfirmation, showBackdrop, showSnackbar } from 'store/popus/actions';\r\nimport { Dictionary, IChannel } from '@types';\r\nimport Button from '@material-ui/core/Button';\r\nimport React from 'react';\r\nimport { TemplateBreadcrumbs, TemplateIcons } from 'components';\r\nimport { getCollection, resetAllMain } from 'store/main/actions';\r\nimport { getChannelSel } from 'common/helpers/requestBodies';\r\nimport { checkPaymentPlan, deleteChannel } from 'store/channel/actions';\r\n\r\nexport const Channels: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n\r\n    const paymentPlanResult = useSelector(state => state.channel.checkPaymentPlan);\r\n    const executeResult = useSelector(state => state.channel.channelList);\r\n    const mainResult = useSelector(state => state.main);\r\n    const user = useSelector(state => state.login.validateToken.user);\r\n\r\n    const roledesc = user?.roledesc || \"\";\r\n\r\n    const [typeWhatsApp, setTypeWhatsApp] = useState('DIALOG');\r\n    const [canRegister, setCanRegister] = useState(false);\r\n    const [waitCheck, setWaitCheck] = useState(false);\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const history = useHistory();\r\n    const arrayBread = [\r\n        { id: \"view-0\", name: t(langKeys.configuration_plural) },\r\n        { id: \"view-1\", name: t(langKeys.channel_plural) },\r\n    ];\r\n    function redirectFunc(view: string) {\r\n        if (view === \"view-0\") {\r\n            history.push(paths.CONFIGURATION)\r\n            return;\r\n        }\r\n    }\r\n\r\n    const fetchData = () => dispatch(getCollection(getChannelSel(0)));\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            if (!executeResult.loading && !executeResult.error) {\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_delete) }))\r\n                fetchData();\r\n\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n                //dispatch(getCollection(getChannelSel(0)));\r\n            } else if (executeResult.error) {\r\n                const errormessage = t(executeResult.code || \"error_unexpected_error\", { module: t(langKeys.property).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            }\r\n        }\r\n    }, [executeResult, waitSave])\r\n\r\n    const handleDelete = (row: Dictionary) => {\r\n        const callback = () => {\r\n            dispatch(deleteChannel({\r\n                method: \"UFN_COMMUNICATIONCHANNEL_INS\",\r\n                parameters: {\r\n                    ...row, id: row.communicationchannelid, description: row.communicationchanneldesc, operation: 'DELETE', status: 'ELIMINADO', voximplantcallsupervision: false\r\n                }\r\n            }));\r\n            dispatch(showBackdrop(true));\r\n            setWaitSave(true);\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(langKeys.confirmation_delete),\r\n            callback\r\n        }))\r\n    }\r\n\r\n    const handleEdit = (row: IChannel) => {\r\n        if (row.type === 'WHAT' && row.status === 'PENDIENTE' && roledesc === \"SUPERADMIN\") {\r\n            var whatsAppData = {\r\n                typeWhatsApp: 'SMOOCH',\r\n                row: row\r\n            }\r\n            history.push({ pathname: paths.CHANNELS_EDIT_WHATSAPP.resolve(row.communicationchannelid), state: whatsAppData });\r\n        }\r\n        else {\r\n            const pathname = row.type === \"CHAZ\" ?\r\n                paths.CHANNELS_EDIT_CHATWEB.resolve(row.communicationchannelid) :\r\n                paths.CHANNELS_EDIT.resolve(row.communicationchannelid);\r\n\r\n            history.push({\r\n                pathname,\r\n                state: row,\r\n            });\r\n        }\r\n    }\r\n\r\n    const checkLimit = () => {\r\n        dispatch(checkPaymentPlan({\r\n            method: \"UFN_COMMUNICATIONCHANNEL_PAYMENTPLAN_CHECK\",\r\n            parameters: {\r\n                corpid: (user?.corpid || 0),\r\n                orgid: (user?.orgid || 0),\r\n            }\r\n        }));\r\n        setWaitCheck(true);\r\n    }\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                accessor: 'communicationchannelid',\r\n                NoFilter: true,\r\n                isComponent: true,\r\n                minWidth: 60,\r\n                width: '1%',\r\n                Cell: (props: any) => {\r\n                    const row = props.cell.row.original;\r\n                    return (\r\n                        <TemplateIcons\r\n                            viewFunction={() => { }}\r\n                            deleteFunction={() => handleDelete(row)}\r\n                            editFunction={() => handleEdit(row)}\r\n                        />\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                Header: t(langKeys.corporation),\r\n                accessor: 'corpdesc',\r\n                NoFilter: true\r\n            },\r\n            {\r\n                Header: t(langKeys.organization),\r\n                accessor: 'orgdesc',\r\n                NoFilter: true\r\n            },\r\n            {\r\n                Header: t(langKeys.communicationchannel),\r\n                accessor: 'typedesc',\r\n                NoFilter: true\r\n            },\r\n            {\r\n                Header: t(langKeys.communicationchanneldesc),\r\n                accessor: 'communicationchanneldesc',\r\n                NoFilter: true\r\n            },\r\n            {\r\n                Header: t(langKeys.status),\r\n                accessor: 'status',\r\n                NoFilter: true,\r\n                prefixTranslation: 'status_',\r\n                Cell: (props: any) => {\r\n                    const { status } = props.cell.row.original;\r\n                    return (t(`status_${status}`.toLowerCase()) || \"\").toUpperCase()\r\n                }\r\n            },\r\n        ],\r\n        []\r\n    );\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n        return () => {\r\n            dispatch(resetAllMain());\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (waitCheck) {\r\n            if (!paymentPlanResult.loading && !paymentPlanResult.error) {\r\n                if (paymentPlanResult.value) {\r\n                    setTypeWhatsApp(paymentPlanResult.value.providerWhatsApp);\r\n                    setCanRegister(paymentPlanResult.value.createChannel);\r\n                    if (!paymentPlanResult.value.createChannel) {\r\n                        dispatch(showSnackbar({ show: true, severity: \"error\", message: t(langKeys.channellimit) }))\r\n                        dispatch(showBackdrop(false));\r\n                        setWaitCheck(false);\r\n                    }\r\n                }\r\n            } else if (paymentPlanResult.error) {\r\n                const errormessage = t(paymentPlanResult.code || \"error_unexpected_error\", { module: t(langKeys.property).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitCheck(false);\r\n            }\r\n        }\r\n    }, [paymentPlanResult, waitCheck]);\r\n\r\n    useEffect(() => {\r\n        if (canRegister) {\r\n            setCanRegister(false);\r\n\r\n            var restrictionInformation = {\r\n                typeWhatsApp: typeWhatsApp,\r\n                row: null\r\n            }\r\n\r\n            history.push(paths.CHANNELS_ADD, restrictionInformation);\r\n        }\r\n    }, [canRegister]);\r\n\r\n    return (\r\n        <div style={{ width: \"100%\" }}>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <TemplateBreadcrumbs\r\n                    breadcrumbs={arrayBread}\r\n                    handleClick={redirectFunc}\r\n                />\r\n            </div>\r\n            <TableZyx\r\n                columns={columns}\r\n                titlemodule={t(langKeys.channel_plural, { count: 2 })}\r\n                ButtonsElement={() => (\r\n                    <Button\r\n                        disabled={mainResult.mainData.loading}\r\n                        variant=\"contained\"\r\n                        type=\"button\"\r\n                        color=\"primary\"\r\n                        startIcon={<ClearIcon color=\"secondary\" />}\r\n                        style={{ backgroundColor: \"#FB5F5F\" }}\r\n                        onClick={() => history.push(paths.CONFIGURATION)}\r\n                    >{t(langKeys.back)}</Button>\r\n                )}\r\n                data={mainResult.mainData.data}\r\n                download={true}\r\n                onClickRow={handleEdit}\r\n                loading={mainResult.mainData.loading}\r\n                register={true}\r\n                hoverShadow={true}\r\n                handleRegister={() => checkLimit()}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Channels","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');\n\nexports.default = _default;","import { IActionCall, IChannel, IChatWebAdd, IRequestBody } from \"@types\";\r\nimport { ChannelsService, CommonService } from \"network\";\r\nimport actionTypes from \"./actionTypes\";\r\n\r\nexport const getChannelsList = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelist(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_SUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const getChannelsListSub = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_SUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const insertChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.insertchnl(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_INSERTSUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const activateChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.activateChannel(requestBody),\r\n    types: {\r\n        loading: actionTypes.ACTIVATECHANNEL,\r\n        success: actionTypes.ACTIVATECHANNEL_SUCCESS,\r\n        failure: actionTypes.ACTIVATECHANNEL_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const deleteChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.deletechnl(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_INSERTSUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const checkPaymentPlan = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.checkPaymentPlan(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHECK_PAYMENTPLAN,\r\n        success: actionTypes.CHECK_PAYMENTPLAN_SUCCESS,\r\n        failure: actionTypes.CHECK_PAYMENTPLAN_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetChannelsList = (): IActionCall => ({ type: actionTypes.CHANNELS_RESET });\r\n\r\nexport const resetGetChannelsSubList = (): IActionCall => ({ type: actionTypes.CHANNELS_RESET });\r\n\r\nexport const resetChannelInsert = (): IActionCall => ({ type: actionTypes.CHANNELS_INSERTSUCCESS_RESET });\r\n\r\nexport const insertChannel2 = (payload: IRequestBody<IChatWebAdd>): IActionCall => ({\r\n    callAPI: async () => {\r\n        const chatIconFile = payload.service!.interface.iconbutton as File | null;\r\n        const headerIconFile = payload.service!.interface.iconheader as File | null;\r\n        const botIconFile = payload.service!.interface.iconbot as File | null;\r\n        const bubbleIconFile = payload.service!.bubble.iconbubble as File | null;\r\n\r\n        let chatIcon = \"\";\r\n        let headerIcon = \"\";\r\n        let botIcon = \"\";\r\n        let bubbleIcon = \"\";\r\n\r\n        if (chatIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', chatIconFile, chatIconFile.name);\r\n            chatIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (headerIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', headerIconFile, headerIconFile.name);\r\n            headerIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (botIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', botIconFile, botIconFile.name);\r\n            botIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (bubbleIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', bubbleIconFile, bubbleIconFile.name);\r\n            bubbleIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        payload.service!.interface.iconbutton = chatIcon;\r\n        payload.service!.interface.iconheader = headerIcon;\r\n        payload.service!.interface.iconbot = botIcon;\r\n        payload.service!.bubble.iconbubble = bubbleIcon;\r\n\r\n        return ChannelsService.insertchnl(payload);\r\n    },\r\n    types: {\r\n        loading: actionTypes.INSERT_CHANNEL,\r\n        failure: actionTypes.INSERT_CHANNEL_FAILURE,\r\n        success: actionTypes.INSERT_CHANNEL_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetInsertChannel = () => ({ type: actionTypes.INSERT_CHANNEL_RESET });\r\n\r\nexport const editChannel = (payload: IRequestBody<IChannel | IChatWebAdd>, channelType?: string): IActionCall => ({\r\n    callAPI: async () => {\r\n        if (channelType === \"CHAZ\" || channelType === \"SMOOCHANDROID\") {\r\n            const service = payload.service as IChatWebAdd;\r\n            let chatIcon = service.interface.iconbutton as File | string | null;\r\n            let headerIcon = service.interface.iconheader as File | string | null;\r\n            let botIcon = service.interface.iconbot as File | string | null;\r\n            let bubbleIcon = service.bubble.iconbubble as File | string | null;\r\n\r\n            if (chatIcon && typeof chatIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', chatIcon, chatIcon.name);\r\n                chatIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (headerIcon && typeof headerIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', headerIcon, headerIcon.name);\r\n                headerIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (botIcon && typeof botIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', botIcon, botIcon.name);\r\n                botIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (bubbleIcon && typeof bubbleIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', bubbleIcon, bubbleIcon.name);\r\n                bubbleIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            (payload.service as IChatWebAdd).interface.iconbutton = chatIcon;\r\n            (payload.service as IChatWebAdd).interface.iconheader = headerIcon;\r\n            (payload.service as IChatWebAdd).interface.iconbot = botIcon;\r\n            (payload.service as IChatWebAdd).bubble.iconbubble = bubbleIcon;\r\n\r\n            return ChannelsService.editchnl(payload);\r\n        }\r\n        return CommonService.main(payload);\r\n    },\r\n    types: {\r\n        loading: actionTypes.EDIT_CHANNEL,\r\n        failure: actionTypes.EDIT_CHANNEL_FAILURE,\r\n        success: actionTypes.EDIT_CHANNEL_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetEditChannel = () => ({ type: actionTypes.EDIT_CHANNEL_RESET });\r\n\r\nexport const getFacebookPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.FACEBOOK_PAGES,\r\n        success: actionTypes.FACEBOOK_PAGES_SUCCESS,\r\n        failure: actionTypes.FACEBOOK_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetFacebookPages = () => ({ type: actionTypes.FACEBOOK_PAGES_RESET });\r\n\r\nexport const getMessengerPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.MESSENGER_PAGES,\r\n        success: actionTypes.MESSENGER_PAGES_SUCCESS,\r\n        failure: actionTypes.MESSENGER_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetMessengerPages = () => ({ type: actionTypes.MESSENGER_PAGES_RESET });\r\n\r\nexport const getInstagramPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.INSTAGRAM_PAGES,\r\n        success: actionTypes.INSTAGRAM_PAGES_SUCCESS,\r\n        failure: actionTypes.INSTAGRAM_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetInstagramPages = () => ({ type: actionTypes.INSTAGRAM_PAGES_RESET });\r\n\r\nexport const getInstagramDMPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.INSTAGRAMDM_PAGES,\r\n        success: actionTypes.INSTAGRAMDM_PAGES_SUCCESS,\r\n        failure: actionTypes.INSTAGRAMDM_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetInstagramDMPages = () => ({ type: actionTypes.INSTAGRAMDM_PAGES_RESET });\r\n\r\nexport const synchronizeTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.synchronizeTemplate(request),\r\n    types: {\r\n        failure: actionTypes.SYNCHRONIZE_TEMPLATE_FAILURE,\r\n        loading: actionTypes.SYNCHRONIZE_TEMPLATE,\r\n        success: actionTypes.SYNCHRONIZE_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetSynchronizeTemplate = (): IActionCall => ({ type: actionTypes.SYNCHRONIZE_TEMPLATE_RESET });\r\n\r\nexport const addTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.addTemplate(request),\r\n    types: {\r\n        failure: actionTypes.ADD_TEMPLATE_FAILURE,\r\n        loading: actionTypes.ADD_TEMPLATE,\r\n        success: actionTypes.ADD_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetAddTemplate = (): IActionCall => ({ type: actionTypes.ADD_TEMPLATE_RESET });\r\n\r\nexport const deleteTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.deleteTemplate(request),\r\n    types: {\r\n        failure: actionTypes.DELETE_TEMPLATE_FAILURE,\r\n        loading: actionTypes.DELETE_TEMPLATE,\r\n        success: actionTypes.DELETE_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetDeleteTemplate = (): IActionCall => ({ type: actionTypes.DELETE_TEMPLATE_RESET });\r\n\r\nexport const getPhoneList = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPhoneList(request),\r\n    types: {\r\n        loading: actionTypes.PHONE_LIST,\r\n        success: actionTypes.PHONE_LIST_SUCCESS,\r\n        failure: actionTypes.PHONE_LIST_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetPhoneList = (): IActionCall => ({ type: actionTypes.PHONE_LIST_RESET });"],"sourceRoot":""}