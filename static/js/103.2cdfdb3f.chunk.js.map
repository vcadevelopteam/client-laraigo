{"version":3,"sources":["pages/Emojis.tsx"],"names":["useStyles","makeStyles","theme","container","width","containerHeader","display","breakpoints","up","title","fontSize","lineHeight","fontWeight","height","color","palette","text","primary","root","flexGrow","paddingTop","spacing","TabEmoji","React","memo","groups","setCategory","setSearchValue","setcleanfilter","t","useTranslation","useState","value","setValue","handleTabClick","categorydesc","onChange","event","newValue","variant","scrollButtons","indicatorColor","textColor","style","paddingBottom","label","langKeys","favorites","icon","onClick","restricted","smileys","animals","food","activities","travel","objects","symbols","flags","Emoji","emoji","fetchData","category","dispatch","useDispatch","anchorEl","setAnchorEl","sendIns","setSendIns","executeEmoji","useSelector","state","main","execute","useEffect","loading","handleExecution","favorite","manageConfirmation","visible","question","emoji_message_favorites","emoji_message_restricted","callback","showBackdrop","insEmoji","communicationchannel","allchannels","description","arrow","onContextMenu","preventDefault","currentTarget","padding","minWidth","emojichar","emojidec","open","Boolean","onClose","textAlign","emoji_removefavorites","emoji_restricted","emoji_removerestricted","emoji_favorites","Emojis","history","useHistory","classes","mainResult","emojiResult","mainData","data","setGroups","cleanfilter","getEmojiList","setGetEmojiList","searchValue","arrayBread","id","name","configuration_plural","emoji_plural","getCollection","getEmojiAllSel","filteredEmojis","useMemo","emojis","filter","trim","length","find","x","toLowerCase","includes","String","sort","a","b","categoryorder","Array","from","Set","Object","values","map","getMultiCollection","getOrgsByCorp","resetAllMain","className","justifyContent","alignItems","breadcrumbs","handleClick","view","push","paths","CONFIGURATION","mb","disabled","type","startIcon","backgroundColor","back","colorPlaceHolder","handleChangeOther","lazy","cleanState","setCleanState","marginTop","flexWrap","gap"],"mappings":"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","file":"static/js/103.2cdfdb3f.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { FC, useEffect, useMemo, useState } from \"react\";\r\nimport Box from \"@material-ui/core/Box/Box\";\r\nimport { langKeys } from \"lang/keys\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SearchField from \"components/fields/SearchField\";\r\nimport { TemplateBreadcrumbs } from 'components';\r\nimport { emojis } from \"common/constants/emojis\";\r\nimport { LaraigoAnimalIcon, LaraigoBanderaIcon, LaraigoCaraIcon, LaraigoCarroIcon, LaraigoComidaIcon, LaraigoDeporteIcon, LaraigoFocoIcon, LaraigoHashtagIcon, LaraigoRecienteIcon,LaraigoBlockedIcon } from \"icons\";\r\nimport Tabs from \"@material-ui/core/Tabs/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab/Tab\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { execute, getCollection, getMultiCollection, resetAllMain } from \"store/main/actions\";\r\nimport { getEmojiAllSel, getOrgsByCorp, insEmoji } from \"common/helpers\";\r\nimport { useSelector } from 'hooks';\r\nimport { Dictionary } from \"@types\";\r\nimport { Button, Menu, MenuItem, Tooltip } from \"@material-ui/core\";\r\nimport { manageConfirmation, showBackdrop } from \"store/popus/actions\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport paths from 'common/constants/paths';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        width: '100%'\r\n    },\r\n    containerHeader: {\r\n        display: 'block',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'flex',\r\n        }\r\n    },\r\n    title: {\r\n        fontSize: '22px',\r\n        lineHeight: '48px',\r\n        fontWeight: 'bold',\r\n        width: \"100%\",\r\n        height: '48px',\r\n        color: theme.palette.text.primary,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        paddingTop: theme.spacing(2),\r\n    }\r\n}));\r\n\r\nconst Emojis: FC = () => {\r\n    const history = useHistory();\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const mainResult = useSelector(state => state.main);\r\n    const emojiResult = useSelector(state => state.main.mainData.data);\r\n    const [groups, setGroups] = useState<Dictionary>([]);\r\n    const [cleanfilter, setcleanfilter] = useState(false);\r\n    const [getEmojiList, setGetEmojiList] = useState(false);\r\n    const [category, setCategory] = useState('FAVORITES');\r\n    const [searchValue, setSearchValue] = useState('');\r\n    \r\n    const arrayBread = [\r\n        { id: \"view-0\", name: t(langKeys.configuration_plural) },\r\n        { id: \"view-1\", name: t(langKeys.emoji_plural) },\r\n    ];\r\n    \r\n    function redirectFunc(view:string){\r\n        if(view ===\"view-0\"){\r\n            history.push(paths.CONFIGURATION)\r\n            return;\r\n        }\r\n    }\r\n\r\n    const fetchData = () => {setGetEmojiList(true);dispatch(getCollection(getEmojiAllSel()))};\r\n\r\n\r\n    const handleFiend = (searchValue: string) => {\r\n        setSearchValue(searchValue);\r\n    };\r\n\r\n    const filteredEmojis = useMemo(() =>\r\n        emojis.filter(emoji => {\r\n            if (searchValue === null || searchValue.trim().length === 0) {\r\n                switch (category) {\r\n                    case 'FAVORITES': {\r\n                        return emojiResult.find(x => x.emojidec === emoji?.emojidec && x?.favorite === true);\r\n                    }\r\n                    case 'RESTRICTED': {\r\n                        return emojiResult.find(x => x.emojidec === emoji?.emojidec && x?.restricted === true);\r\n                    }\r\n                    default: {\r\n                        return emoji?.categorydesc === category && !emojiResult.find(x => x.emojidec === emoji?.emojidec && (x?.favorite === true || x?.restricted === true));\r\n                    }\r\n                }\r\n            } else {\r\n                switch (category) {\r\n                    case 'FAVORITES': {\r\n                        return emojiResult.find(x => x.emojidec === emoji?.emojidec && x?.favorite === true && x.description.toLowerCase().includes(searchValue.toLowerCase()))\r\n                    }\r\n                    case 'RESTRICTED': {\r\n                        return emojiResult.find(x => x.emojidec === emoji?.emojidec && x?.restricted === true && x.description.toLowerCase().includes(searchValue.toLowerCase()))\r\n                    }\r\n                    default: {\r\n                        //return String(emoji?.description).toLowerCase().includes(searchValue.toLowerCase()) && emoji?.categorydesc === category;\r\n                        return String(emoji?.description).toLowerCase().includes(searchValue.toLowerCase()) && emoji?.categorydesc === category && !emojiResult.find(x => x.emojidec === emoji?.emojidec && (x?.favorite === true || x?.restricted === true));\r\n                    }\r\n                }\r\n            }\r\n        }), [category, searchValue, emojis, emojiResult]);\r\n\r\n    useEffect(() => {\r\n        if(getEmojiList){\r\n            if(!mainResult.mainData.loading){\r\n                setGetEmojiList(false)\r\n                dispatch(showBackdrop(false));\r\n            }\r\n        }\r\n    }, [mainResult.mainData]);\r\n    useEffect(() => {\r\n        fetchData();\r\n\r\n        emojis.sort((a, b) => a.categoryorder - b.categoryorder);\r\n        setGroups(Array.from(new Set(Object.values(emojis.map(a => a.categorydesc)))));\r\n\r\n        dispatch(getMultiCollection([\r\n            getOrgsByCorp(0)\r\n        ]));\r\n\r\n        return () => {\r\n            dispatch(resetAllMain());\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div style={{ display: 'flex',  justifyContent: 'space-between',  alignItems: 'center'}}>\r\n                <TemplateBreadcrumbs\r\n                    breadcrumbs={arrayBread}\r\n                    handleClick={redirectFunc}\r\n                />\r\n            </div>\r\n            <Box className={classes.containerHeader} justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\r\n                <span className={classes.title}>\r\n                    {t(langKeys.emoji_plural)}\r\n                </span>\r\n                <div style={{ flexGrow: 1 }}>\r\n                    <Button\r\n                        disabled={mainResult.mainData.loading}\r\n                        variant=\"contained\"\r\n                        type=\"button\"\r\n                        color=\"primary\"\r\n                        startIcon={<ClearIcon color=\"secondary\" />}\r\n                        style={{ backgroundColor: \"#FB5F5F\" }}\r\n                        onClick={() => history.push(paths.CONFIGURATION)}\r\n                    >{t(langKeys.back)}</Button>\r\n                </div>\r\n            </Box>\r\n\r\n            <div className={classes.root}>\r\n                <TabEmoji\r\n                    groups={groups}\r\n                    setCategory={setCategory}\r\n                    setSearchValue={setSearchValue}\r\n                    setcleanfilter={setcleanfilter}\r\n                />\r\n\r\n                <SearchField\r\n                    colorPlaceHolder='#EAE9E9'\r\n                    handleChangeOther={handleFiend}\r\n                    lazy\r\n                    cleanState={cleanfilter}\r\n                    setCleanState={setcleanfilter}\r\n                />\r\n\r\n                <div\r\n                    key='tabPanel_emoji'\r\n                    style={{ padding: 12, marginTop: '12px', display: 'flex', flexWrap: 'wrap', gap: 8 }}>\r\n                    {\r\n                        filteredEmojis.map((emoji: Dictionary) =>\r\n                            <Emoji\r\n                                key={\"menuEmoji_\" + emoji?.emojidec}\r\n                                emoji={emoji}\r\n                                fetchData={fetchData}\r\n                                category={category}\r\n                            />\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TabEmoji: FC<{ groups: Dictionary, setCategory: (categorydesc: any) => void, setSearchValue: (searchValue: any) => any, setcleanfilter: (cleanfilter: any) => any }> = React.memo(({ groups, setCategory, setSearchValue,setcleanfilter }) => {\r\n    const { t } = useTranslation();\r\n    const [value, setValue] = useState(0);\r\n\r\n    const handleChange = (event: any, newValue: any) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleTabClick = (categorydesc: string) => {\r\n        setCategory(categorydesc);\r\n        setSearchValue('');\r\n        setcleanfilter(true)\r\n    };\r\n\r\n    return (\r\n        <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            variant=\"scrollable\"\r\n            scrollButtons=\"on\"\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n            aria-label=\"scrollable force tabs example\"\r\n            style={{ paddingBottom: 12 }}\r\n        >\r\n            <Tab\r\n                label={t(langKeys.favorites)} icon={<LaraigoRecienteIcon style={{width:25}}/>}\r\n                onClick={() => handleTabClick(\"FAVORITES\")}\r\n            />\r\n            <Tab\r\n                label={t(langKeys.restricted)} icon={<LaraigoBlockedIcon style={{width:25}}/>}\r\n                onClick={() => handleTabClick(\"RESTRICTED\")}\r\n            />\r\n            <Tab\r\n                label={t(langKeys.smileys)} icon={<LaraigoCaraIcon style={{width:25}}/>}\r\n                onClick={() => handleTabClick(\"SMILEYS\")}\r\n            />\r\n            <Tab\r\n                label={t(langKeys.animals)} icon={<LaraigoAnimalIcon style={{width:25}}/>}\r\n                onClick={() => handleTabClick(\"ANIMAL\")}\r\n            />\r\n            <Tab\r\n                label={t(langKeys.food)} icon={<LaraigoComidaIcon style={{width:25}}/>}\r\n                onClick={() => handleTabClick(\"FOOD\")}\r\n            />\r\n            <Tab\r\n                label={t(langKeys.activities)} icon={<LaraigoDeporteIcon style={{width:25}}/>}\r\n                onClick={() => handleTabClick(\"ACTIVITY\")}\r\n            />\r\n            <Tab\r\n                label={t(langKeys.travel)} icon={<LaraigoCarroIcon style={{width:25}}/>}\r\n                onClick={() => handleTabClick(\"TRAVEL\")}\r\n            />\r\n            <Tab\r\n                label={t(langKeys.objects)} icon={<LaraigoFocoIcon style={{width:25}}/>}\r\n                onClick={() => handleTabClick(\"OBJECT\")}\r\n            />\r\n            <Tab\r\n                label={t(langKeys.symbols)} icon={<LaraigoHashtagIcon style={{width:25}}/>}\r\n                onClick={() => handleTabClick(\"SYMBOL\")}\r\n            />\r\n            <Tab\r\n                label={t(langKeys.flags)} icon={<LaraigoBanderaIcon style={{width:25}}/>}\r\n                onClick={() => handleTabClick(\"FLAG\")}\r\n            />\r\n        </Tabs>\r\n    )\r\n})\r\n\r\nconst Emoji: FC<{ emoji: Dictionary, fetchData: () => void, category:string }> = React.memo(({ emoji, fetchData,category }) => {\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch();\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [sendIns, setSendIns] = useState(false);\r\n    const executeEmoji = useSelector(state => state.main.execute);\r\n\r\n    const handleClick = (event: any) => {\r\n        event.preventDefault();\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(sendIns){\r\n            if(!executeEmoji.loading){\r\n                setSendIns(false);\r\n                fetchData();\r\n            }\r\n        }\r\n    }, [executeEmoji]);\r\n\r\n    const handleExecution = (favorite: boolean,restricted: boolean) => {\r\n        setAnchorEl(null);\r\n\r\n        const callback = () => {\r\n            setSendIns(true)\r\n            dispatch(showBackdrop(true));\r\n            dispatch(execute(insEmoji({\r\n                ...emoji,\r\n                communicationchannel: \"\",\r\n                favorite,\r\n                restricted,\r\n                allchannels: true\r\n            })));\r\n        }\r\n\r\n        dispatch(manageConfirmation({\r\n            visible: true,\r\n            question: t(favorite ? langKeys.emoji_message_favorites : langKeys.emoji_message_restricted),\r\n            callback\r\n        }))\r\n    };\r\n\r\n    const handleOnClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip key={'tooltip_' + emoji?.emojidec} title={emoji?.description} arrow>\r\n                <Button\r\n                    aria-controls=\"simple-menu\" aria-haspopup=\"true\"\r\n                    onContextMenu={handleClick}\r\n                    key={'button_' + emoji?.emojidec}\r\n                    style={{ padding: 0, minWidth: 50 }}>\r\n                    <label\r\n                        key={'label_' + emoji?.emojidec}\r\n                        style={{ fontSize: 30 }}>{emoji?.emojichar}\r\n                    </label>\r\n                </Button>\r\n            </Tooltip>\r\n            <Menu\r\n                key={\"simple-menu_\" + emoji?.emojidec}\r\n                anchorEl={anchorEl}\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleOnClose}\r\n            >\r\n                <MenuItem key={\"menu_item_x_\" + emoji?.emojidec} style={{textAlign: \"center\"}}>{emoji?.description}</MenuItem>\r\n                {category===\"FAVORITES\" &&\r\n                <>\r\n                    <MenuItem key={\"menu_item_1_\" + emoji?.emojidec} onClick={() => handleExecution(false,false)}>{t(langKeys.emoji_removefavorites)}</MenuItem>\r\n                    <MenuItem key={\"menu_item_2_\" + emoji?.emojidec} onClick={() => handleExecution(false,true)}>{t(langKeys.emoji_restricted)}</MenuItem>\r\n                </>\r\n                }\r\n                {category===\"RESTRICTED\"&&\r\n                 <>\r\n                    <MenuItem key={\"menu_item_2_\" + emoji?.emojidec} onClick={() => handleExecution(false,false)}>{t(langKeys.emoji_removerestricted)}</MenuItem>\r\n                    <MenuItem key={\"menu_item_1_\" + emoji?.emojidec} onClick={() => handleExecution(true,false)}>{t(langKeys.emoji_favorites)}</MenuItem>\r\n                 </>\r\n                }\r\n                {(category!==\"RESTRICTED\" && category!==\"FAVORITES\") &&\r\n                <>\r\n                    <MenuItem key={\"menu_item_1_\" + emoji?.emojidec} onClick={() => handleExecution(true,false)}>{t(langKeys.emoji_favorites)}</MenuItem>\r\n                    <MenuItem key={\"menu_item_2_\" + emoji?.emojidec} onClick={() => handleExecution(false,true)}>{t(langKeys.emoji_restricted)}</MenuItem>\r\n                </>\r\n                    \r\n                }\r\n            </Menu>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Emojis;"],"sourceRoot":""}