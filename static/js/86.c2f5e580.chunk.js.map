{"version":3,"sources":["pages/channels/ChannelAddSMS.tsx","store/channel/actions.ts","../node_modules/@material-ui/icons/Sms.js"],"names":["useChannelAddStyles","makeStyles","theme","button","padding","fontWeight","fontSize","textTransform","width","ChannelAddSMS","useState","viewSelected","setViewSelected","waitSave","setWaitSave","setins","setsetins","nextbutton","setNextbutton","channelreg","setChannelreg","mainResult","useSelector","state","channel","channelList","executeResult","successinsert","history","useHistory","dispatch","useDispatch","t","useTranslation","coloricon","setcoloricon","classes","fields","setFields","whatsAppData","useLocation","a","insertChannel","useEffect","loading","showSnackbar","show","severity","message","langKeys","successful_register","showBackdrop","push","paths","CHANNELS","errormessage","code","module","property","toLocaleLowerCase","style","color","href","onClick","e","preventDefault","CHANNELS_ADD","previoustext","textAlign","smstitle","smstitle2","className","onChange","value","service","emittername","url","test","partialf","apikey","valueDefault","label","paddingLeft","disabled","variant","next","marginLeft","marginRight","maxWidth","commchannelfinishreg","parameters","description","setnameField","givechannelname","lineHeight","mb","givechannelcolor","display","justifyContent","alignItems","fill","height","hex","prev","finishreg","getChannelsList","accessToken","appId","callAPI","ChannelsService","getPagelist","types","actionTypes","success","CHANNELS_SUCCESS","failure","CHANNELS_FAILURE","type","requestBody","insertchnl","CHANNELS_INSERTSUCCESS","activateChannel","ACTIVATECHANNEL","ACTIVATECHANNEL_SUCCESS","ACTIVATECHANNEL_FAILURE","deleteChannel","deletechnl","checkPaymentPlan","CHECK_PAYMENTPLAN","CHECK_PAYMENTPLAN_SUCCESS","CHECK_PAYMENTPLAN_FAILURE","insertChannel2","payload","chatIconFile","interface","iconbutton","headerIconFile","iconheader","botIconFile","iconbot","bubbleIconFile","bubble","iconbubble","chatIcon","headerIcon","botIcon","bubbleIcon","fd","FormData","append","name","CommonService","uploadFile","data","INSERT_CHANNEL","INSERT_CHANNEL_FAILURE","INSERT_CHANNEL_SUCCESS","resetInsertChannel","INSERT_CHANNEL_RESET","editChannel","channelType","editchnl","main","EDIT_CHANNEL","EDIT_CHANNEL_FAILURE","EDIT_CHANNEL_SUCCESS","resetEditChannel","EDIT_CHANNEL_RESET","getFacebookPages","getPagelistSub","FACEBOOK_PAGES","FACEBOOK_PAGES_SUCCESS","FACEBOOK_PAGES_FAILURE","resetGetFacebookPages","FACEBOOK_PAGES_RESET","getMessengerPages","MESSENGER_PAGES","MESSENGER_PAGES_SUCCESS","MESSENGER_PAGES_FAILURE","resetGetMessengerPages","MESSENGER_PAGES_RESET","getInstagramPages","INSTAGRAM_PAGES","INSTAGRAM_PAGES_SUCCESS","INSTAGRAM_PAGES_FAILURE","resetGetInstagramPages","INSTAGRAM_PAGES_RESET","getInstagramDMPages","INSTAGRAMDM_PAGES","INSTAGRAMDM_PAGES_SUCCESS","INSTAGRAMDM_PAGES_FAILURE","resetGetInstagramDMPages","INSTAGRAMDM_PAGES_RESET","synchronizeTemplate","request","SYNCHRONIZE_TEMPLATE_FAILURE","SYNCHRONIZE_TEMPLATE","SYNCHRONIZE_TEMPLATE_SUCCESS","addTemplate","ADD_TEMPLATE_FAILURE","ADD_TEMPLATE","ADD_TEMPLATE_SUCCESS","deleteTemplate","DELETE_TEMPLATE_FAILURE","DELETE_TEMPLATE","DELETE_TEMPLATE_SUCCESS","getPhoneList","PHONE_LIST","PHONE_LIST_SUCCESS","PHONE_LIST_FAILURE","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","React","_default","createElement","d"],"mappings":"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","file":"static/js/86.c2f5e580.chunk.js","sourcesContent":["/* eslint-disable no-useless-escape */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { makeStyles, Breadcrumbs, Button, Box } from '@material-ui/core';\r\nimport Link from '@material-ui/core/Link';\r\nimport { showBackdrop, showSnackbar } from 'store/popus/actions';\r\nimport { langKeys } from \"lang/keys\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { FieldEdit, ColorInput } from \"components\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport paths from \"common/constants/paths\";\r\nimport { useSelector } from \"hooks\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { insertChannel } from \"store/channel/actions\";\r\nimport SmsIcon from '@material-ui/icons/Sms';\r\n\r\ninterface whatsAppData {\r\n    typeWhatsApp?: string;\r\n    row?: any;\r\n}\r\n\r\nconst useChannelAddStyles = makeStyles(theme => ({\r\n    button: {\r\n        padding: 12,\r\n        fontWeight: 500,\r\n        fontSize: '14px',\r\n        textTransform: 'initial',\r\n        width: \"180px\"\r\n    },\r\n}));\r\n\r\nexport const ChannelAddSMS: FC = () => {\r\n    const [viewSelected, setViewSelected] = useState(\"view1\");\r\n    const [waitSave, setWaitSave] = useState(false);\r\n    const [setins, setsetins] = useState(false);\r\n    const [nextbutton, setNextbutton] = useState(true);\r\n    const [channelreg, setChannelreg] = useState(true);\r\n    const mainResult = useSelector(state => state.channel.channelList)\r\n    const executeResult = useSelector(state => state.channel.successinsert)\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n    const [coloricon, setcoloricon] = useState(\"#1D9BF0\");\r\n    const classes = useChannelAddStyles();\r\n    const [fields, setFields] = useState({\r\n        \"method\": \"UFN_COMMUNICATIONCHANNEL_INS\",\r\n        \"parameters\": {\r\n            \"id\": 0,\r\n            \"description\": \"\",\r\n            \"type\": \"\",\r\n            \"communicationchannelsite\": \"\",\r\n            \"communicationchannelowner\": \"\",\r\n            \"chatflowenabled\": true,\r\n            \"integrationid\": \"\",\r\n            \"color\": \"\",\r\n            \"icons\": \"\",\r\n            \"other\": \"\",\r\n            \"form\": \"\",\r\n            \"apikey\": \"\",\r\n            \"coloricon\": \"#1D9BF0\",\r\n            \"voximplantcallsupervision\": false\r\n        },\r\n        \"type\": \"INFOBIPSMS\",\r\n        \"service\": {\r\n            \"apikey\": \"\",\r\n            \"url\": \"\",\r\n            \"emittername\": \"\",\r\n        }\r\n    })\r\n\r\n    const location = useLocation<whatsAppData>();\r\n\r\n    const whatsAppData = location.state as whatsAppData | null;\r\n\r\n    async function finishreg() {\r\n        setsetins(true);\r\n        dispatch(insertChannel(fields));\r\n        setWaitSave(true);\r\n        setViewSelected(\"main\");\r\n    }\r\n    useEffect(() => {\r\n        if (!mainResult.loading && setins) {\r\n            if (executeResult) {\r\n                setsetins(false)\r\n                dispatch(showSnackbar({ show: true, severity: \"success\", message: t(langKeys.successful_register) }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n                history.push(paths.CHANNELS);\r\n            } else if (!executeResult) {\r\n                const errormessage = t(mainResult.code || \"error_unexpected_error\", { module: t(langKeys.property).toLocaleLowerCase() })\r\n                dispatch(showSnackbar({ show: true, severity: \"error\", message: errormessage }))\r\n                dispatch(showBackdrop(false));\r\n                setWaitSave(false);\r\n            }\r\n        }\r\n    }, [mainResult])\r\n\r\n    useEffect(() => {\r\n        if (waitSave) {\r\n            dispatch(showBackdrop(false));\r\n            setWaitSave(false);\r\n        }\r\n    }, [mainResult])\r\n\r\n    function setnameField(value: any) {\r\n        setChannelreg(value === \"\");\r\n        let partialf = fields;\r\n        partialf.parameters.description = value;\r\n        setFields(partialf);\r\n    }\r\n    \r\n    if (viewSelected === \"view1\") {\r\n        return (\r\n            <div style={{ width: '100%' }}>\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                    <Link color=\"textSecondary\" key={\"mainview\"} href=\"/\" onClick={(e) => { e.preventDefault(); history.push(paths.CHANNELS_ADD, whatsAppData) }}>\r\n                        {t(langKeys.previoustext)}\r\n                    </Link>\r\n                </Breadcrumbs>\r\n                <div>\r\n                    <div style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"2em\", color: \"#7721ad\", padding: \"20px\" }}>{t(langKeys.smstitle)}</div>\r\n                    <div style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"1.1em\", padding: \"20px 80px\" }}>{t(langKeys.smstitle2)}</div>\r\n                    <div className=\"row-zyx\">\r\n                        <div className=\"col-3\"></div>\r\n                        <FieldEdit\r\n                            onChange={(value) => {\r\n                                setNextbutton(value === \"\" || fields.service.emittername === \"\" || fields.service.url === \"\" || !/((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/.test(fields.service.url))\r\n                                let partialf = fields;\r\n                                partialf.service.apikey = value\r\n                                setFields(partialf)\r\n                            }}\r\n                            valueDefault={fields.service.apikey}\r\n                            label={t(langKeys.apikey)}\r\n                            className=\"col-6\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <div className=\"col-3\"></div>\r\n                        <FieldEdit\r\n                            onChange={(value) => {\r\n                                setNextbutton(value === \"\" || fields.service.emittername === \"\" || fields.service.apikey === \"\" || !/((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/.test(value))\r\n                                let partialf = fields;\r\n                                partialf.service.url = value\r\n                                setFields(partialf)\r\n                            }}\r\n                            valueDefault={fields.service.url}\r\n                            label={t(langKeys.url)}\r\n                            className=\"col-6\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <div className=\"col-3\"></div>\r\n                        <FieldEdit\r\n                            onChange={(value) => {\r\n                                setNextbutton(value === \"\" || fields.service.apikey === \"\" || fields.service.url === \"\" || !/((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/.test(fields.service.url))\r\n                                let partialf = fields;\r\n                                partialf.service.emittername = value\r\n                                setFields(partialf)\r\n                            }}\r\n                            valueDefault={fields.service.emittername}\r\n                            label={t(langKeys.emittername)}\r\n                            className=\"col-6\"\r\n                        />\r\n                    </div>\r\n                    <div style={{ paddingLeft: \"80%\" }}>\r\n                        <Button\r\n                            disabled={nextbutton}\r\n                            onClick={() => { setViewSelected(\"view2\") }}\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >{t(langKeys.next)}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div style={{ width: '100%' }}>\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                    <Link color=\"textSecondary\" key={\"mainview\"} href=\"/\" onClick={(e) => { e.preventDefault(); setViewSelected(\"view1\") }}>\r\n                        {t(langKeys.previoustext)}\r\n                    </Link>\r\n                </Breadcrumbs>\r\n                <div>\r\n                    <div style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"2em\", color: \"#7721ad\", padding: \"20px\", marginLeft: \"auto\", marginRight: \"auto\", maxWidth: \"800px\" }}>{t(langKeys.commchannelfinishreg)}</div>\r\n                    <div className=\"row-zyx\">\r\n                        <div className=\"col-3\"></div>\r\n                        <FieldEdit\r\n                            onChange={(value) => setnameField(value)}\r\n                            label={t(langKeys.givechannelname)}\r\n                            className=\"col-6\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"row-zyx\">\r\n                        <div className=\"col-3\"></div>\r\n                        <div className=\"col-6\">\r\n                            <Box fontWeight={500} lineHeight=\"18px\" fontSize={14} mb={1} color=\"textPrimary\">\r\n                                {t(langKeys.givechannelcolor)}\r\n                            </Box>\r\n                            <div style={{ display: \"flex\", justifyContent: \"space-around\", alignItems: \"center\" }}>\r\n                                <SmsIcon style={{ fill: `${coloricon}`, width: \"100px\", height: \"100px\" }} />\r\n                                <ColorInput\r\n                                    hex={fields.parameters.coloricon}\r\n                                    onChange={e => {\r\n                                        setFields(prev => ({\r\n                                            ...prev,\r\n                                            parameters: { ...prev.parameters, coloricon: e.hex, color: e.hex },\r\n                                        }));\r\n                                        setcoloricon(e.hex)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ paddingLeft: \"80%\" }}>\r\n                        <Button\r\n                            onClick={() => { finishreg() }}\r\n                            className={classes.button}\r\n                            disabled={channelreg || mainResult.loading}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >{t(langKeys.finishreg)}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChannelAddSMS","import { IActionCall, IChannel, IChatWebAdd, IRequestBody } from \"@types\";\r\nimport { ChannelsService, CommonService } from \"network\";\r\nimport actionTypes from \"./actionTypes\";\r\n\r\nexport const getChannelsList = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelist(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_SUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const getChannelsListSub = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_SUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const insertChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.insertchnl(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_INSERTSUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const activateChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.activateChannel(requestBody),\r\n    types: {\r\n        loading: actionTypes.ACTIVATECHANNEL,\r\n        success: actionTypes.ACTIVATECHANNEL_SUCCESS,\r\n        failure: actionTypes.ACTIVATECHANNEL_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const deleteChannel = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.deletechnl(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHANNELS,\r\n        success: actionTypes.CHANNELS_INSERTSUCCESS,\r\n        failure: actionTypes.CHANNELS_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const checkPaymentPlan = (requestBody: IRequestBody): IActionCall => ({\r\n    callAPI: () => ChannelsService.checkPaymentPlan(requestBody),\r\n    types: {\r\n        loading: actionTypes.CHECK_PAYMENTPLAN,\r\n        success: actionTypes.CHECK_PAYMENTPLAN_SUCCESS,\r\n        failure: actionTypes.CHECK_PAYMENTPLAN_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetChannelsList = (): IActionCall => ({ type: actionTypes.CHANNELS_RESET });\r\n\r\nexport const resetGetChannelsSubList = (): IActionCall => ({ type: actionTypes.CHANNELS_RESET });\r\n\r\nexport const resetChannelInsert = (): IActionCall => ({ type: actionTypes.CHANNELS_INSERTSUCCESS_RESET });\r\n\r\nexport const insertChannel2 = (payload: IRequestBody<IChatWebAdd>): IActionCall => ({\r\n    callAPI: async () => {\r\n        const chatIconFile = payload.service!.interface.iconbutton as File | null;\r\n        const headerIconFile = payload.service!.interface.iconheader as File | null;\r\n        const botIconFile = payload.service!.interface.iconbot as File | null;\r\n        const bubbleIconFile = payload.service!.bubble.iconbubble as File | null;\r\n\r\n        let chatIcon = \"\";\r\n        let headerIcon = \"\";\r\n        let botIcon = \"\";\r\n        let bubbleIcon = \"\";\r\n\r\n        if (chatIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', chatIconFile, chatIconFile.name);\r\n            chatIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (headerIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', headerIconFile, headerIconFile.name);\r\n            headerIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (botIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', botIconFile, botIconFile.name);\r\n            botIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        if (bubbleIconFile) {\r\n            const fd = new FormData();\r\n            fd.append('file', bubbleIconFile, bubbleIconFile.name);\r\n            bubbleIcon = (await CommonService.uploadFile(fd)).data[\"url\"];\r\n        }\r\n\r\n        payload.service!.interface.iconbutton = chatIcon;\r\n        payload.service!.interface.iconheader = headerIcon;\r\n        payload.service!.interface.iconbot = botIcon;\r\n        payload.service!.bubble.iconbubble = bubbleIcon;\r\n\r\n        return ChannelsService.insertchnl(payload);\r\n    },\r\n    types: {\r\n        loading: actionTypes.INSERT_CHANNEL,\r\n        failure: actionTypes.INSERT_CHANNEL_FAILURE,\r\n        success: actionTypes.INSERT_CHANNEL_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetInsertChannel = () => ({ type: actionTypes.INSERT_CHANNEL_RESET });\r\n\r\nexport const editChannel = (payload: IRequestBody<IChannel | IChatWebAdd>, channelType?: string): IActionCall => ({\r\n    callAPI: async () => {\r\n        if (channelType === \"CHAZ\" || channelType === \"SMOOCHANDROID\") {\r\n            const service = payload.service as IChatWebAdd;\r\n            let chatIcon = service.interface.iconbutton as File | string | null;\r\n            let headerIcon = service.interface.iconheader as File | string | null;\r\n            let botIcon = service.interface.iconbot as File | string | null;\r\n            let bubbleIcon = service.bubble.iconbubble as File | string | null;\r\n\r\n            if (chatIcon && typeof chatIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', chatIcon, chatIcon.name);\r\n                chatIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (headerIcon && typeof headerIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', headerIcon, headerIcon.name);\r\n                headerIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (botIcon && typeof botIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', botIcon, botIcon.name);\r\n                botIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            if (bubbleIcon && typeof bubbleIcon === \"object\") {\r\n                const fd = new FormData();\r\n                fd.append('file', bubbleIcon, bubbleIcon.name);\r\n                bubbleIcon = (await CommonService.uploadFile(fd)).data[\"url\"] as string;\r\n            }\r\n\r\n            (payload.service as IChatWebAdd).interface.iconbutton = chatIcon;\r\n            (payload.service as IChatWebAdd).interface.iconheader = headerIcon;\r\n            (payload.service as IChatWebAdd).interface.iconbot = botIcon;\r\n            (payload.service as IChatWebAdd).bubble.iconbubble = bubbleIcon;\r\n\r\n            return ChannelsService.editchnl(payload);\r\n        }\r\n        return CommonService.main(payload);\r\n    },\r\n    types: {\r\n        loading: actionTypes.EDIT_CHANNEL,\r\n        failure: actionTypes.EDIT_CHANNEL_FAILURE,\r\n        success: actionTypes.EDIT_CHANNEL_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetEditChannel = () => ({ type: actionTypes.EDIT_CHANNEL_RESET });\r\n\r\nexport const getFacebookPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.FACEBOOK_PAGES,\r\n        success: actionTypes.FACEBOOK_PAGES_SUCCESS,\r\n        failure: actionTypes.FACEBOOK_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetFacebookPages = () => ({ type: actionTypes.FACEBOOK_PAGES_RESET });\r\n\r\nexport const getMessengerPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.MESSENGER_PAGES,\r\n        success: actionTypes.MESSENGER_PAGES_SUCCESS,\r\n        failure: actionTypes.MESSENGER_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetMessengerPages = () => ({ type: actionTypes.MESSENGER_PAGES_RESET });\r\n\r\nexport const getInstagramPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.INSTAGRAM_PAGES,\r\n        success: actionTypes.INSTAGRAM_PAGES_SUCCESS,\r\n        failure: actionTypes.INSTAGRAM_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetInstagramPages = () => ({ type: actionTypes.INSTAGRAM_PAGES_RESET });\r\n\r\nexport const getInstagramDMPages = (accessToken: String, appId: String): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPagelistSub(accessToken, appId),\r\n    types: {\r\n        loading: actionTypes.INSTAGRAMDM_PAGES,\r\n        success: actionTypes.INSTAGRAMDM_PAGES_SUCCESS,\r\n        failure: actionTypes.INSTAGRAMDM_PAGES_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetInstagramDMPages = () => ({ type: actionTypes.INSTAGRAMDM_PAGES_RESET });\r\n\r\nexport const synchronizeTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.synchronizeTemplate(request),\r\n    types: {\r\n        failure: actionTypes.SYNCHRONIZE_TEMPLATE_FAILURE,\r\n        loading: actionTypes.SYNCHRONIZE_TEMPLATE,\r\n        success: actionTypes.SYNCHRONIZE_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetSynchronizeTemplate = (): IActionCall => ({ type: actionTypes.SYNCHRONIZE_TEMPLATE_RESET });\r\n\r\nexport const addTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.addTemplate(request),\r\n    types: {\r\n        failure: actionTypes.ADD_TEMPLATE_FAILURE,\r\n        loading: actionTypes.ADD_TEMPLATE,\r\n        success: actionTypes.ADD_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetAddTemplate = (): IActionCall => ({ type: actionTypes.ADD_TEMPLATE_RESET });\r\n\r\nexport const deleteTemplate = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.deleteTemplate(request),\r\n    types: {\r\n        failure: actionTypes.DELETE_TEMPLATE_FAILURE,\r\n        loading: actionTypes.DELETE_TEMPLATE,\r\n        success: actionTypes.DELETE_TEMPLATE_SUCCESS,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetDeleteTemplate = (): IActionCall => ({ type: actionTypes.DELETE_TEMPLATE_RESET });\r\n\r\nexport const getPhoneList = (request: any): IActionCall => ({\r\n    callAPI: () => ChannelsService.getPhoneList(request),\r\n    types: {\r\n        loading: actionTypes.PHONE_LIST,\r\n        success: actionTypes.PHONE_LIST_SUCCESS,\r\n        failure: actionTypes.PHONE_LIST_FAILURE,\r\n    },\r\n    type: null,\r\n});\r\n\r\nexport const resetGetPhoneList = (): IActionCall => ({ type: actionTypes.PHONE_LIST_RESET });","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM9 11H7V9h2v2zm4 0h-2V9h2v2zm4 0h-2V9h2v2z\"\n}), 'Sms');\n\nexports.default = _default;"],"sourceRoot":""}